/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "getNumValidators()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getValidatorInfo(uint64)(uint64,address,address,uint64,(uint16,uint32,address,uint8,uint16),(uint16,uint64,uint64),(uint16,byte[32])[3],(uint16,uint64,uint16,uint64)[12])": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getValidatorConfig(uint64)(uint16,uint32,address,uint8,uint16)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addValidator(address,address,uint64,(uint16,uint32,address,uint8,uint16))uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addPool(uint64)(uint64,uint16)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addStake(uint64,uint64)(uint64,uint16)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "stakeRemoved(uint64,uint64,address,uint64,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "numValidators": {
          "type": "uint64",
          "key": "numV"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "ValidatorRegistry",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getNumValidators",
        "desc": "Returns the current number of validators",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getValidatorInfo",
        "readonly": true,
        "args": [
          {
            "name": "validatorID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(uint64,address,address,uint64,(uint16,uint32,address,uint8,uint16),(uint16,uint64,uint64),(uint16,byte[32])[3],(uint16,uint64,uint16,uint64)[12])"
        }
      },
      {
        "name": "getValidatorConfig",
        "readonly": true,
        "args": [
          {
            "name": "validatorID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(uint16,uint32,address,uint8,uint16)"
        }
      },
      {
        "name": "addValidator",
        "desc": "Adds a new validator",
        "args": [
          {
            "name": "owner",
            "type": "address",
            "desc": "The account (presumably cold-wallet) that owns the validator set"
          },
          {
            "name": "manager",
            "type": "address",
            "desc": "The account that manages the pool part. keys and triggers payouts.  Normally a hot-wallet as node sidecar needs the keys"
          },
          {
            "name": "nfdAppID",
            "type": "uint64",
            "desc": "Optional NFD App ID linking to information about the validator being added - where information about the validator and their pools can be found."
          },
          {
            "name": "config",
            "type": "(uint16,uint32,address,uint8,uint16)",
            "desc": "ValidatorConfig struct"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "addPool",
        "desc": "Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.",
        "args": [
          {
            "name": "validatorID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(uint64,uint16)"
        }
      },
      {
        "name": "addStake",
        "args": [
          {
            "name": "validatorID",
            "type": "uint64"
          },
          {
            "name": "amountToStake",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(uint64,uint16)"
        }
      },
      {
        "name": "stakeRemoved",
        "desc": "stakerRemoved is called by Staking Pools to inform the validator (us) that a particular amount of total stake has been removedfrom the specified pool.  This is used to update the stats we have in our PoolInfo storage.The calling App ID is validated against our pool list as well.",
        "args": [
          {
            "name": "validatorID",
            "type": "uint64"
          },
          {
            "name": "poolID",
            "type": "uint64",
            "desc": "1-index based index into list of pools for this validator"
          },
          {
            "name": "staker",
            "type": "address"
          },
          {
            "name": "amountRemoved",
            "type": "uint64"
          },
          {
            "name": "stakerRemoved",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

/**
 * Defines the types of available calls and state of the ValidatorRegistry smart contract.
 */
export type ValidatorRegistry = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'getNumValidators()uint64' | 'getNumValidators', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'getValidatorInfo(uint64)(uint64,address,address,uint64,(uint16,uint32,address,uint8,uint16),(uint16,uint64,uint64),(uint16,byte[32])[3],(uint16,uint64,uint16,uint64)[12])' | 'getValidatorInfo', {
      argsObj: {
        validatorID: bigint | number
      }
      argsTuple: [validatorID: bigint | number]
      returns: [bigint, string, string, bigint, [number, number, string, number, number], [number, bigint, bigint], [[number, Uint8Array], [number, Uint8Array], [number, Uint8Array]], [[number, bigint, number, bigint], [number, bigint, number, bigint], [number, bigint, number, bigint], [number, bigint, number, bigint], [number, bigint, number, bigint], [number, bigint, number, bigint], [number, bigint, number, bigint], [number, bigint, number, bigint], [number, bigint, number, bigint], [number, bigint, number, bigint], [number, bigint, number, bigint], [number, bigint, number, bigint]]]
    }>
    & Record<'getValidatorConfig(uint64)(uint16,uint32,address,uint8,uint16)' | 'getValidatorConfig', {
      argsObj: {
        validatorID: bigint | number
      }
      argsTuple: [validatorID: bigint | number]
      returns: [number, number, string, number, number]
    }>
    & Record<'addValidator(address,address,uint64,(uint16,uint32,address,uint8,uint16))uint64' | 'addValidator', {
      argsObj: {
        /**
         * The account (presumably cold-wallet) that owns the validator set
         */
        owner: string
        /**
         * The account that manages the pool part. keys and triggers payouts.  Normally a hot-wallet as node sidecar needs the keys
         */
        manager: string
        /**
         * Optional NFD App ID linking to information about the validator being added - where information about the validator and their pools can be found.
         */
        nfdAppID: bigint | number
        /**
         * ValidatorConfig struct
         */
        config: [number, number, string, number, number]
      }
      argsTuple: [owner: string, manager: string, nfdAppID: bigint | number, config: [number, number, string, number, number]]
      returns: bigint
    }>
    & Record<'addPool(uint64)(uint64,uint16)' | 'addPool', {
      argsObj: {
        validatorID: bigint | number
      }
      argsTuple: [validatorID: bigint | number]
      returns: [bigint, number]
    }>
    & Record<'addStake(uint64,uint64)(uint64,uint16)' | 'addStake', {
      argsObj: {
        validatorID: bigint | number
        amountToStake: bigint | number
      }
      argsTuple: [validatorID: bigint | number, amountToStake: bigint | number]
      returns: [bigint, number]
    }>
    & Record<'stakeRemoved(uint64,uint64,address,uint64,bool)void' | 'stakeRemoved', {
      argsObj: {
        validatorID: bigint | number
        /**
         * 1-index based index into list of pools for this validator
         */
        poolID: bigint | number
        staker: string
        amountRemoved: bigint | number
        stakerRemoved: boolean
      }
      argsTuple: [validatorID: bigint | number, poolID: bigint | number, staker: string, amountRemoved: bigint | number, stakerRemoved: boolean]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'numV'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type ValidatorRegistrySig = keyof ValidatorRegistry['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends ValidatorRegistrySig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the ValidatorRegistry smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends ValidatorRegistrySig> = ValidatorRegistry['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ValidatorRegistry smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ValidatorRegistrySig> = ValidatorRegistry['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type ValidatorRegistryCreateCalls = (typeof ValidatorRegistryCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type ValidatorRegistryCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type ValidatorRegistryDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: ValidatorRegistryCreateCalls) => ValidatorRegistryCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class ValidatorRegistryCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the ValidatorRegistry smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the getNumValidators()uint64 ABI method
   *
   * Returns the current number of validators
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getNumValidators(args: MethodArgs<'getNumValidators()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getNumValidators()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getValidatorInfo(uint64)(uint64,address,address,uint64,(uint16,uint32,address,uint8,uint16),(uint16,uint64,uint64),(uint16,byte[32])[3],(uint16,uint64,uint16,uint64)[12]) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getValidatorInfo(args: MethodArgs<'getValidatorInfo(uint64)(uint64,address,address,uint64,(uint16,uint32,address,uint8,uint16),(uint16,uint64,uint64),(uint16,byte[32])[3],(uint16,uint64,uint16,uint64)[12])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getValidatorInfo(uint64)(uint64,address,address,uint64,(uint16,uint32,address,uint8,uint16),(uint16,uint64,uint64),(uint16,byte[32])[3],(uint16,uint64,uint16,uint64)[12])' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorID],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getValidatorConfig(uint64)(uint16,uint32,address,uint8,uint16) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getValidatorConfig(args: MethodArgs<'getValidatorConfig(uint64)(uint16,uint32,address,uint8,uint16)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getValidatorConfig(uint64)(uint16,uint32,address,uint8,uint16)' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorID],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addValidator(address,address,uint64,(uint16,uint32,address,uint8,uint16))uint64 ABI method
   *
   * Adds a new validator
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addValidator(args: MethodArgs<'addValidator(address,address,uint64,(uint16,uint32,address,uint8,uint16))uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addValidator(address,address,uint64,(uint16,uint32,address,uint8,uint16))uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.owner, args.manager, args.nfdAppID, args.config],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addPool(uint64)(uint64,uint16) ABI method
   *
   * Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addPool(args: MethodArgs<'addPool(uint64)(uint64,uint16)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addPool(uint64)(uint64,uint16)' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorID],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addStake(uint64,uint64)(uint64,uint16) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addStake(args: MethodArgs<'addStake(uint64,uint64)(uint64,uint16)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addStake(uint64,uint64)(uint64,uint16)' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorID, args.amountToStake],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the stakeRemoved(uint64,uint64,address,uint64,bool)void ABI method
   *
   * stakerRemoved is called by Staking Pools to inform the validator (us) that a particular amount of total stake has been removedfrom the specified pool.  This is used to update the stats we have in our PoolInfo storage.The calling App ID is validated against our pool list as well.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static stakeRemoved(args: MethodArgs<'stakeRemoved(uint64,uint64,address,uint64,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'stakeRemoved(uint64,uint64,address,uint64,bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorID, args.poolID, args.staker, args.amountRemoved, args.stakerRemoved],
      ...params,
    }
  }
}

/**
 * A client to make calls to the ValidatorRegistry smart contract
 */
export class ValidatorRegistryClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `ValidatorRegistryClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof ValidatorRegistry['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the ValidatorRegistry smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: ValidatorRegistryDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(ValidatorRegistryCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the ValidatorRegistry smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(ValidatorRegistryCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the ValidatorRegistry smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the getNumValidators()uint64 ABI method.
   *
   * Returns the current number of validators
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getNumValidators(args: MethodArgs<'getNumValidators()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.getNumValidators(args, params))
  }

  /**
   * Calls the getValidatorInfo(uint64)(uint64,address,address,uint64,(uint16,uint32,address,uint8,uint16),(uint16,uint64,uint64),(uint16,byte[32])[3],(uint16,uint64,uint16,uint64)[12]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getValidatorInfo(args: MethodArgs<'getValidatorInfo(uint64)(uint64,address,address,uint64,(uint16,uint32,address,uint8,uint16),(uint16,uint64,uint64),(uint16,byte[32])[3],(uint16,uint64,uint16,uint64)[12])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.getValidatorInfo(args, params))
  }

  /**
   * Calls the getValidatorConfig(uint64)(uint16,uint32,address,uint8,uint16) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getValidatorConfig(args: MethodArgs<'getValidatorConfig(uint64)(uint16,uint32,address,uint8,uint16)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.getValidatorConfig(args, params))
  }

  /**
   * Calls the addValidator(address,address,uint64,(uint16,uint32,address,uint8,uint16))uint64 ABI method.
   *
   * Adds a new validator
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addValidator(args: MethodArgs<'addValidator(address,address,uint64,(uint16,uint32,address,uint8,uint16))uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.addValidator(args, params))
  }

  /**
   * Calls the addPool(uint64)(uint64,uint16) ABI method.
   *
   * Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addPool(args: MethodArgs<'addPool(uint64)(uint64,uint16)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.addPool(args, params))
  }

  /**
   * Calls the addStake(uint64,uint64)(uint64,uint16) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addStake(args: MethodArgs<'addStake(uint64,uint64)(uint64,uint16)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.addStake(args, params))
  }

  /**
   * Calls the stakeRemoved(uint64,uint64,address,uint64,bool)void ABI method.
   *
   * stakerRemoved is called by Staking Pools to inform the validator (us) that a particular amount of total stake has been removedfrom the specified pool.  This is used to update the stats we have in our PoolInfo storage.The calling App ID is validated against our pool list as well.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public stakeRemoved(args: MethodArgs<'stakeRemoved(uint64,uint64,address,uint64,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.stakeRemoved(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<ValidatorRegistry['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get numV() {
        return ValidatorRegistryClient.getIntegerState(state, 'numV')
      },
    }
  }

  public compose(): ValidatorRegistryComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      getNumValidators(args: MethodArgs<'getNumValidators()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getNumValidators(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getValidatorInfo(args: MethodArgs<'getValidatorInfo(uint64)(uint64,address,address,uint64,(uint16,uint32,address,uint8,uint16),(uint16,uint64,uint64),(uint16,byte[32])[3],(uint16,uint64,uint16,uint64)[12])'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getValidatorInfo(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getValidatorConfig(args: MethodArgs<'getValidatorConfig(uint64)(uint16,uint32,address,uint8,uint16)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getValidatorConfig(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addValidator(args: MethodArgs<'addValidator(address,address,uint64,(uint16,uint32,address,uint8,uint16))uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addValidator(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addPool(args: MethodArgs<'addPool(uint64)(uint64,uint16)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addPool(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addStake(args: MethodArgs<'addStake(uint64,uint64)(uint64,uint16)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addStake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      stakeRemoved(args: MethodArgs<'stakeRemoved(uint64,uint64,address,uint64,bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.stakeRemoved(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as ValidatorRegistryComposer
  }
}
export type ValidatorRegistryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the getNumValidators()uint64 ABI method.
   *
   * Returns the current number of validators
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getNumValidators(args: MethodArgs<'getNumValidators()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getNumValidators()uint64'>]>

  /**
   * Calls the getValidatorInfo(uint64)(uint64,address,address,uint64,(uint16,uint32,address,uint8,uint16),(uint16,uint64,uint64),(uint16,byte[32])[3],(uint16,uint64,uint16,uint64)[12]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getValidatorInfo(args: MethodArgs<'getValidatorInfo(uint64)(uint64,address,address,uint64,(uint16,uint32,address,uint8,uint16),(uint16,uint64,uint64),(uint16,byte[32])[3],(uint16,uint64,uint16,uint64)[12])'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getValidatorInfo(uint64)(uint64,address,address,uint64,(uint16,uint32,address,uint8,uint16),(uint16,uint64,uint64),(uint16,byte[32])[3],(uint16,uint64,uint16,uint64)[12])'>]>

  /**
   * Calls the getValidatorConfig(uint64)(uint16,uint32,address,uint8,uint16) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getValidatorConfig(args: MethodArgs<'getValidatorConfig(uint64)(uint16,uint32,address,uint8,uint16)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getValidatorConfig(uint64)(uint16,uint32,address,uint8,uint16)'>]>

  /**
   * Calls the addValidator(address,address,uint64,(uint16,uint32,address,uint8,uint16))uint64 ABI method.
   *
   * Adds a new validator
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addValidator(args: MethodArgs<'addValidator(address,address,uint64,(uint16,uint32,address,uint8,uint16))uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'addValidator(address,address,uint64,(uint16,uint32,address,uint8,uint16))uint64'>]>

  /**
   * Calls the addPool(uint64)(uint64,uint16) ABI method.
   *
   * Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addPool(args: MethodArgs<'addPool(uint64)(uint64,uint16)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'addPool(uint64)(uint64,uint16)'>]>

  /**
   * Calls the addStake(uint64,uint64)(uint64,uint16) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addStake(args: MethodArgs<'addStake(uint64,uint64)(uint64,uint16)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'addStake(uint64,uint64)(uint64,uint16)'>]>

  /**
   * Calls the stakeRemoved(uint64,uint64,address,uint64,bool)void ABI method.
   *
   * stakerRemoved is called by Staking Pools to inform the validator (us) that a particular amount of total stake has been removedfrom the specified pool.  This is used to update the stats we have in our PoolInfo storage.The calling App ID is validated against our pool list as well.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stakeRemoved(args: MethodArgs<'stakeRemoved(uint64,uint64,address,uint64,bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'stakeRemoved(uint64,uint64,address,uint64,bool)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the ValidatorRegistry smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): ValidatorRegistryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<ValidatorRegistryComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<ValidatorRegistryComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type ValidatorRegistryComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type ValidatorRegistryComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
