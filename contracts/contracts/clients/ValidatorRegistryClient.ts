/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "gas()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getMbrAmounts()(uint64,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getNumValidators()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getValidatorState(uint64)(uint16,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getValidatorOwnerAndManager(uint64)(address,address)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getPools(uint64)(uint64,uint16,uint64)[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getPoolAppId(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getCurMaxStakePerPool(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "doesStakerNeedToPayMBR(address)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getTokenPayoutRatio(uint64)(uint64[24],uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getNodePoolAssignments(uint64)((uint64[3])[8])": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getNFDRegistryID()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addValidator(pay,string,(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeValidatorManager(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeValidatorSunsetInfo(uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeValidatorNFD(uint64,uint64,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeValidatorCommissionAddress(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeValidatorRewardInfo(uint64,uint8,byte[32],uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addPool(pay,uint64,uint64)(uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addStake(pay,uint64,uint64)(uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setTokenPayoutRatio(uint64)(uint64[24],uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "movePoolToNode(uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "numValidators": {
          "type": "uint64",
          "key": "numV"
        },
        "stakingPoolTemplateAppId": {
          "type": "uint64",
          "key": "poolTemplateAppId"
        },
        "numStakers": {
          "type": "uint64",
          "key": "numStakers"
        },
        "totalAlgoStaked": {
          "type": "uint64",
          "key": "staked"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "ValidatorRegistry",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "poolTemplateAppId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "gas",
        "desc": "gas is a dummy no-op call that can be used to pool-up resource references and opcode cost",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getMbrAmounts",
        "desc": "Returns the MBR amounts needed for various actions:[addValidatorMbr: uint64 - mbr needed to add a new validator - paid to validator contractaddPoolMbr: uint64 - mbr needed to add a new pool - paid to validatorpoolInitMbr: uint64 - mbr needed to initStorage() of pool - paid to pool itselfaddStakerMbr: uint64 - mbr staker needs to add to first staking payment (stays w/ validator)]",
        "args": [],
        "returns": {
          "type": "(uint64,uint64,uint64,uint64)"
        }
      },
      {
        "name": "getProtocolConstraints",
        "desc": "Returns the protocol constraints so that UIs can limit what users specify for validator configuration parameters.",
        "args": [],
        "returns": {
          "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
        }
      },
      {
        "name": "getNumValidators",
        "desc": "Returns the current number of validators",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getValidatorConfig",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)"
        }
      },
      {
        "name": "getValidatorState",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(uint16,uint64,uint64,uint64)"
        }
      },
      {
        "name": "getValidatorOwnerAndManager",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(address,address)"
        }
      },
      {
        "name": "getPools",
        "desc": "Return list of all pools for this validator.",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "@return{PoolInfo[]}- array of poolsNot callable from other contracts because>1K return but can be called w/ simulate which bumps log returns"
          }
        ],
        "returns": {
          "type": "(uint64,uint16,uint64)[]"
        }
      },
      {
        "name": "getPoolAppId",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64"
          },
          {
            "name": "poolId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getPoolInfo",
        "args": [
          {
            "name": "poolKey",
            "type": "(uint64,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "(uint64,uint16,uint64)"
        }
      },
      {
        "name": "getCurMaxStakePerPool",
        "desc": "Calculate the maximum stake per pool for a given validator.Normally this would be maxAlgoPerPool, but it should also never go above MaxAllowedStake / numPools soas pools are added the max allowed per pool can reduce.",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "The id of the validator."
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "doesStakerNeedToPayMBR",
        "desc": "Helper callers can call w/ simulate to determine if 'AddStaker' MBR should be included w/ staking amount",
        "args": [
          {
            "name": "staker",
            "type": "address"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "getStakedPoolsForAccount",
        "desc": "Retrieves the staked pools for an account.",
        "args": [
          {
            "name": "staker",
            "type": "address",
            "desc": "The account to retrieve staked pools for.@return{ValidatorPoolKey[]}- The array of staked pools for the account."
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64)[]"
        }
      },
      {
        "name": "getTokenPayoutRatio",
        "desc": "Retrieves the token payout ratio for a given validator - returning the pool ratios of whole so that tokenpayouts across pools can be based on a stable snaphost of stake.",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "The id of the validator.@return{PoolTokenPayoutRatio}- The token payout ratio for the validator."
          }
        ],
        "returns": {
          "type": "(uint64[24],uint64)"
        }
      },
      {
        "name": "getNodePoolAssignments",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "((uint64[3])[8])"
        }
      },
      {
        "name": "getNFDRegistryID",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "addValidator",
        "desc": "Adds a new validator",
        "args": [
          {
            "name": "mbrPayment",
            "type": "pay",
            "desc": "payment from caller which covers mbr increase of new validator storage"
          },
          {
            "name": "nfdName",
            "type": "string",
            "desc": "(Optional) Name of nfd (used as double-check against id specified in config)"
          },
          {
            "name": "config",
            "type": "(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)",
            "desc": "ValidatorConfig struct"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "validator id"
        }
      },
      {
        "name": "changeValidatorManager",
        "desc": "Changes the Validator manager for a specific Validator id.[ ONLY OWNER CAN CHANGE ]",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "The id of the validator to change the manager for."
          },
          {
            "name": "manager",
            "type": "address",
            "desc": "The new manager address."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "changeValidatorSunsetInfo",
        "desc": "Updates the sunset information for a given validator.[ ONLY OWNER CAN CHANGE ]",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "The id of the validator to update."
          },
          {
            "name": "sunsettingOn",
            "type": "uint64",
            "desc": "The new sunset timestamp."
          },
          {
            "name": "sunsettingTo",
            "type": "uint64",
            "desc": "The new sunset to validator id."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "changeValidatorNFD",
        "desc": "Changes the NFD for a validator in the validatorList contract.[ ONLY OWNER OR MANAGER CAN CHANGE ]",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "The id of the validator to update."
          },
          {
            "name": "nfdAppID",
            "type": "uint64",
            "desc": "The application id of the NFD to assign to the validator."
          },
          {
            "name": "nfdName",
            "type": "string",
            "desc": "The name of the NFD (which must match)"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "changeValidatorCommissionAddress",
        "desc": "Change the commission address that validator rewards are sent to.[ ONLY OWNER CAN CHANGE ]",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64"
          },
          {
            "name": "commissionAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "changeValidatorRewardInfo",
        "desc": "Allow the additional rewards (gating entry, additional token rewards) information be changed at will.[ ONLY OWNER CAN CHANGE ]",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64"
          },
          {
            "name": "EntryGatingType",
            "type": "uint8"
          },
          {
            "name": "EntryGatingValue",
            "type": "byte[32]"
          },
          {
            "name": "GatingAssetMinBalance",
            "type": "uint64"
          },
          {
            "name": "RewardPerPayout",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addPool",
        "desc": "Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.The caller must pay the cost of the validators MBR increase as well as the MBR that will be needed for the pool itself.[ ONLY OWNER OR MANAGER CAN call ]",
        "args": [
          {
            "name": "mbrPayment",
            "type": "pay",
            "desc": "payment from caller which covers mbr increase of adding a new pool"
          },
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "is id of validator to pool to (must be owner or manager)"
          },
          {
            "name": "nodeNum",
            "type": "uint64",
            "desc": "is node number to add to"
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64)",
          "desc": "{ValidatorPoolKey}pool key to created pool"
        }
      },
      {
        "name": "addStake",
        "desc": "Adds stake to a validator pool.",
        "args": [
          {
            "name": "stakedAmountPayment",
            "type": "pay",
            "desc": "payment coming from staker to place into a pool"
          },
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "The id of the validator."
          },
          {
            "name": "valueToVerify",
            "type": "uint64",
            "desc": "only if validator has gating to enter - this is asset id or nfd id that corresponds to gating.Txn sender is factored in as well if that is part of gating.*"
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64)",
          "desc": "{ValidatorPoolKey}- The key of the validator pool."
        }
      },
      {
        "name": "setTokenPayoutRatio",
        "desc": "setTokenPayoutRatio is called by Staking Pool # 1 (ONLY) to ask the validator (us) to calculate the ratiosof stake in the pools for subsequent token payouts (ie: 2 pools, '100' algo total staked, 60 in pool 1, and 40in pool 2.  This is done so we have a stable snapshot of stake - taken once per epoch - only triggered bypool 1 doing payout.  pools other than 1 doing payout call pool 1 to ask it do it first.It would be 60/40% in the poolPctOfWhole values.  The token reward payouts then use these values instead oftheir 'current' stake which changes as part of the payouts themselves (and people could be changing stakeduring the epoch updates across pools)Multiple pools will call us via pool 1 (pool2->pool1->valdiator, etc.) so don't assert on pool1 calling multipletimes in same epoch.  Just return.",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "validator id (and thus pool) calling us.  Verified so that sender MUST be pool 1 of this validator."
          }
        ],
        "returns": {
          "type": "(uint64[24],uint64)",
          "desc": "PoolTokenPayoutRatio - the finished ratio data"
        }
      },
      {
        "name": "stakeUpdatedViaRewards",
        "desc": "stakeUpdatedViaRewards is called by Staking pools to inform the validator (us) that a particular amount of totalstake has been added to the specified pool.  This is used to update the stats we have in our PoolInfo storage.The calling App id is validated against our pool list as well.",
        "args": [
          {
            "name": "poolKey",
            "type": "(uint64,uint64,uint64)",
            "desc": "ValidatorPoolKey type"
          },
          {
            "name": "algoToAdd",
            "type": "uint64",
            "desc": "amount this validator's total stake increased via rewards"
          },
          {
            "name": "rewardTokenAmountReserved",
            "type": "uint64",
            "desc": "amount this validator's total stake increased via rewards (that should be"
          },
          {
            "name": "validatorCommission",
            "type": "uint64",
            "desc": "the commission amount the validator was paid, if any"
          },
          {
            "name": "saturatedBurnToFeeSink",
            "type": "uint64",
            "desc": "if the pool was in saturated state, the amount sent back to the fee sink.seen as 'accounted for/pending spent')"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "stakeRemoved",
        "desc": "stakeRemoved is called by Staking pools to inform the validator (us) that a particular amount of total stake has been removedfrom the specified pool.  This is used to update the stats we have in our PoolInfo storage.If any amount of rewardRemoved is specified, then that amount of reward is sent to the useThe calling App id is validated against our pool list as well.",
        "args": [
          {
            "name": "poolKey",
            "type": "(uint64,uint64,uint64)",
            "desc": "calling us from which stake was removed"
          },
          {
            "name": "staker",
            "type": "address"
          },
          {
            "name": "amountRemoved",
            "type": "uint64",
            "desc": "algo amount removed"
          },
          {
            "name": "rewardRemoved",
            "type": "uint64",
            "desc": "if applicable, amount of token reward removed (by pool 1 caller) or TO remove and pay out (via pool 1 from different pool caller)"
          },
          {
            "name": "stakerRemoved",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "findPoolForStaker",
        "desc": "Finds the pool for a staker based on the provided validator id, staker address, and amount to stake.First checks the stakers 'already staked list' for the validator preferring those (adding if possible) then addsto new pool if necessary.",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "The id of the validator."
          },
          {
            "name": "staker",
            "type": "address",
            "desc": "The address of the staker."
          },
          {
            "name": "amountToStake",
            "type": "uint64",
            "desc": "The amount to stake."
          }
        ],
        "returns": {
          "type": "((uint64,uint64,uint64),bool,bool)",
          "desc": "{ValidatorPoolKey, boolean, boolean}- The pool for the staker, true/false on whether the staker is 'new'to this VALIDATOR, and true/false if staker is new to the protocol."
        }
      },
      {
        "name": "movePoolToNode",
        "desc": "Find the specified pool (in any node number) and move it to the specified node.The pool account is forced offline if moved so prior node will still run for 320 rounds butnew key goes online on new node soon after (320 rounds after it goes online)No-op if success, asserts if not found or can't move  (no space in target)[ ONLY OWNER OR MANAGER CAN CHANGE ]Only callable by owner or manager",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64"
          },
          {
            "name": "poolAppId",
            "type": "uint64"
          },
          {
            "name": "nodeNum",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the ValidatorRegistry smart contract.
 */
export type ValidatorRegistry = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64)void' | 'createApplication', {
      argsObj: {
        poolTemplateAppId: bigint | number
      }
      argsTuple: [poolTemplateAppId: bigint | number]
      returns: void
    }>
    & Record<'gas()void' | 'gas', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'getMbrAmounts()(uint64,uint64,uint64,uint64)' | 'getMbrAmounts', {
      argsObj: {
      }
      argsTuple: []
      returns: [bigint, bigint, bigint, bigint]
    }>
    & Record<'getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' | 'getProtocolConstraints', {
      argsObj: {
      }
      argsTuple: []
      returns: [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint]
    }>
    & Record<'getNumValidators()uint64' | 'getNumValidators', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)' | 'getValidatorConfig', {
      argsObj: {
        validatorId: bigint | number
      }
      argsTuple: [validatorId: bigint | number]
      returns: [bigint, string, string, bigint, number, Uint8Array, bigint, bigint, bigint, number, number, string, bigint, bigint, number, bigint, bigint]
    }>
    & Record<'getValidatorState(uint64)(uint16,uint64,uint64,uint64)' | 'getValidatorState', {
      argsObj: {
        validatorId: bigint | number
      }
      argsTuple: [validatorId: bigint | number]
      returns: [number, bigint, bigint, bigint]
    }>
    & Record<'getValidatorOwnerAndManager(uint64)(address,address)' | 'getValidatorOwnerAndManager', {
      argsObj: {
        validatorId: bigint | number
      }
      argsTuple: [validatorId: bigint | number]
      returns: [string, string]
    }>
    & Record<'getPools(uint64)(uint64,uint16,uint64)[]' | 'getPools', {
      argsObj: {
        /**
         * @return{PoolInfo[]}- array of poolsNot callable from other contracts because>1K return but can be called w/ simulate which bumps log returns
         */
        validatorId: bigint | number
      }
      argsTuple: [validatorId: bigint | number]
      returns: [bigint, number, bigint][]
    }>
    & Record<'getPoolAppId(uint64,uint64)uint64' | 'getPoolAppId', {
      argsObj: {
        validatorId: bigint | number
        poolId: bigint | number
      }
      argsTuple: [validatorId: bigint | number, poolId: bigint | number]
      returns: bigint
    }>
    & Record<'getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)' | 'getPoolInfo', {
      argsObj: {
        poolKey: [bigint | number, bigint | number, bigint | number]
      }
      argsTuple: [poolKey: [bigint | number, bigint | number, bigint | number]]
      returns: [bigint, number, bigint]
    }>
    & Record<'getCurMaxStakePerPool(uint64)uint64' | 'getCurMaxStakePerPool', {
      argsObj: {
        /**
         * The id of the validator.
         */
        validatorId: bigint | number
      }
      argsTuple: [validatorId: bigint | number]
      returns: bigint
    }>
    & Record<'doesStakerNeedToPayMBR(address)bool' | 'doesStakerNeedToPayMBR', {
      argsObj: {
        staker: string
      }
      argsTuple: [staker: string]
      returns: boolean
    }>
    & Record<'getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]' | 'getStakedPoolsForAccount', {
      argsObj: {
        /**
         * The account to retrieve staked pools for.@return{ValidatorPoolKey[]}- The array of staked pools for the account.
         */
        staker: string
      }
      argsTuple: [staker: string]
      returns: [bigint, bigint, bigint][]
    }>
    & Record<'getTokenPayoutRatio(uint64)(uint64[24],uint64)' | 'getTokenPayoutRatio', {
      argsObj: {
        /**
         * The id of the validator.@return{PoolTokenPayoutRatio}- The token payout ratio for the validator.
         */
        validatorId: bigint | number
      }
      argsTuple: [validatorId: bigint | number]
      returns: [[bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint], bigint]
    }>
    & Record<'getNodePoolAssignments(uint64)((uint64[3])[8])' | 'getNodePoolAssignments', {
      argsObj: {
        validatorId: bigint | number
      }
      argsTuple: [validatorId: bigint | number]
      returns: [[[[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]]]]
    }>
    & Record<'getNFDRegistryID()uint64' | 'getNFDRegistryID', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'addValidator(pay,string,(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64' | 'addValidator', {
      argsObj: {
        /**
         * payment from caller which covers mbr increase of new validator storage
         */
        mbrPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * (Optional) Name of nfd (used as double-check against id specified in config)
         */
        nfdName: string
        /**
         * ValidatorConfig struct
         */
        config: [bigint | number, string, string, bigint | number, number, Uint8Array, bigint | number, bigint | number, bigint | number, number, number, string, bigint | number, bigint | number, number, bigint | number, bigint | number]
      }
      argsTuple: [mbrPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>, nfdName: string, config: [bigint | number, string, string, bigint | number, number, Uint8Array, bigint | number, bigint | number, bigint | number, number, number, string, bigint | number, bigint | number, number, bigint | number, bigint | number]]
      /**
       * validator id
       */
      returns: bigint
    }>
    & Record<'changeValidatorManager(uint64,address)void' | 'changeValidatorManager', {
      argsObj: {
        /**
         * The id of the validator to change the manager for.
         */
        validatorId: bigint | number
        /**
         * The new manager address.
         */
        manager: string
      }
      argsTuple: [validatorId: bigint | number, manager: string]
      returns: void
    }>
    & Record<'changeValidatorSunsetInfo(uint64,uint64,uint64)void' | 'changeValidatorSunsetInfo', {
      argsObj: {
        /**
         * The id of the validator to update.
         */
        validatorId: bigint | number
        /**
         * The new sunset timestamp.
         */
        sunsettingOn: bigint | number
        /**
         * The new sunset to validator id.
         */
        sunsettingTo: bigint | number
      }
      argsTuple: [validatorId: bigint | number, sunsettingOn: bigint | number, sunsettingTo: bigint | number]
      returns: void
    }>
    & Record<'changeValidatorNFD(uint64,uint64,string)void' | 'changeValidatorNFD', {
      argsObj: {
        /**
         * The id of the validator to update.
         */
        validatorId: bigint | number
        /**
         * The application id of the NFD to assign to the validator.
         */
        nfdAppId: bigint | number
        /**
         * The name of the NFD (which must match)
         */
        nfdName: string
      }
      argsTuple: [validatorId: bigint | number, nfdAppId: bigint | number, nfdName: string]
      returns: void
    }>
    & Record<'changeValidatorCommissionAddress(uint64,address)void' | 'changeValidatorCommissionAddress', {
      argsObj: {
        validatorId: bigint | number
        commissionAddress: string
      }
      argsTuple: [validatorId: bigint | number, commissionAddress: string]
      returns: void
    }>
    & Record<'changeValidatorRewardInfo(uint64,uint8,byte[32],uint64,uint64)void' | 'changeValidatorRewardInfo', {
      argsObj: {
        validatorId: bigint | number
        entryGatingType: number
        entryGatingValue: Uint8Array
        gatingAssetMinBalance: bigint | number
        rewardPerPayout: bigint | number
      }
      argsTuple: [validatorId: bigint | number, entryGatingType: number, entryGatingValue: Uint8Array, gatingAssetMinBalance: bigint | number, rewardPerPayout: bigint | number]
      returns: void
    }>
    & Record<'addPool(pay,uint64,uint64)(uint64,uint64,uint64)' | 'addPool', {
      argsObj: {
        /**
         * payment from caller which covers mbr increase of adding a new pool
         */
        mbrPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * is id of validator to pool to (must be owner or manager)
         */
        validatorId: bigint | number
        /**
         * is node number to add to
         */
        nodeNum: bigint | number
      }
      argsTuple: [mbrPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>, validatorId: bigint | number, nodeNum: bigint | number]
      /**
       * {ValidatorPoolKey}pool key to created pool
       */
      returns: [bigint, bigint, bigint]
    }>
    & Record<'addStake(pay,uint64,uint64)(uint64,uint64,uint64)' | 'addStake', {
      argsObj: {
        /**
         * payment coming from staker to place into a pool
         */
        stakedAmountPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * The id of the validator.
         */
        validatorId: bigint | number
        /**
         * only if validator has gating to enter - this is asset id or nfd id that corresponds to gating.Txn sender is factored in as well if that is part of gating.*
         */
        valueToVerify: bigint | number
      }
      argsTuple: [stakedAmountPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>, validatorId: bigint | number, valueToVerify: bigint | number]
      /**
       * {ValidatorPoolKey}- The key of the validator pool.
       */
      returns: [bigint, bigint, bigint]
    }>
    & Record<'setTokenPayoutRatio(uint64)(uint64[24],uint64)' | 'setTokenPayoutRatio', {
      argsObj: {
        /**
         * validator id (and thus pool) calling us.  Verified so that sender MUST be pool 1 of this validator.
         */
        validatorId: bigint | number
      }
      argsTuple: [validatorId: bigint | number]
      /**
       * PoolTokenPayoutRatio - the finished ratio data
       */
      returns: [[bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint], bigint]
    }>
    & Record<'stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void' | 'stakeUpdatedViaRewards', {
      argsObj: {
        /**
         * ValidatorPoolKey type
         */
        poolKey: [bigint | number, bigint | number, bigint | number]
        /**
         * amount this validator's total stake increased via rewards
         */
        algoToAdd: bigint | number
        /**
         * amount this validator's total stake increased via rewards (that should be
         */
        rewardTokenAmountReserved: bigint | number
        /**
         * the commission amount the validator was paid, if any
         */
        validatorCommission: bigint | number
        /**
         * if the pool was in saturated state, the amount sent back to the fee sink.seen as 'accounted for/pending spent')
         */
        saturatedBurnToFeeSink: bigint | number
      }
      argsTuple: [poolKey: [bigint | number, bigint | number, bigint | number], algoToAdd: bigint | number, rewardTokenAmountReserved: bigint | number, validatorCommission: bigint | number, saturatedBurnToFeeSink: bigint | number]
      returns: void
    }>
    & Record<'stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void' | 'stakeRemoved', {
      argsObj: {
        /**
         * calling us from which stake was removed
         */
        poolKey: [bigint | number, bigint | number, bigint | number]
        staker: string
        /**
         * algo amount removed
         */
        amountRemoved: bigint | number
        /**
         * if applicable, amount of token reward removed (by pool 1 caller) or TO remove and pay out (via pool 1 from different pool caller)
         */
        rewardRemoved: bigint | number
        stakerRemoved: boolean
      }
      argsTuple: [poolKey: [bigint | number, bigint | number, bigint | number], staker: string, amountRemoved: bigint | number, rewardRemoved: bigint | number, stakerRemoved: boolean]
      returns: void
    }>
    & Record<'findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)' | 'findPoolForStaker', {
      argsObj: {
        /**
         * The id of the validator.
         */
        validatorId: bigint | number
        /**
         * The address of the staker.
         */
        staker: string
        /**
         * The amount to stake.
         */
        amountToStake: bigint | number
      }
      argsTuple: [validatorId: bigint | number, staker: string, amountToStake: bigint | number]
      /**
       * {ValidatorPoolKey, boolean, boolean}- The pool for the staker, true/false on whether the staker is 'new'to this VALIDATOR, and true/false if staker is new to the protocol.
       */
      returns: [[bigint, bigint, bigint], boolean, boolean]
    }>
    & Record<'movePoolToNode(uint64,uint64,uint64)void' | 'movePoolToNode', {
      argsObj: {
        validatorId: bigint | number
        poolAppId: bigint | number
        nodeNum: bigint | number
      }
      argsTuple: [validatorId: bigint | number, poolAppId: bigint | number, nodeNum: bigint | number]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      numV?: IntegerState
      poolTemplateAppId?: IntegerState
      numStakers?: IntegerState
      staked?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type ValidatorRegistrySig = keyof ValidatorRegistry['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends ValidatorRegistrySig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the ValidatorRegistry smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends ValidatorRegistrySig> = ValidatorRegistry['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ValidatorRegistry smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ValidatorRegistrySig> = ValidatorRegistry['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type ValidatorRegistryCreateCalls = (typeof ValidatorRegistryCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type ValidatorRegistryCreateCallParams =
  | (TypedCallParams<'createApplication(uint64)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type ValidatorRegistryDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: ValidatorRegistryCreateCalls) => ValidatorRegistryCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class ValidatorRegistryCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the ValidatorRegistry smart contract using the createApplication(uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.poolTemplateAppId],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the gas()void ABI method
   *
   * gas is a dummy no-op call that can be used to pool-up resource references and opcode cost
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static gas(args: MethodArgs<'gas()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'gas()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getMbrAmounts()(uint64,uint64,uint64,uint64) ABI method
   *
   * Returns the MBR amounts needed for various actions:[addValidatorMbr: uint64 - mbr needed to add a new validator - paid to validator contractaddPoolMbr: uint64 - mbr needed to add a new pool - paid to validatorpoolInitMbr: uint64 - mbr needed to initStorage() of pool - paid to pool itselfaddStakerMbr: uint64 - mbr staker needs to add to first staking payment (stays w/ validator)]
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getMbrAmounts(args: MethodArgs<'getMbrAmounts()(uint64,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getMbrAmounts()(uint64,uint64,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * Returns the protocol constraints so that UIs can limit what users specify for validator configuration parameters.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getProtocolConstraints(args: MethodArgs<'getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getNumValidators()uint64 ABI method
   *
   * Returns the current number of validators
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getNumValidators(args: MethodArgs<'getNumValidators()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getNumValidators()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getValidatorConfig(args: MethodArgs<'getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getValidatorState(uint64)(uint16,uint64,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getValidatorState(args: MethodArgs<'getValidatorState(uint64)(uint16,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getValidatorState(uint64)(uint16,uint64,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getValidatorOwnerAndManager(uint64)(address,address) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getValidatorOwnerAndManager(args: MethodArgs<'getValidatorOwnerAndManager(uint64)(address,address)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getValidatorOwnerAndManager(uint64)(address,address)' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getPools(uint64)(uint64,uint16,uint64)[] ABI method
   *
   * Return list of all pools for this validator.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getPools(args: MethodArgs<'getPools(uint64)(uint64,uint16,uint64)[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getPools(uint64)(uint64,uint16,uint64)[]' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getPoolAppId(uint64,uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getPoolAppId(args: MethodArgs<'getPoolAppId(uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getPoolAppId(uint64,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorId, args.poolId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getPoolInfo(args: MethodArgs<'getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.poolKey],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getCurMaxStakePerPool(uint64)uint64 ABI method
   *
   * Calculate the maximum stake per pool for a given validator.Normally this would be maxAlgoPerPool, but it should also never go above MaxAllowedStake / numPools soas pools are added the max allowed per pool can reduce.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getCurMaxStakePerPool(args: MethodArgs<'getCurMaxStakePerPool(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getCurMaxStakePerPool(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the doesStakerNeedToPayMBR(address)bool ABI method
   *
   * Helper callers can call w/ simulate to determine if 'AddStaker' MBR should be included w/ staking amount
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static doesStakerNeedToPayMbr(args: MethodArgs<'doesStakerNeedToPayMBR(address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'doesStakerNeedToPayMBR(address)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.staker],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getStakedPoolsForAccount(address)(uint64,uint64,uint64)[] ABI method
   *
   * Retrieves the staked pools for an account.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getStakedPoolsForAccount(args: MethodArgs<'getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]' as const,
      methodArgs: Array.isArray(args) ? args : [args.staker],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getTokenPayoutRatio(uint64)(uint64[24],uint64) ABI method
   *
   * Retrieves the token payout ratio for a given validator - returning the pool ratios of whole so that tokenpayouts across pools can be based on a stable snaphost of stake.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getTokenPayoutRatio(args: MethodArgs<'getTokenPayoutRatio(uint64)(uint64[24],uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getTokenPayoutRatio(uint64)(uint64[24],uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getNodePoolAssignments(uint64)((uint64[3])[8]) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getNodePoolAssignments(args: MethodArgs<'getNodePoolAssignments(uint64)((uint64[3])[8])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getNodePoolAssignments(uint64)((uint64[3])[8])' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getNFDRegistryID()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getNfdRegistryId(args: MethodArgs<'getNFDRegistryID()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getNFDRegistryID()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addValidator(pay,string,(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64 ABI method
   *
   * Adds a new validator
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addValidator(args: MethodArgs<'addValidator(pay,string,(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addValidator(pay,string,(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbrPayment, args.nfdName, args.config],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the changeValidatorManager(uint64,address)void ABI method
   *
   * Changes the Validator manager for a specific Validator id.[ ONLY OWNER CAN CHANGE ]
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static changeValidatorManager(args: MethodArgs<'changeValidatorManager(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'changeValidatorManager(uint64,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorId, args.manager],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the changeValidatorSunsetInfo(uint64,uint64,uint64)void ABI method
   *
   * Updates the sunset information for a given validator.[ ONLY OWNER CAN CHANGE ]
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static changeValidatorSunsetInfo(args: MethodArgs<'changeValidatorSunsetInfo(uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'changeValidatorSunsetInfo(uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorId, args.sunsettingOn, args.sunsettingTo],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the changeValidatorNFD(uint64,uint64,string)void ABI method
   *
   * Changes the NFD for a validator in the validatorList contract.[ ONLY OWNER OR MANAGER CAN CHANGE ]
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static changeValidatorNfd(args: MethodArgs<'changeValidatorNFD(uint64,uint64,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'changeValidatorNFD(uint64,uint64,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorId, args.nfdAppId, args.nfdName],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the changeValidatorCommissionAddress(uint64,address)void ABI method
   *
   * Change the commission address that validator rewards are sent to.[ ONLY OWNER CAN CHANGE ]
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static changeValidatorCommissionAddress(args: MethodArgs<'changeValidatorCommissionAddress(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'changeValidatorCommissionAddress(uint64,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorId, args.commissionAddress],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the changeValidatorRewardInfo(uint64,uint8,byte[32],uint64,uint64)void ABI method
   *
   * Allow the additional rewards (gating entry, additional token rewards) information be changed at will.[ ONLY OWNER CAN CHANGE ]
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static changeValidatorRewardInfo(args: MethodArgs<'changeValidatorRewardInfo(uint64,uint8,byte[32],uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'changeValidatorRewardInfo(uint64,uint8,byte[32],uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorId, args.entryGatingType, args.entryGatingValue, args.gatingAssetMinBalance, args.rewardPerPayout],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addPool(pay,uint64,uint64)(uint64,uint64,uint64) ABI method
   *
   * Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.The caller must pay the cost of the validators MBR increase as well as the MBR that will be needed for the pool itself.[ ONLY OWNER OR MANAGER CAN call ]
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addPool(args: MethodArgs<'addPool(pay,uint64,uint64)(uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addPool(pay,uint64,uint64)(uint64,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbrPayment, args.validatorId, args.nodeNum],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addStake(pay,uint64,uint64)(uint64,uint64,uint64) ABI method
   *
   * Adds stake to a validator pool.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addStake(args: MethodArgs<'addStake(pay,uint64,uint64)(uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addStake(pay,uint64,uint64)(uint64,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.stakedAmountPayment, args.validatorId, args.valueToVerify],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setTokenPayoutRatio(uint64)(uint64[24],uint64) ABI method
   *
   * setTokenPayoutRatio is called by Staking Pool # 1 (ONLY) to ask the validator (us) to calculate the ratiosof stake in the pools for subsequent token payouts (ie: 2 pools, '100' algo total staked, 60 in pool 1, and 40in pool 2.  This is done so we have a stable snapshot of stake - taken once per epoch - only triggered bypool 1 doing payout.  pools other than 1 doing payout call pool 1 to ask it do it first.It would be 60/40% in the poolPctOfWhole values.  The token reward payouts then use these values instead oftheir 'current' stake which changes as part of the payouts themselves (and people could be changing stakeduring the epoch updates across pools)Multiple pools will call us via pool 1 (pool2->pool1->valdiator, etc.) so don't assert on pool1 calling multipletimes in same epoch.  Just return.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setTokenPayoutRatio(args: MethodArgs<'setTokenPayoutRatio(uint64)(uint64[24],uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setTokenPayoutRatio(uint64)(uint64[24],uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void ABI method
   *
   * stakeUpdatedViaRewards is called by Staking pools to inform the validator (us) that a particular amount of totalstake has been added to the specified pool.  This is used to update the stats we have in our PoolInfo storage.The calling App id is validated against our pool list as well.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static stakeUpdatedViaRewards(args: MethodArgs<'stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.poolKey, args.algoToAdd, args.rewardTokenAmountReserved, args.validatorCommission, args.saturatedBurnToFeeSink],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void ABI method
   *
   * stakeRemoved is called by Staking pools to inform the validator (us) that a particular amount of total stake has been removedfrom the specified pool.  This is used to update the stats we have in our PoolInfo storage.If any amount of rewardRemoved is specified, then that amount of reward is sent to the useThe calling App id is validated against our pool list as well.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static stakeRemoved(args: MethodArgs<'stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.poolKey, args.staker, args.amountRemoved, args.rewardRemoved, args.stakerRemoved],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool) ABI method
   *
   * Finds the pool for a staker based on the provided validator id, staker address, and amount to stake.First checks the stakers 'already staked list' for the validator preferring those (adding if possible) then addsto new pool if necessary.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static findPoolForStaker(args: MethodArgs<'findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorId, args.staker, args.amountToStake],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the movePoolToNode(uint64,uint64,uint64)void ABI method
   *
   * Find the specified pool (in any node number) and move it to the specified node.The pool account is forced offline if moved so prior node will still run for 320 rounds butnew key goes online on new node soon after (320 rounds after it goes online)No-op if success, asserts if not found or can't move  (no space in target)[ ONLY OWNER OR MANAGER CAN CHANGE ]Only callable by owner or manager
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static movePoolToNode(args: MethodArgs<'movePoolToNode(uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'movePoolToNode(uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorId, args.poolAppId, args.nodeNum],
      ...params,
    }
  }
}

/**
 * A client to make calls to the ValidatorRegistry smart contract
 */
export class ValidatorRegistryClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `ValidatorRegistryClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof ValidatorRegistry['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the ValidatorRegistry smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: ValidatorRegistryDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(ValidatorRegistryCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the ValidatorRegistry smart contract using the createApplication(uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(uint64)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(ValidatorRegistryCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the ValidatorRegistry smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the gas()void ABI method.
   *
   * gas is a dummy no-op call that can be used to pool-up resource references and opcode cost
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public gas(args: MethodArgs<'gas()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.gas(args, params))
  }

  /**
   * Calls the getMbrAmounts()(uint64,uint64,uint64,uint64) ABI method.
   *
   * Returns the MBR amounts needed for various actions:[addValidatorMbr: uint64 - mbr needed to add a new validator - paid to validator contractaddPoolMbr: uint64 - mbr needed to add a new pool - paid to validatorpoolInitMbr: uint64 - mbr needed to initStorage() of pool - paid to pool itselfaddStakerMbr: uint64 - mbr staker needs to add to first staking payment (stays w/ validator)]
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getMbrAmounts(args: MethodArgs<'getMbrAmounts()(uint64,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.getMbrAmounts(args, params))
  }

  /**
   * Calls the getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Returns the protocol constraints so that UIs can limit what users specify for validator configuration parameters.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getProtocolConstraints(args: MethodArgs<'getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.getProtocolConstraints(args, params))
  }

  /**
   * Calls the getNumValidators()uint64 ABI method.
   *
   * Returns the current number of validators
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getNumValidators(args: MethodArgs<'getNumValidators()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.getNumValidators(args, params))
  }

  /**
   * Calls the getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getValidatorConfig(args: MethodArgs<'getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.getValidatorConfig(args, params))
  }

  /**
   * Calls the getValidatorState(uint64)(uint16,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getValidatorState(args: MethodArgs<'getValidatorState(uint64)(uint16,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.getValidatorState(args, params))
  }

  /**
   * Calls the getValidatorOwnerAndManager(uint64)(address,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getValidatorOwnerAndManager(args: MethodArgs<'getValidatorOwnerAndManager(uint64)(address,address)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.getValidatorOwnerAndManager(args, params))
  }

  /**
   * Calls the getPools(uint64)(uint64,uint16,uint64)[] ABI method.
   *
   * Return list of all pools for this validator.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getPools(args: MethodArgs<'getPools(uint64)(uint64,uint16,uint64)[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.getPools(args, params))
  }

  /**
   * Calls the getPoolAppId(uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getPoolAppId(args: MethodArgs<'getPoolAppId(uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.getPoolAppId(args, params))
  }

  /**
   * Calls the getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getPoolInfo(args: MethodArgs<'getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.getPoolInfo(args, params))
  }

  /**
   * Calls the getCurMaxStakePerPool(uint64)uint64 ABI method.
   *
   * Calculate the maximum stake per pool for a given validator.Normally this would be maxAlgoPerPool, but it should also never go above MaxAllowedStake / numPools soas pools are added the max allowed per pool can reduce.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getCurMaxStakePerPool(args: MethodArgs<'getCurMaxStakePerPool(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.getCurMaxStakePerPool(args, params))
  }

  /**
   * Calls the doesStakerNeedToPayMBR(address)bool ABI method.
   *
   * Helper callers can call w/ simulate to determine if 'AddStaker' MBR should be included w/ staking amount
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public doesStakerNeedToPayMbr(args: MethodArgs<'doesStakerNeedToPayMBR(address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.doesStakerNeedToPayMbr(args, params))
  }

  /**
   * Calls the getStakedPoolsForAccount(address)(uint64,uint64,uint64)[] ABI method.
   *
   * Retrieves the staked pools for an account.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getStakedPoolsForAccount(args: MethodArgs<'getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.getStakedPoolsForAccount(args, params))
  }

  /**
   * Calls the getTokenPayoutRatio(uint64)(uint64[24],uint64) ABI method.
   *
   * Retrieves the token payout ratio for a given validator - returning the pool ratios of whole so that tokenpayouts across pools can be based on a stable snaphost of stake.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getTokenPayoutRatio(args: MethodArgs<'getTokenPayoutRatio(uint64)(uint64[24],uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.getTokenPayoutRatio(args, params))
  }

  /**
   * Calls the getNodePoolAssignments(uint64)((uint64[3])[8]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getNodePoolAssignments(args: MethodArgs<'getNodePoolAssignments(uint64)((uint64[3])[8])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.getNodePoolAssignments(args, params))
  }

  /**
   * Calls the getNFDRegistryID()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getNfdRegistryId(args: MethodArgs<'getNFDRegistryID()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.getNfdRegistryId(args, params))
  }

  /**
   * Calls the addValidator(pay,string,(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64 ABI method.
   *
   * Adds a new validator
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: validator id
   */
  public addValidator(args: MethodArgs<'addValidator(pay,string,(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.addValidator(args, params))
  }

  /**
   * Calls the changeValidatorManager(uint64,address)void ABI method.
   *
   * Changes the Validator manager for a specific Validator id.[ ONLY OWNER CAN CHANGE ]
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public changeValidatorManager(args: MethodArgs<'changeValidatorManager(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.changeValidatorManager(args, params))
  }

  /**
   * Calls the changeValidatorSunsetInfo(uint64,uint64,uint64)void ABI method.
   *
   * Updates the sunset information for a given validator.[ ONLY OWNER CAN CHANGE ]
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public changeValidatorSunsetInfo(args: MethodArgs<'changeValidatorSunsetInfo(uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.changeValidatorSunsetInfo(args, params))
  }

  /**
   * Calls the changeValidatorNFD(uint64,uint64,string)void ABI method.
   *
   * Changes the NFD for a validator in the validatorList contract.[ ONLY OWNER OR MANAGER CAN CHANGE ]
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public changeValidatorNfd(args: MethodArgs<'changeValidatorNFD(uint64,uint64,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.changeValidatorNfd(args, params))
  }

  /**
   * Calls the changeValidatorCommissionAddress(uint64,address)void ABI method.
   *
   * Change the commission address that validator rewards are sent to.[ ONLY OWNER CAN CHANGE ]
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public changeValidatorCommissionAddress(args: MethodArgs<'changeValidatorCommissionAddress(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.changeValidatorCommissionAddress(args, params))
  }

  /**
   * Calls the changeValidatorRewardInfo(uint64,uint8,byte[32],uint64,uint64)void ABI method.
   *
   * Allow the additional rewards (gating entry, additional token rewards) information be changed at will.[ ONLY OWNER CAN CHANGE ]
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public changeValidatorRewardInfo(args: MethodArgs<'changeValidatorRewardInfo(uint64,uint8,byte[32],uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.changeValidatorRewardInfo(args, params))
  }

  /**
   * Calls the addPool(pay,uint64,uint64)(uint64,uint64,uint64) ABI method.
   *
   * Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.The caller must pay the cost of the validators MBR increase as well as the MBR that will be needed for the pool itself.[ ONLY OWNER OR MANAGER CAN call ]
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: {ValidatorPoolKey}pool key to created pool
   */
  public addPool(args: MethodArgs<'addPool(pay,uint64,uint64)(uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.addPool(args, params))
  }

  /**
   * Calls the addStake(pay,uint64,uint64)(uint64,uint64,uint64) ABI method.
   *
   * Adds stake to a validator pool.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: {ValidatorPoolKey}- The key of the validator pool.
   */
  public addStake(args: MethodArgs<'addStake(pay,uint64,uint64)(uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.addStake(args, params))
  }

  /**
   * Calls the setTokenPayoutRatio(uint64)(uint64[24],uint64) ABI method.
   *
   * setTokenPayoutRatio is called by Staking Pool # 1 (ONLY) to ask the validator (us) to calculate the ratiosof stake in the pools for subsequent token payouts (ie: 2 pools, '100' algo total staked, 60 in pool 1, and 40in pool 2.  This is done so we have a stable snapshot of stake - taken once per epoch - only triggered bypool 1 doing payout.  pools other than 1 doing payout call pool 1 to ask it do it first.It would be 60/40% in the poolPctOfWhole values.  The token reward payouts then use these values instead oftheir 'current' stake which changes as part of the payouts themselves (and people could be changing stakeduring the epoch updates across pools)Multiple pools will call us via pool 1 (pool2->pool1->valdiator, etc.) so don't assert on pool1 calling multipletimes in same epoch.  Just return.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: PoolTokenPayoutRatio - the finished ratio data
   */
  public setTokenPayoutRatio(args: MethodArgs<'setTokenPayoutRatio(uint64)(uint64[24],uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.setTokenPayoutRatio(args, params))
  }

  /**
   * Calls the stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void ABI method.
   *
   * stakeUpdatedViaRewards is called by Staking pools to inform the validator (us) that a particular amount of totalstake has been added to the specified pool.  This is used to update the stats we have in our PoolInfo storage.The calling App id is validated against our pool list as well.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public stakeUpdatedViaRewards(args: MethodArgs<'stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.stakeUpdatedViaRewards(args, params))
  }

  /**
   * Calls the stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void ABI method.
   *
   * stakeRemoved is called by Staking pools to inform the validator (us) that a particular amount of total stake has been removedfrom the specified pool.  This is used to update the stats we have in our PoolInfo storage.If any amount of rewardRemoved is specified, then that amount of reward is sent to the useThe calling App id is validated against our pool list as well.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public stakeRemoved(args: MethodArgs<'stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.stakeRemoved(args, params))
  }

  /**
   * Calls the findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool) ABI method.
   *
   * Finds the pool for a staker based on the provided validator id, staker address, and amount to stake.First checks the stakers 'already staked list' for the validator preferring those (adding if possible) then addsto new pool if necessary.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: {ValidatorPoolKey, boolean, boolean}- The pool for the staker, true/false on whether the staker is 'new'to this VALIDATOR, and true/false if staker is new to the protocol.
   */
  public findPoolForStaker(args: MethodArgs<'findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.findPoolForStaker(args, params))
  }

  /**
   * Calls the movePoolToNode(uint64,uint64,uint64)void ABI method.
   *
   * Find the specified pool (in any node number) and move it to the specified node.The pool account is forced offline if moved so prior node will still run for 320 rounds butnew key goes online on new node soon after (320 rounds after it goes online)No-op if success, asserts if not found or can't move  (no space in target)[ ONLY OWNER OR MANAGER CAN CHANGE ]Only callable by owner or manager
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public movePoolToNode(args: MethodArgs<'movePoolToNode(uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorRegistryCallFactory.movePoolToNode(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<ValidatorRegistry['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get numV() {
        return ValidatorRegistryClient.getIntegerState(state, 'numV')
      },
      get poolTemplateAppId() {
        return ValidatorRegistryClient.getIntegerState(state, 'poolTemplateAppId')
      },
      get numStakers() {
        return ValidatorRegistryClient.getIntegerState(state, 'numStakers')
      },
      get staked() {
        return ValidatorRegistryClient.getIntegerState(state, 'staked')
      },
    }
  }

  public compose(): ValidatorRegistryComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      gas(args: MethodArgs<'gas()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.gas(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getMbrAmounts(args: MethodArgs<'getMbrAmounts()(uint64,uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getMbrAmounts(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getProtocolConstraints(args: MethodArgs<'getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getProtocolConstraints(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getNumValidators(args: MethodArgs<'getNumValidators()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getNumValidators(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getValidatorConfig(args: MethodArgs<'getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getValidatorConfig(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getValidatorState(args: MethodArgs<'getValidatorState(uint64)(uint16,uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getValidatorState(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getValidatorOwnerAndManager(args: MethodArgs<'getValidatorOwnerAndManager(uint64)(address,address)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getValidatorOwnerAndManager(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getPools(args: MethodArgs<'getPools(uint64)(uint64,uint16,uint64)[]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getPools(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getPoolAppId(args: MethodArgs<'getPoolAppId(uint64,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getPoolAppId(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getPoolInfo(args: MethodArgs<'getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getPoolInfo(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getCurMaxStakePerPool(args: MethodArgs<'getCurMaxStakePerPool(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getCurMaxStakePerPool(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      doesStakerNeedToPayMbr(args: MethodArgs<'doesStakerNeedToPayMBR(address)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.doesStakerNeedToPayMbr(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getStakedPoolsForAccount(args: MethodArgs<'getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getStakedPoolsForAccount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getTokenPayoutRatio(args: MethodArgs<'getTokenPayoutRatio(uint64)(uint64[24],uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getTokenPayoutRatio(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getNodePoolAssignments(args: MethodArgs<'getNodePoolAssignments(uint64)((uint64[3])[8])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getNodePoolAssignments(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getNfdRegistryId(args: MethodArgs<'getNFDRegistryID()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getNfdRegistryId(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addValidator(args: MethodArgs<'addValidator(pay,string,(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addValidator(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      changeValidatorManager(args: MethodArgs<'changeValidatorManager(uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.changeValidatorManager(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      changeValidatorSunsetInfo(args: MethodArgs<'changeValidatorSunsetInfo(uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.changeValidatorSunsetInfo(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      changeValidatorNfd(args: MethodArgs<'changeValidatorNFD(uint64,uint64,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.changeValidatorNfd(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      changeValidatorCommissionAddress(args: MethodArgs<'changeValidatorCommissionAddress(uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.changeValidatorCommissionAddress(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      changeValidatorRewardInfo(args: MethodArgs<'changeValidatorRewardInfo(uint64,uint8,byte[32],uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.changeValidatorRewardInfo(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addPool(args: MethodArgs<'addPool(pay,uint64,uint64)(uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addPool(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addStake(args: MethodArgs<'addStake(pay,uint64,uint64)(uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addStake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setTokenPayoutRatio(args: MethodArgs<'setTokenPayoutRatio(uint64)(uint64[24],uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setTokenPayoutRatio(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      stakeUpdatedViaRewards(args: MethodArgs<'stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.stakeUpdatedViaRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      stakeRemoved(args: MethodArgs<'stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.stakeRemoved(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      findPoolForStaker(args: MethodArgs<'findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.findPoolForStaker(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      movePoolToNode(args: MethodArgs<'movePoolToNode(uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.movePoolToNode(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as ValidatorRegistryComposer
  }
}
export type ValidatorRegistryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the gas()void ABI method.
   *
   * gas is a dummy no-op call that can be used to pool-up resource references and opcode cost
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  gas(args: MethodArgs<'gas()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'gas()void'>]>

  /**
   * Calls the getMbrAmounts()(uint64,uint64,uint64,uint64) ABI method.
   *
   * Returns the MBR amounts needed for various actions:[addValidatorMbr: uint64 - mbr needed to add a new validator - paid to validator contractaddPoolMbr: uint64 - mbr needed to add a new pool - paid to validatorpoolInitMbr: uint64 - mbr needed to initStorage() of pool - paid to pool itselfaddStakerMbr: uint64 - mbr staker needs to add to first staking payment (stays w/ validator)]
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMbrAmounts(args: MethodArgs<'getMbrAmounts()(uint64,uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getMbrAmounts()(uint64,uint64,uint64,uint64)'>]>

  /**
   * Calls the getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Returns the protocol constraints so that UIs can limit what users specify for validator configuration parameters.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProtocolConstraints(args: MethodArgs<'getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'>]>

  /**
   * Calls the getNumValidators()uint64 ABI method.
   *
   * Returns the current number of validators
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getNumValidators(args: MethodArgs<'getNumValidators()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getNumValidators()uint64'>]>

  /**
   * Calls the getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getValidatorConfig(args: MethodArgs<'getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)'>]>

  /**
   * Calls the getValidatorState(uint64)(uint16,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getValidatorState(args: MethodArgs<'getValidatorState(uint64)(uint16,uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getValidatorState(uint64)(uint16,uint64,uint64,uint64)'>]>

  /**
   * Calls the getValidatorOwnerAndManager(uint64)(address,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getValidatorOwnerAndManager(args: MethodArgs<'getValidatorOwnerAndManager(uint64)(address,address)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getValidatorOwnerAndManager(uint64)(address,address)'>]>

  /**
   * Calls the getPools(uint64)(uint64,uint16,uint64)[] ABI method.
   *
   * Return list of all pools for this validator.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPools(args: MethodArgs<'getPools(uint64)(uint64,uint16,uint64)[]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getPools(uint64)(uint64,uint16,uint64)[]'>]>

  /**
   * Calls the getPoolAppId(uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolAppId(args: MethodArgs<'getPoolAppId(uint64,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getPoolAppId(uint64,uint64)uint64'>]>

  /**
   * Calls the getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolInfo(args: MethodArgs<'getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)'>]>

  /**
   * Calls the getCurMaxStakePerPool(uint64)uint64 ABI method.
   *
   * Calculate the maximum stake per pool for a given validator.Normally this would be maxAlgoPerPool, but it should also never go above MaxAllowedStake / numPools soas pools are added the max allowed per pool can reduce.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCurMaxStakePerPool(args: MethodArgs<'getCurMaxStakePerPool(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getCurMaxStakePerPool(uint64)uint64'>]>

  /**
   * Calls the doesStakerNeedToPayMBR(address)bool ABI method.
   *
   * Helper callers can call w/ simulate to determine if 'AddStaker' MBR should be included w/ staking amount
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doesStakerNeedToPayMbr(args: MethodArgs<'doesStakerNeedToPayMBR(address)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'doesStakerNeedToPayMBR(address)bool'>]>

  /**
   * Calls the getStakedPoolsForAccount(address)(uint64,uint64,uint64)[] ABI method.
   *
   * Retrieves the staked pools for an account.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getStakedPoolsForAccount(args: MethodArgs<'getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]'>]>

  /**
   * Calls the getTokenPayoutRatio(uint64)(uint64[24],uint64) ABI method.
   *
   * Retrieves the token payout ratio for a given validator - returning the pool ratios of whole so that tokenpayouts across pools can be based on a stable snaphost of stake.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTokenPayoutRatio(args: MethodArgs<'getTokenPayoutRatio(uint64)(uint64[24],uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getTokenPayoutRatio(uint64)(uint64[24],uint64)'>]>

  /**
   * Calls the getNodePoolAssignments(uint64)((uint64[3])[8]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getNodePoolAssignments(args: MethodArgs<'getNodePoolAssignments(uint64)((uint64[3])[8])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getNodePoolAssignments(uint64)((uint64[3])[8])'>]>

  /**
   * Calls the getNFDRegistryID()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getNfdRegistryId(args: MethodArgs<'getNFDRegistryID()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getNFDRegistryID()uint64'>]>

  /**
   * Calls the addValidator(pay,string,(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64 ABI method.
   *
   * Adds a new validator
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addValidator(args: MethodArgs<'addValidator(pay,string,(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'addValidator(pay,string,(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64'>]>

  /**
   * Calls the changeValidatorManager(uint64,address)void ABI method.
   *
   * Changes the Validator manager for a specific Validator id.[ ONLY OWNER CAN CHANGE ]
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeValidatorManager(args: MethodArgs<'changeValidatorManager(uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'changeValidatorManager(uint64,address)void'>]>

  /**
   * Calls the changeValidatorSunsetInfo(uint64,uint64,uint64)void ABI method.
   *
   * Updates the sunset information for a given validator.[ ONLY OWNER CAN CHANGE ]
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeValidatorSunsetInfo(args: MethodArgs<'changeValidatorSunsetInfo(uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'changeValidatorSunsetInfo(uint64,uint64,uint64)void'>]>

  /**
   * Calls the changeValidatorNFD(uint64,uint64,string)void ABI method.
   *
   * Changes the NFD for a validator in the validatorList contract.[ ONLY OWNER OR MANAGER CAN CHANGE ]
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeValidatorNfd(args: MethodArgs<'changeValidatorNFD(uint64,uint64,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'changeValidatorNFD(uint64,uint64,string)void'>]>

  /**
   * Calls the changeValidatorCommissionAddress(uint64,address)void ABI method.
   *
   * Change the commission address that validator rewards are sent to.[ ONLY OWNER CAN CHANGE ]
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeValidatorCommissionAddress(args: MethodArgs<'changeValidatorCommissionAddress(uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'changeValidatorCommissionAddress(uint64,address)void'>]>

  /**
   * Calls the changeValidatorRewardInfo(uint64,uint8,byte[32],uint64,uint64)void ABI method.
   *
   * Allow the additional rewards (gating entry, additional token rewards) information be changed at will.[ ONLY OWNER CAN CHANGE ]
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeValidatorRewardInfo(args: MethodArgs<'changeValidatorRewardInfo(uint64,uint8,byte[32],uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'changeValidatorRewardInfo(uint64,uint8,byte[32],uint64,uint64)void'>]>

  /**
   * Calls the addPool(pay,uint64,uint64)(uint64,uint64,uint64) ABI method.
   *
   * Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.The caller must pay the cost of the validators MBR increase as well as the MBR that will be needed for the pool itself.[ ONLY OWNER OR MANAGER CAN call ]
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addPool(args: MethodArgs<'addPool(pay,uint64,uint64)(uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'addPool(pay,uint64,uint64)(uint64,uint64,uint64)'>]>

  /**
   * Calls the addStake(pay,uint64,uint64)(uint64,uint64,uint64) ABI method.
   *
   * Adds stake to a validator pool.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addStake(args: MethodArgs<'addStake(pay,uint64,uint64)(uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'addStake(pay,uint64,uint64)(uint64,uint64,uint64)'>]>

  /**
   * Calls the setTokenPayoutRatio(uint64)(uint64[24],uint64) ABI method.
   *
   * setTokenPayoutRatio is called by Staking Pool # 1 (ONLY) to ask the validator (us) to calculate the ratiosof stake in the pools for subsequent token payouts (ie: 2 pools, '100' algo total staked, 60 in pool 1, and 40in pool 2.  This is done so we have a stable snapshot of stake - taken once per epoch - only triggered bypool 1 doing payout.  pools other than 1 doing payout call pool 1 to ask it do it first.It would be 60/40% in the poolPctOfWhole values.  The token reward payouts then use these values instead oftheir 'current' stake which changes as part of the payouts themselves (and people could be changing stakeduring the epoch updates across pools)Multiple pools will call us via pool 1 (pool2->pool1->valdiator, etc.) so don't assert on pool1 calling multipletimes in same epoch.  Just return.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setTokenPayoutRatio(args: MethodArgs<'setTokenPayoutRatio(uint64)(uint64[24],uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'setTokenPayoutRatio(uint64)(uint64[24],uint64)'>]>

  /**
   * Calls the stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void ABI method.
   *
   * stakeUpdatedViaRewards is called by Staking pools to inform the validator (us) that a particular amount of totalstake has been added to the specified pool.  This is used to update the stats we have in our PoolInfo storage.The calling App id is validated against our pool list as well.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stakeUpdatedViaRewards(args: MethodArgs<'stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void'>]>

  /**
   * Calls the stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void ABI method.
   *
   * stakeRemoved is called by Staking pools to inform the validator (us) that a particular amount of total stake has been removedfrom the specified pool.  This is used to update the stats we have in our PoolInfo storage.If any amount of rewardRemoved is specified, then that amount of reward is sent to the useThe calling App id is validated against our pool list as well.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stakeRemoved(args: MethodArgs<'stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void'>]>

  /**
   * Calls the findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool) ABI method.
   *
   * Finds the pool for a staker based on the provided validator id, staker address, and amount to stake.First checks the stakers 'already staked list' for the validator preferring those (adding if possible) then addsto new pool if necessary.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  findPoolForStaker(args: MethodArgs<'findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)'>]>

  /**
   * Calls the movePoolToNode(uint64,uint64,uint64)void ABI method.
   *
   * Find the specified pool (in any node number) and move it to the specified node.The pool account is forced offline if moved so prior node will still run for 320 rounds butnew key goes online on new node soon after (320 rounds after it goes online)No-op if success, asserts if not found or can't move  (no space in target)[ ONLY OWNER OR MANAGER CAN CHANGE ]Only callable by owner or manager
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  movePoolToNode(args: MethodArgs<'movePoolToNode(uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, MethodReturn<'movePoolToNode(uint64,uint64,uint64)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the ValidatorRegistry smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorRegistryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): ValidatorRegistryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<ValidatorRegistryComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<ValidatorRegistryComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type ValidatorRegistryComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type ValidatorRegistryComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
