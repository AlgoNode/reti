{
  "hints": {
    "createApplication(uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "gas()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getMbrAmounts()(uint64,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getNumValidators()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getValidatorConfig(uint64)(uint16,uint32,address,uint64,uint64,uint8)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getValidatorState(uint64)(uint16,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getValidatorOwnerAndManager(uint64)(address,address)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getPoolAppID((uint64,uint64,uint64))uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getPoolInfo((uint64,uint64,uint64))(uint16,uint64,uint16,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getStakedPoolsForAccount(account)(uint64,uint64,uint64)[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addValidator(pay,address,address,uint64,string,(uint16,uint32,address,uint64,uint64,uint8))uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeValidatorManager(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeValidatorNFD(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeValidatorCommissionAddress(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addPool(pay,uint64)(uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addStake(pay,uint64)(uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "stakeUpdatedViaRewards((uint64,uint64,uint64),uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "stakeRemoved((uint64,uint64,uint64),address,uint64,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool)": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "numValidators": {
          "type": "uint64",
          "key": "numV"
        },
        "StakingPoolTemplateAppID": {
          "type": "uint64",
          "key": "poolTemplateAppID"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "ValidatorRegistry",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "poolTemplateAppID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "gas",
        "desc": "gas is a dummy no-op call that can be used to pool-up resource references and opcode cost",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getMbrAmounts",
        "args": [],
        "returns": {
          "type": "(uint64,uint64,uint64,uint64)"
        }
      },
      {
        "name": "getNumValidators",
        "desc": "Returns the current number of validators",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getValidatorConfig",
        "args": [
          {
            "name": "validatorID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(uint16,uint32,address,uint64,uint64,uint8)"
        }
      },
      {
        "name": "getValidatorState",
        "args": [
          {
            "name": "validatorID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(uint16,uint64,uint64)"
        }
      },
      {
        "name": "getValidatorOwnerAndManager",
        "args": [
          {
            "name": "validatorID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(address,address)"
        }
      },
      {
        "name": "getPoolAppID",
        "args": [
          {
            "name": "poolKey",
            "type": "(uint64,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getPoolInfo",
        "args": [
          {
            "name": "poolKey",
            "type": "(uint64,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "(uint16,uint64,uint16,uint64)"
        }
      },
      {
        "name": "getStakedPoolsForAccount",
        "desc": "Retrieves the staked pools for an account.",
        "args": [
          {
            "name": "staker",
            "type": "account",
            "desc": "The account to retrieve staked pools for.@return{ValidatorPoolKey[]}- The array of staked pools for the account."
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64)[]"
        }
      },
      {
        "name": "addValidator",
        "desc": "Adds a new validator",
        "args": [
          {
            "name": "mbrPayment",
            "type": "pay",
            "desc": "payment from caller which covers mbr increase of new validator storage"
          },
          {
            "name": "owner",
            "type": "address",
            "desc": "The account (presumably cold-wallet) that owns the validator set"
          },
          {
            "name": "manager",
            "type": "address",
            "desc": "The account that manages the pool part. keys and triggers payouts.  Normally a hot-wallet as node sidecar needs the keys"
          },
          {
            "name": "nfdAppID",
            "type": "uint64",
            "desc": "(Optional) NFD App ID linking to information about the validator being added - where information about the validator and their pools can be found."
          },
          {
            "name": "nfdName",
            "type": "string",
            "desc": "(Optional) Name of nfd (used as double-check against id)"
          },
          {
            "name": "config",
            "type": "(uint16,uint32,address,uint64,uint64,uint8)",
            "desc": "ValidatorConfig struct"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "validator ID"
        }
      },
      {
        "name": "changeValidatorManager",
        "args": [
          {
            "name": "validatorID",
            "type": "uint64"
          },
          {
            "name": "manager",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "changeValidatorNFD",
        "args": [
          {
            "name": "validatorID",
            "type": "uint64"
          },
          {
            "name": "nfdAppID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "changeValidatorCommissionAddress",
        "args": [
          {
            "name": "validatorID",
            "type": "uint64"
          },
          {
            "name": "commissionAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addPool",
        "desc": "Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.The caller must pay the cost of the validators MBR increase as well as the MBR that will be needed for the pool itself.",
        "args": [
          {
            "name": "mbrPayment",
            "type": "pay",
            "desc": "payment from caller which covers mbr increase of adding a new pool"
          },
          {
            "name": "validatorID",
            "type": "uint64",
            "desc": "is ID of validator to pool to (must be owner or manager)"
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64)",
          "desc": "{ValidatorPoolKey}pool key to created pool"
        }
      },
      {
        "name": "addStake",
        "desc": "Adds stake to a validator pool.",
        "args": [
          {
            "name": "stakedAmountPayment",
            "type": "pay",
            "desc": "payment coming from staker to place into a pool"
          },
          {
            "name": "validatorID",
            "type": "uint64",
            "desc": "The ID of the validator."
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64)",
          "desc": "{ValidatorPoolKey}- The key of the validator pool."
        }
      },
      {
        "name": "stakeUpdatedViaRewards",
        "desc": "stakeUpdatedViaRewards is called by Staking Pools to inform the validator (us) that a particular amount of totalstake has been added to the specified pool.  This is used to update the stats we have in our PoolInfo storage.The calling App ID is validated against our pool list as well.",
        "args": [
          {
            "name": "poolKey",
            "type": "(uint64,uint64,uint64)",
            "desc": "ValidatorPoolKey type"
          },
          {
            "name": "amountToAdd",
            "type": "uint64",
            "desc": "amount this validator's total stake increased via rewards"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "stakeRemoved",
        "desc": "stakerRemoved is called by Staking Pools to inform the validator (us) that a particular amount of total stake has been removedfrom the specified pool.  This is used to update the stats we have in our PoolInfo storage.The calling App ID is validated against our pool list as well.",
        "args": [
          {
            "name": "poolKey",
            "type": "(uint64,uint64,uint64)",
            "desc": "ValidatorPoolKey type - [validatorID, PoolID] compound type"
          },
          {
            "name": "staker",
            "type": "address"
          },
          {
            "name": "amountRemoved",
            "type": "uint64"
          },
          {
            "name": "stakerRemoved",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "findPoolForStaker",
        "desc": "Finds the pool for a staker based on the provided validator ID, staker address, and amount to stake.First checks the stakers 'already staked list' for the validator preferring those (adding if possible) then addsto new pool if necessary.",
        "args": [
          {
            "name": "validatorID",
            "type": "uint64",
            "desc": "The ID of the validator."
          },
          {
            "name": "staker",
            "type": "address",
            "desc": "The address of the staker."
          },
          {
            "name": "amountToStake",
            "type": "uint64",
            "desc": "The amount to stake."
          }
        ],
        "returns": {
          "type": "((uint64,uint64,uint64),bool)",
          "desc": "{ValidatorPoolKey, boolean}- The pool for the staker and true/false on whether the staker is 'new' to this validator"
        }
      }
    ]
  }
}