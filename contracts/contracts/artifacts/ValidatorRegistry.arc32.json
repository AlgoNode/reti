{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "getNumValidators()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getValidatorInfo(uint64)(uint64,address,address,uint64,(uint64,uint64,uint64,uint64),(uint64,uint64,uint64))": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addValidator(address,address,uint64,(uint64,uint64,uint64,uint64))uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addPool(uint64)(uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "numValidators": {
          "type": "uint64",
          "key": "numV"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "ValidatorRegistry",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getNumValidators",
        "desc": "Returns the current number of validators",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getValidatorInfo",
        "readonly": true,
        "args": [
          {
            "name": "validatorID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(uint64,address,address,uint64,(uint64,uint64,uint64,uint64),(uint64,uint64,uint64))"
        }
      },
      {
        "name": "addValidator",
        "desc": "Adds a new validator",
        "args": [
          {
            "name": "owner",
            "type": "address",
            "desc": "The account (presumably cold-wallet) that owns the validator set"
          },
          {
            "name": "manager",
            "type": "address",
            "desc": "The account that manages the pool part. keys and triggers payouts.  Normally a hot-wallet as node sidecar needs the keys"
          },
          {
            "name": "nfdAppID",
            "type": "uint64",
            "desc": "Optional NFD App ID linking to information about the validator being added - where information about the validator and their pools can be found."
          },
          {
            "name": "config",
            "type": "(uint64,uint64,uint64,uint64)",
            "desc": "ValidatorConfig struct"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "addPool",
        "desc": "Adds a new pool to a validator's pool set.",
        "args": [
          {
            "name": "validatorID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(uint64,uint64)"
        }
      }
    ]
  }
}