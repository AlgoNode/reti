{
  "name": "ValidatorRegistry",
  "desc": "",
  "methods": [
    {
      "name": "createApplication",
      "args": [
        {
          "name": "poolTemplateAppID",
          "type": "uint64"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "gas",
      "desc": "gas is a dummy no-op call that can be used to pool-up resource references and opcode cost",
      "args": [],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "getMbrAmounts",
      "args": [],
      "returns": {
        "type": "(uint64,uint64,uint64)"
      }
    },
    {
      "name": "getNumValidators",
      "desc": "Returns the current number of validators",
      "args": [],
      "returns": {
        "type": "uint64"
      }
    },
    {
      "name": "getValidatorInfo",
      "args": [
        {
          "name": "validatorID",
          "type": "uint64"
        }
      ],
      "returns": {
        "type": "(uint64,address,address,uint64,(uint16,uint32,address,uint64,uint64,uint8,uint16),(uint16,uint64,uint64),(uint16,byte[32])[12],(uint16,uint64,uint16,uint64)[48])"
      }
    },
    {
      "name": "getValidatorConfig",
      "args": [
        {
          "name": "validatorID",
          "type": "uint64"
        }
      ],
      "returns": {
        "type": "(uint16,uint32,address,uint64,uint64,uint8,uint16)"
      }
    },
    {
      "name": "getValidatorState",
      "args": [
        {
          "name": "validatorID",
          "type": "uint64"
        }
      ],
      "returns": {
        "type": "(uint16,uint64,uint64)"
      }
    },
    {
      "name": "getPoolInfo",
      "args": [
        {
          "name": "poolKey",
          "type": "(uint64,uint64,uint64)"
        }
      ],
      "returns": {
        "type": "(uint16,uint64,uint16,uint64)"
      }
    },
    {
      "name": "addValidator",
      "desc": "Adds a new validator",
      "args": [
        {
          "name": "owner",
          "type": "address",
          "desc": "The account (presumably cold-wallet) that owns the validator set"
        },
        {
          "name": "manager",
          "type": "address",
          "desc": "The account that manages the pool part. keys and triggers payouts.  Normally a hot-wallet as node sidecar needs the keys"
        },
        {
          "name": "nfdAppID",
          "type": "uint64",
          "desc": "Optional NFD App ID linking to information about the validator being added - where information about the validator and their pools can be found."
        },
        {
          "name": "config",
          "type": "(uint16,uint32,address,uint64,uint64,uint8,uint16)",
          "desc": "ValidatorConfig struct"
        }
      ],
      "returns": {
        "type": "uint64"
      }
    },
    {
      "name": "addPool",
      "desc": "Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.The caller must pay the cost of the validators MBR increase as well as the MBR that will be needed for the pool itself.",
      "args": [
        {
          "name": "mbrPayment",
          "type": "pay",
          "desc": "payment from caller which covers mbr increase of valiator pool + staking pool"
        },
        {
          "name": "validatorID",
          "type": "uint64",
          "desc": "is ID of validator to pool to (must be owner or manager)"
        }
      ],
      "returns": {
        "type": "(uint64,uint64,uint64)",
        "desc": "{ValidatorPoolKey}pool key to created pool"
      }
    },
    {
      "name": "getPoolAppID",
      "args": [
        {
          "name": "poolKey",
          "type": "(uint64,uint64,uint64)"
        }
      ],
      "returns": {
        "type": "uint64"
      }
    },
    {
      "name": "addStake",
      "desc": "Adds stake to a validator pool.",
      "args": [
        {
          "name": "stakedAmountPayment",
          "type": "pay",
          "desc": "payment coming from staker to place into a pool"
        },
        {
          "name": "validatorID",
          "type": "uint64",
          "desc": "The ID of the validator."
        }
      ],
      "returns": {
        "type": "(uint64,uint64,uint64)",
        "desc": "{ValidatorPoolKey}- The key of the validator pool."
      }
    },
    {
      "name": "getStakedPoolsForAccount",
      "args": [
        {
          "name": "staker",
          "type": "account"
        }
      ],
      "returns": {
        "type": "(uint64,uint64,uint64)[]"
      }
    },
    {
      "name": "stakeUpdatedViaRewards",
      "desc": "stakeUpdatedViaRewards is called by Staking Pools to inform the validator (us) that a particular amount of totalstake has been added to the specified pool.  This is used to update the stats we have in our PoolInfo storage.The calling App ID is validated against our pool list as well.",
      "args": [
        {
          "name": "poolKey",
          "type": "(uint64,uint64,uint64)",
          "desc": "ValidatorPoolKey type - [validatorID, PoolID] compound type"
        },
        {
          "name": "amountToAdd",
          "type": "uint64"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "stakeRemoved",
      "desc": "stakerRemoved is called by Staking Pools to inform the validator (us) that a particular amount of total stake has been removedfrom the specified pool.  This is used to update the stats we have in our PoolInfo storage.The calling App ID is validated against our pool list as well.",
      "args": [
        {
          "name": "poolKey",
          "type": "(uint64,uint64,uint64)",
          "desc": "ValidatorPoolKey type - [validatorID, PoolID] compound type"
        },
        {
          "name": "staker",
          "type": "address"
        },
        {
          "name": "amountRemoved",
          "type": "uint64"
        },
        {
          "name": "stakerRemoved",
          "type": "bool"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "findPoolForStaker",
      "desc": "Finds the pool for a staker based on the provided validator ID, staker address, and amount to stake.First checks the stakers 'already staked list' for the validator preferring those (adding if possible) then addsto new pool if necessary.",
      "args": [
        {
          "name": "validatorID",
          "type": "uint64",
          "desc": "The ID of the validator."
        },
        {
          "name": "staker",
          "type": "address",
          "desc": "The address of the staker."
        },
        {
          "name": "amountToStake",
          "type": "uint64",
          "desc": "The amount to stake."
        }
      ],
      "returns": {
        "type": "(uint64,uint64,uint64)",
        "desc": "{ValidatorPoolKey}- The pool for the staker."
      }
    }
  ]
}