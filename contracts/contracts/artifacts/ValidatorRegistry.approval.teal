#pragma version 9

// This TEAL was generated by TEALScript v0.77.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

// createApplication()void
abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/validatorRegistry.algo.ts:81
	// this.numValidators.value = 0
	byte 0x6e756d56 // "numV"
	int 0
	app_global_put
	retsub

// getNumValidators()uint64
abi_route_getNumValidators:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getNumValidators()uint64
	callsub getNumValidators
	itob
	concat
	log
	int 1
	return

// getNumValidators(): uint64
//
// Returns the current number of validators
getNumValidators:
	proto 0 1

	// contracts/validatorRegistry.algo.ts:89
	// return this.numValidators.value;
	byte 0x6e756d56 // "numV"
	app_global_get
	retsub

// getValidatorInfo(uint64)(uint64,address,address,uint64,(uint16,uint32,address,uint8,uint16),(uint16,uint64,uint64),(uint16,byte[32])[3],(uint16,uint64,uint16,uint64)[12])
abi_route_getValidatorInfo:
	// The ABI return prefix
	byte 0x151f7c75

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute getValidatorInfo(uint64)(uint64,address,address,uint64,(uint16,uint32,address,uint8,uint16),(uint16,uint64,uint64),(uint16,byte[32])[3],(uint16,uint64,uint16,uint64)[12])
	callsub getValidatorInfo
	concat
	log
	int 1
	return

// getValidatorInfo(validatorID: ValidatorID): ValidatorInfo
getValidatorInfo:
	proto 1 1

	// contracts/validatorRegistry.algo.ts:94
	// return this.ValidatorList(validatorID).value;
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	box_get
	assert
	retsub

// getValidatorConfig(uint64)(uint16,uint32,address,uint8,uint16)
abi_route_getValidatorConfig:
	// The ABI return prefix
	byte 0x151f7c75

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute getValidatorConfig(uint64)(uint16,uint32,address,uint8,uint16)
	callsub getValidatorConfig
	concat
	log
	int 1
	return

// getValidatorConfig(validatorID: ValidatorID): ValidatorConfig
getValidatorConfig:
	proto 1 1

	// contracts/validatorRegistry.algo.ts:99
	// return this.ValidatorList(validatorID).value.Config;
	int 80 // headOffset
	int 41
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	retsub

// addValidator(address,address,uint64,(uint16,uint32,address,uint8,uint16))uint64
abi_route_addValidator:
	// The ABI return prefix
	byte 0x151f7c75

	// config: (uint16,uint32,address,uint8,uint16)
	txna ApplicationArgs 4
	dup
	len
	int 41
	==
	assert

	// nfdAppID: uint64
	txna ApplicationArgs 3
	btoi

	// manager: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute addValidator(address,address,uint64,(uint16,uint32,address,uint8,uint16))uint64
	callsub addValidator
	itob
	concat
	log
	int 1
	return

// addValidator(owner: Address, manager: Address, nfdAppID: uint64, config: ValidatorConfig): uint64
//
// Adds a new validator
// @param owner The account (presumably cold-wallet) that owns the validator set
// @param manager The account that manages the pool part. keys and triggers payouts.  Normally a hot-wallet as node sidecar needs the keys
// @param nfdAppID Optional NFD App ID linking to information about the validator being added - where information about the validator and their pools can be found.
// @param config ValidatorConfig struct
addValidator:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/validatorRegistry.algo.ts:109
	// assert(owner !== Address.zeroAddress)
	frame_dig -1 // owner: Address
	global ZeroAddress
	!=
	assert

	// contracts/validatorRegistry.algo.ts:110
	// assert(manager !== Address.zeroAddress)
	frame_dig -2 // manager: Address
	global ZeroAddress
	!=
	assert

	// contracts/validatorRegistry.algo.ts:112
	// this.validateConfig(config)
	frame_dig -4 // config: ValidatorConfig
	callsub validateConfig

	// contracts/validatorRegistry.algo.ts:115
	// validatorID = this.numValidators.value + 1
	byte 0x6e756d56 // "numV"
	app_global_get
	int 1
	+
	frame_bury 0 // validatorID: uint64

	// contracts/validatorRegistry.algo.ts:116
	// this.numValidators.value = validatorID
	byte 0x6e756d56 // "numV"
	frame_dig 0 // validatorID: uint64
	app_global_put

	// contracts/validatorRegistry.algo.ts:118
	// this.ValidatorList(validatorID).create()
	byte 0x76 // "v"
	frame_dig 0 // validatorID: uint64
	itob
	concat
	int 481
	box_create
	pop

	// contracts/validatorRegistry.algo.ts:119
	// this.ValidatorList(validatorID).value.ID = validatorID
	int 0
	frame_dig 0 // validatorID: uint64
	itob
	byte 0x76 // "v"
	frame_dig 0 // validatorID: uint64
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:120
	// this.ValidatorList(validatorID).value.Owner = owner
	int 8 // headOffset
	frame_dig -1 // owner: Address
	byte 0x76 // "v"
	frame_dig 0 // validatorID: uint64
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:121
	// this.ValidatorList(validatorID).value.Manager = manager
	int 40 // headOffset
	frame_dig -2 // manager: Address
	byte 0x76 // "v"
	frame_dig 0 // validatorID: uint64
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:122
	// this.ValidatorList(validatorID).value.NFDForInfo = nfdAppID
	int 72 // headOffset
	frame_dig -3 // nfdAppID: uint64
	itob
	byte 0x76 // "v"
	frame_dig 0 // validatorID: uint64
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:123
	// this.ValidatorList(validatorID).value.Config = config
	int 80 // headOffset
	frame_dig -4 // config: ValidatorConfig
	byte 0x76 // "v"
	frame_dig 0 // validatorID: uint64
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:125
	// this.ValidatorList(validatorID).value.Nodes[0].Name = 'foo'
	int 141
	byte 0x666f6f // "foo"
	byte 0x76 // "v"
	frame_dig 0 // validatorID: uint64
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:126
	// return validatorID;
	frame_dig 0 // validatorID: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// addPool(uint64)(uint64,uint16)
abi_route_addPool:
	// The ABI return prefix
	byte 0x151f7c75

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute addPool(uint64)(uint64,uint16)
	callsub addPool
	concat
	log
	int 1
	return

// addPool(validatorID: ValidatorID): ValidatorPoolKey
//
// Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.
addPool:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// contracts/validatorRegistry.algo.ts:132
	// assert(this.ValidatorList(validatorID).exists)
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	box_len
	swap
	pop
	assert

	// contracts/validatorRegistry.algo.ts:134
	// owner = this.ValidatorList(validatorID).value.Owner
	int 8 // headOffset
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	frame_bury 0 // owner: address

	// contracts/validatorRegistry.algo.ts:135
	// manager = this.ValidatorList(validatorID).value.Manager
	int 40 // headOffset
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	frame_bury 1 // manager: address

	// contracts/validatorRegistry.algo.ts:138
	// assert(this.txn.sender === owner || this.txn.sender === manager)
	txn Sender
	frame_dig 0 // owner: address
	==
	dup
	bnz skip_or0
	txn Sender
	frame_dig 1 // manager: address
	==
	||

skip_or0:
	assert

	// contracts/validatorRegistry.algo.ts:140
	// numPools = this.ValidatorList(validatorID).value.State.NumPools
	int 121
	int 2
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 2 // numPools: uint16

	// if0_condition
	// contracts/validatorRegistry.algo.ts:141
	// (numPools as uint64) >= MAX_POOLS
	frame_dig 2 // numPools: uint16
	int 12
	>=
	bz if0_end

	// if0_consequent
	err // 'already at max pool size'

if0_end:
	// contracts/validatorRegistry.algo.ts:144
	// numPools += 1
	frame_dig 2 // numPools: uint16
	int 1
	+
	frame_bury 2 // numPools: uint16

	// contracts/validatorRegistry.algo.ts:147
	// sendAppCall({
	//             onCompletion: OnCompletion.NoOp,
	//             approvalProgram: Application.fromID(this.StakingPoolTemplateAppID).approvalProgram,
	//             globalNumUint: Application.fromID(this.StakingPoolTemplateAppID).globalNumUint,
	//             globalNumByteSlice: Application.fromID(this.StakingPoolTemplateAppID).globalNumByteSlice,
	//             extraProgramPages: Application.fromID(this.StakingPoolTemplateAppID).extraProgramPages,
	//             applicationArgs: [
	//                 itob(this.app.id),
	//                 itob(validatorID),
	//                 itob(numPools),
	//                 rawBytes(this.ValidatorList(validatorID).value.Owner),
	//                 rawBytes(this.ValidatorList(validatorID).value.Manager),
	//             ],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum

	// contracts/validatorRegistry.algo.ts:148
	// onCompletion: OnCompletion.NoOp
	int 0 // NoOp
	itxn_field OnCompletion

	// contracts/validatorRegistry.algo.ts:149
	// approvalProgram: Application.fromID(this.StakingPoolTemplateAppID).approvalProgram
	pushint TMPL_StakingPoolTemplateAppID
	app_params_get AppApprovalProgram
	pop
	itxn_field ApprovalProgram

	// contracts/validatorRegistry.algo.ts:150
	// globalNumUint: Application.fromID(this.StakingPoolTemplateAppID).globalNumUint
	pushint TMPL_StakingPoolTemplateAppID
	app_params_get AppGlobalNumUint
	pop
	itxn_field GlobalNumUint

	// contracts/validatorRegistry.algo.ts:151
	// globalNumByteSlice: Application.fromID(this.StakingPoolTemplateAppID).globalNumByteSlice
	pushint TMPL_StakingPoolTemplateAppID
	app_params_get AppGlobalNumByteSlice
	pop
	itxn_field GlobalNumByteSlice

	// contracts/validatorRegistry.algo.ts:152
	// extraProgramPages: Application.fromID(this.StakingPoolTemplateAppID).extraProgramPages
	pushint TMPL_StakingPoolTemplateAppID
	app_params_get AppExtraProgramPages
	pop
	itxn_field ExtraProgramPages

	// contracts/validatorRegistry.algo.ts:153
	// applicationArgs: [
	//                 itob(this.app.id),
	//                 itob(validatorID),
	//                 itob(numPools),
	//                 rawBytes(this.ValidatorList(validatorID).value.Owner),
	//                 rawBytes(this.ValidatorList(validatorID).value.Manager),
	//             ]
	txna Applications 0
	itob
	itxn_field ApplicationArgs
	frame_dig -1 // validatorID: ValidatorID
	itob
	itxn_field ApplicationArgs
	frame_dig 2 // numPools: uint16
	itob
	itxn_field ApplicationArgs
	int 8 // headOffset
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	itxn_field ApplicationArgs
	int 40 // headOffset
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/validatorRegistry.algo.ts:162
	// this.ValidatorList(validatorID).value.State.NumPools = numPools
	int 121
	frame_dig 2 // numPools: uint16
	itob
	extract 6 2
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:165
	// this.ValidatorList(validatorID).value.Pools[numPools - 1].PoolAppID = this.itxn.createdApplicationID.id
	int 241 // headOffset
	frame_dig 2 // numPools: uint16
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 2 // headOffset
	+
	itxn CreatedApplicationID
	itob
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:168
	// return { ID: validatorID, PoolID: numPools };
	frame_dig -1 // validatorID: ValidatorID
	itob
	frame_dig 2 // numPools: uint16
	itob
	extract 6 2
	concat

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// addStake(uint64,uint64)(uint64,uint16)
abi_route_addStake:
	// The ABI return prefix
	byte 0x151f7c75

	// amountToStake: uint64
	txna ApplicationArgs 2
	btoi

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute addStake(uint64,uint64)(uint64,uint16)
	callsub addStake
	concat
	log
	int 1
	return

// addStake(validatorID: ValidatorID, amountToStake: uint64): ValidatorPoolKey
addStake:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/validatorRegistry.algo.ts:174
	// verifyPayTxn(this.txnGroup[this.txn.groupIndex - 1], {
	//             sender: this.txn.sender,
	//             receiver: this.app.address,
	//             amount: amountToStake,
	//         })
	txn GroupIndex
	int 1
	-
	store 248 // verifyTxn index

	// verify pay
	load 248 // verifyTxn index
	gtxns TypeEnum
	int pay
	==
	assert

	// verify sender
	load 248 // verifyTxn index
	gtxns Sender
	txn Sender
	==
	assert

	// verify receiver
	load 248 // verifyTxn index
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	load 248 // verifyTxn index
	gtxns Amount
	frame_dig -2 // amountToStake: uint64
	==
	assert

	// contracts/validatorRegistry.algo.ts:181
	// poolKey = this.findPoolForStake(validatorID, amountToStake)
	frame_dig -2 // amountToStake: uint64
	frame_dig -1 // validatorID: ValidatorID
	callsub findPoolForStake
	frame_bury 0 // poolKey: ValidatorPoolKey

	// if1_condition
	// contracts/validatorRegistry.algo.ts:182
	// poolKey.PoolID == 0
	frame_dig 0 // poolKey: ValidatorPoolKey
	extract 8 2
	btoi
	int 0
	==
	bz if1_end

	// if1_consequent
	// contracts/validatorRegistry.algo.ts:184
	// poolKey = this.addPool(validatorID)
	frame_dig -1 // validatorID: ValidatorID
	callsub addPool
	frame_bury 0 // poolKey: ValidatorPoolKey

if1_end:
	// contracts/validatorRegistry.algo.ts:186
	// this.callPoolAddStake(poolKey, this.txn.sender, amountToStake)
	frame_dig -2 // amountToStake: uint64
	txn Sender
	frame_dig 0 // poolKey: ValidatorPoolKey
	callsub callPoolAddStake

	// contracts/validatorRegistry.algo.ts:187
	// return poolKey;
	frame_dig 0 // poolKey: ValidatorPoolKey

	// set the subroutine return value
	frame_bury 0
	retsub

// stakeRemoved(uint64,uint64,address,uint64,bool)void
abi_route_stakeRemoved:
	// stakerRemoved: bool
	txna ApplicationArgs 5
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// amountRemoved: uint64
	txna ApplicationArgs 4
	btoi

	// staker: address
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// poolID: uint64
	txna ApplicationArgs 2
	btoi

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute stakeRemoved(uint64,uint64,address,uint64,bool)void
	callsub stakeRemoved
	int 1
	return

// stakeRemoved(validatorID: uint64, poolID: uint64, staker: Address, amountRemoved: uint64, stakerRemoved: boolean): void
//
// stakerRemoved is called by Staking Pools to inform the validator (us) that a particular amount of total stake has been removed
// from the specified pool.  This is used to update the stats we have in our PoolInfo storage.
// The calling App ID is validated against our pool list as well.
// @param validatorID
// @param poolID - 1-index based index into list of pools for this validator
// @param staker
// @param amountRemoved
// @param stakerRemoved
stakeRemoved:
	proto 5 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/validatorRegistry.algo.ts:207
	// assert(this.ValidatorList(validatorID).exists)
	byte 0x76 // "v"
	frame_dig -1 // validatorID: uint64
	itob
	concat
	box_len
	swap
	pop
	assert

	// contracts/validatorRegistry.algo.ts:208
	// assert(poolID < 2 ** 16)
	frame_dig -2 // poolID: uint64
	int 2
	int 16
	exp
	<
	assert

	// contracts/validatorRegistry.algo.ts:209
	// assert(poolID > 0 && (poolID as uint16) <= this.ValidatorList(validatorID).value.State.NumPools)
	frame_dig -2 // poolID: uint64
	int 0
	>
	dup
	bz skip_and0
	frame_dig -2 // poolID: uint64
	int 121
	int 2
	byte 0x76 // "v"
	frame_dig -1 // validatorID: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	<=
	&&

skip_and0:
	assert

	// contracts/validatorRegistry.algo.ts:212
	// poolAppID = this.ValidatorList(validatorID).value.Pools[poolID - 1].PoolAppID
	int 241 // headOffset
	frame_dig -2 // poolID: uint64
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 2 // headOffset
	+
	int 8
	byte 0x76 // "v"
	frame_dig -1 // validatorID: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // poolAppID: uint64

	// contracts/validatorRegistry.algo.ts:214
	// assert(this.txn.sender == Application.fromID(poolAppID).address)
	txn Sender
	frame_dig 0 // poolAppID: uint64
	app_params_get AppAddress
	pop
	==
	assert

	// contracts/validatorRegistry.algo.ts:216
	// assert(validatorID === (Application.fromID(poolAppID).globalState('validatorID') as uint64))
	frame_dig -1 // validatorID: uint64
	frame_dig 0 // poolAppID: uint64
	byte 0x76616c696461746f724944 // "validatorID"
	app_global_get_ex
	assert
	==
	assert

	// contracts/validatorRegistry.algo.ts:217
	// assert(poolID === (Application.fromID(poolAppID).globalState('poolID') as uint64))
	frame_dig -2 // poolID: uint64
	frame_dig 0 // poolAppID: uint64
	byte 0x706f6f6c4944 // "poolID"
	app_global_get_ex
	assert
	==
	assert

	// contracts/validatorRegistry.algo.ts:220
	// this.ValidatorList(validatorID).value.Pools[poolID - 1].TotalAlgoStaked -= amountRemoved
	int 241 // headOffset
	frame_dig -2 // poolID: uint64
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 12 // headOffset
	+
	int 241 // headOffset
	frame_dig -2 // poolID: uint64
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 12 // headOffset
	+
	int 8
	byte 0x76 // "v"
	frame_dig -1 // validatorID: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -4 // amountRemoved: uint64
	-
	itob
	byte 0x76 // "v"
	frame_dig -1 // validatorID: uint64
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:221
	// this.ValidatorList(validatorID).value.State.TotalAlgoStaked = amountRemoved
	int 131
	frame_dig -4 // amountRemoved: uint64
	itob
	byte 0x76 // "v"
	frame_dig -1 // validatorID: uint64
	itob
	concat
	cover 2
	box_replace

	// if2_condition
	// contracts/validatorRegistry.algo.ts:222
	// stakerRemoved
	frame_dig -5 // stakerRemoved: boolean
	bz if2_end

	// if2_consequent
	// contracts/validatorRegistry.algo.ts:223
	// this.ValidatorList(validatorID).value.Pools[poolID - 1].TotalStakers -= 1
	int 241 // headOffset
	frame_dig -2 // poolID: uint64
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 10 // headOffset
	+
	int 241 // headOffset
	frame_dig -2 // poolID: uint64
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 10 // headOffset
	+
	int 2
	byte 0x76 // "v"
	frame_dig -1 // validatorID: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	int 1
	-
	itob
	extract 6 2
	byte 0x76 // "v"
	frame_dig -1 // validatorID: uint64
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:224
	// this.ValidatorList(validatorID).value.State.TotalStakers -= 1
	int 123
	dup
	int 8
	byte 0x76 // "v"
	frame_dig -1 // validatorID: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	int 1
	-
	itob
	byte 0x76 // "v"
	frame_dig -1 // validatorID: uint64
	itob
	concat
	cover 2
	box_replace

if2_end:
	retsub

// findPoolForStake(validatorID: ValidatorID, amountToStake: uint64): ValidatorPoolKey
findPoolForStake:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 4

	// contracts/validatorRegistry.algo.ts:229
	// i = 1
	int 1
	frame_bury 0 // i: uint64

	// contracts/validatorRegistry.algo.ts:230
	// this.ValidatorList(validatorID).value.Pools
	int 241 // headOffset
	int 240
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	dup
	frame_bury 1 // copy of the array we are iterating over
	extract 0 20
	frame_bury 2 // pool: (uint16,uint64,uint16,uint64)
	int 0
	frame_bury 3 // the offset we are extracting the next element from

forEach_0:
	// if3_condition
	// contracts/validatorRegistry.algo.ts:231
	// pool.TotalAlgoStaked + amountToStake < MAX_ALGO_PER_POOL
	frame_dig 2 // pool: (uint16,uint64,uint16,uint64)
	extract 12 8
	btoi
	frame_dig -2 // amountToStake: uint64
	+
	int 20000000000000
	<
	bz if3_end

	// if3_consequent
	// contracts/validatorRegistry.algo.ts:232
	// return { ID: validatorID, PoolID: i };
	b forEach_0_end

if3_end:
	// contracts/validatorRegistry.algo.ts:234
	// i += 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64

	// increment offset and loop if not out of bounds
	frame_dig 3 // the offset we are extracting the next element from
	int 20
	+
	dup
	int 240 // offset of last element
	<
	bz forEach_0_end
	frame_bury 3 // the offset we are extracting the next element from
	frame_dig 1 // copy of the array we are iterating over
	frame_dig 3 // the offset we are extracting the next element from
	int 20
	extract
	frame_bury 2 // pool: (uint16,uint64,uint16,uint64)
	b forEach_0

forEach_0_end:
	// contracts/validatorRegistry.algo.ts:237
	// return { ID: validatorID, PoolID: 0 };
	frame_dig -1 // validatorID: ValidatorID
	itob
	byte 0x0000
	concat

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

// validateConfig(config: ValidatorConfig): void
validateConfig:
	proto 1 0

	// contracts/validatorRegistry.algo.ts:252
	// assert(config.PayoutEveryXDays >= MIN_PAYOUT_DAYS && config.PayoutEveryXDays <= MAX_PAYOUT_DAYS)
	frame_dig -1 // config: ValidatorConfig
	extract 0 2
	btoi
	int 1
	>=
	dup
	bz skip_and1
	frame_dig -1 // config: ValidatorConfig
	extract 0 2
	btoi
	int 30
	<=
	&&

skip_and1:
	assert

	// contracts/validatorRegistry.algo.ts:253
	// assert(config.PercentToValidator >= MIN_PCT_TO_VALIDATOR && config.PercentToValidator <= MAX_PCT_TO_VALIDATOR)
	frame_dig -1 // config: ValidatorConfig
	extract 2 4
	btoi
	int 10000
	>=
	dup
	bz skip_and2
	frame_dig -1 // config: ValidatorConfig
	extract 2 4
	btoi
	int 100000
	<=
	&&

skip_and2:
	assert

	// contracts/validatorRegistry.algo.ts:254
	// assert(config.ValidatorCommissionAddress !== Address.zeroAddress)
	frame_dig -1 // config: ValidatorConfig
	extract 6 32
	global ZeroAddress
	!=
	assert

	// contracts/validatorRegistry.algo.ts:255
	// assert(config.PoolsPerNode > 0 && config.PoolsPerNode <= MAX_POOLS_PER_NODE)
	frame_dig -1 // config: ValidatorConfig
	extract 38 1
	btoi
	int 0
	>
	dup
	bz skip_and3
	frame_dig -1 // config: ValidatorConfig
	extract 38 1
	btoi
	int 4
	<=
	&&

skip_and3:
	assert

	// contracts/validatorRegistry.algo.ts:256
	// assert(config.MaxNodes > 0 && config.MaxNodes <= MAX_NODES)
	frame_dig -1 // config: ValidatorConfig
	extract 39 2
	btoi
	int 0
	>
	dup
	bz skip_and4
	frame_dig -1 // config: ValidatorConfig
	extract 39 2
	btoi
	int 3
	<=
	&&

skip_and4:
	assert
	retsub

// callPoolAddStake(poolKey: ValidatorPoolKey, staker: Address, amountToStake: uint64): void
//
// Adds a stakers amount of algo to a validator pool, transfering the algo we received from them (already verified
// by our caller) to the staking pool account, and then telling it about the amount being add for the specified
// staker.
//
// @param {ValidatorPoolKey} poolKey - The key of the validator pool.
// @param {Address} staker - The address of the staker.
// @param {uint64} amountToStake - The amount to stake.
// @returns {void}
callPoolAddStake:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// contracts/validatorRegistry.algo.ts:270
	// poolAppID = this.ValidatorList(poolKey.ID).value.Pools[poolKey.PoolID - 1].PoolAppID
	int 241 // headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 2
	btoi
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 2 // headOffset
	+
	int 8
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // poolAppID: uint64

	// contracts/validatorRegistry.algo.ts:272
	// sendPayment({
	//             amount: amountToStake,
	//             receiver: Application.fromID(poolAppID).address,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/validatorRegistry.algo.ts:273
	// amount: amountToStake
	frame_dig -3 // amountToStake: uint64
	itxn_field Amount

	// contracts/validatorRegistry.algo.ts:274
	// receiver: Application.fromID(poolAppID).address
	frame_dig 0 // poolAppID: uint64
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/validatorRegistry.algo.ts:277
	// priorStakers = Application.fromID(poolAppID).globalState('numStakers') as uint64
	frame_dig 0 // poolAppID: uint64
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get_ex
	assert
	frame_bury 1 // priorStakers: uint64

	// contracts/validatorRegistry.algo.ts:278
	// priorStaked = Application.fromID(poolAppID).globalState('staked') as uint64
	frame_dig 0 // poolAppID: uint64
	byte 0x7374616b6564 // "staked"
	app_global_get_ex
	assert
	frame_bury 2 // priorStaked: uint64

	// contracts/validatorRegistry.algo.ts:281
	// sendMethodCall<[Address, uint64], uint64>({
	//             applicationID: Application.fromID(poolAppID),
	//             name: 'addStake',
	//             methodArgs: [staker, amountToStake],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "addStake(address,uint64)uint64"
	itxn_field ApplicationArgs

	// contracts/validatorRegistry.algo.ts:282
	// applicationID: Application.fromID(poolAppID)
	frame_dig 0 // poolAppID: uint64
	itxn_field ApplicationID

	// contracts/validatorRegistry.algo.ts:284
	// methodArgs: [staker, amountToStake]
	frame_dig -2 // staker: Address
	itxn_field ApplicationArgs
	frame_dig -3 // amountToStake: uint64
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	btoi

	// contracts/validatorRegistry.algo.ts:287
	// this.ValidatorList(poolKey.ID).value.Pools[poolKey.PoolID - 1].TotalStakers = Application.fromID(
	//             poolAppID
	//         ).globalState('numStakers') as uint64
	int 241 // headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 2
	btoi
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 10 // headOffset
	+
	frame_dig 0 // poolAppID: uint64
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get_ex
	assert
	itob
	extract 6 2
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:290
	// this.ValidatorList(poolKey.ID).value.Pools[poolKey.PoolID - 1].TotalAlgoStaked = Application.fromID(
	//             poolAppID
	//         ).globalState('staked') as uint64
	int 241 // headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 2
	btoi
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 12 // headOffset
	+
	frame_dig 0 // poolAppID: uint64
	byte 0x7374616b6564 // "staked"
	app_global_get_ex
	assert
	itob
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:294
	// this.ValidatorList(poolKey.ID).value.State.TotalStakers +=
	//             (Application.fromID(poolAppID).globalState('numStakers') as uint64) - priorStakers
	int 123
	dup
	int 8
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 0 // poolAppID: uint64
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get_ex
	assert
	frame_dig 1 // priorStakers: uint64
	-
	+
	itob
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:296
	// this.ValidatorList(poolKey.ID).value.State.TotalAlgoStaked += amountToStake
	int 131
	dup
	int 8
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -3 // amountToStake: uint64
	+
	itob
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace
	retsub

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "getNumValidators()uint64"
	method "getValidatorInfo(uint64)(uint64,address,address,uint64,(uint16,uint32,address,uint8,uint16),(uint16,uint64,uint64),(uint16,byte[32])[3],(uint16,uint64,uint16,uint64)[12])"
	method "getValidatorConfig(uint64)(uint16,uint32,address,uint8,uint16)"
	method "addValidator(address,address,uint64,(uint16,uint32,address,uint8,uint16))uint64"
	method "addPool(uint64)(uint64,uint16)"
	method "addStake(uint64,uint64)(uint64,uint16)"
	method "stakeRemoved(uint64,uint64,address,uint64,bool)void"
	txna ApplicationArgs 0
	match abi_route_getNumValidators abi_route_getValidatorInfo abi_route_getValidatorConfig abi_route_addValidator abi_route_addPool abi_route_addStake abi_route_stakeRemoved
	err