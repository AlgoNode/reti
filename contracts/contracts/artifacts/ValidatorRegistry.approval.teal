#pragma version 9

// This TEAL was generated by TEALScript v0.75.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

// createApplication()void
abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/contracts.algo.ts:76
	// this.numValidators.value = 0
	byte 0x6e756d56 // "numV"
	int 0
	app_global_put
	retsub

// getNumValidators()uint64
abi_route_getNumValidators:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getNumValidators()uint64
	callsub getNumValidators
	itob
	concat
	log
	int 1
	return

// getNumValidators(): uint64
//
// Returns the current number of validators
getNumValidators:
	proto 0 1

	// contracts/contracts.algo.ts:84
	// return this.numValidators.value;
	byte 0x6e756d56 // "numV"
	app_global_get
	retsub

// getValidatorInfo(uint64)(uint64,address,address,uint64,(uint64,uint64,uint64,uint64),(uint64,uint64,uint64))
abi_route_getValidatorInfo:
	// The ABI return prefix
	byte 0x151f7c75

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute getValidatorInfo(uint64)(uint64,address,address,uint64,(uint64,uint64,uint64,uint64),(uint64,uint64,uint64))
	callsub getValidatorInfo
	concat
	log
	int 1
	return

// getValidatorInfo(validatorID: ValidatorID): ValidatorInfo
getValidatorInfo:
	proto 1 1

	// contracts/contracts.algo.ts:89
	// return this.ValidatorList(validatorID).value;
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	box_get
	assert
	retsub

// addValidator(address,address,uint64,(uint64,uint64,uint64,uint64))uint64
abi_route_addValidator:
	// The ABI return prefix
	byte 0x151f7c75

	// config: (uint64,uint64,uint64,uint64)
	txna ApplicationArgs 4
	dup
	len
	int 32
	==
	assert

	// nfdAppID: uint64
	txna ApplicationArgs 3
	btoi

	// manager: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute addValidator(address,address,uint64,(uint64,uint64,uint64,uint64))uint64
	callsub addValidator
	itob
	concat
	log
	int 1
	return

// addValidator(owner: Address, manager: Address, nfdAppID: uint64, config: ValidatorConfig): uint64
//
// Adds a new validator
// @param owner The account (presumably cold-wallet) that owns the validator set
// @param manager The account that manages the pool part. keys and triggers payouts.  Normally a hot-wallet as node sidecar needs the keys
// @param nfdAppID Optional NFD App ID linking to information about the validator being added - where information about the validator and their pools can be found.
// @param config ValidatorConfig struct
addValidator:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/contracts.algo.ts:99
	// assert(owner !== Address.zeroAddress)
	frame_dig -1 // owner: Address
	global ZeroAddress
	!=
	assert

	// contracts/contracts.algo.ts:100
	// assert(manager !== Address.zeroAddress)
	frame_dig -2 // manager: Address
	global ZeroAddress
	!=
	assert

	// contracts/contracts.algo.ts:102
	// this.validateConfig(config)
	frame_dig -4 // config: ValidatorConfig
	callsub validateConfig

	// contracts/contracts.algo.ts:105
	// validatorID = this.numValidators.value + 1
	byte 0x6e756d56 // "numV"
	app_global_get
	int 1
	+
	frame_bury 0 // validatorID: uint64

	// contracts/contracts.algo.ts:106
	// this.numValidators.value = validatorID
	byte 0x6e756d56 // "numV"
	frame_dig 0 // validatorID: uint64
	app_global_put

	// contracts/contracts.algo.ts:108
	// this.ValidatorList(validatorID).value = {
	//             ID: validatorID,
	//             Owner: owner,
	//             Manager: manager,
	//             NFDForInfo: nfdAppID,
	//             Config: config,
	//             State: {
	//                 NumPools: 0,
	//                 TotalAlgoStaked: 0,
	//                 TotalStakers: 0,
	//             },
	//         }
	byte 0x76 // "v"
	frame_dig 0 // validatorID: uint64
	itob
	concat
	frame_dig 0 // validatorID: uint64
	itob
	frame_dig -1 // owner: Address
	concat
	frame_dig -2 // manager: Address
	concat
	frame_dig -3 // nfdAppID: uint64
	itob
	concat
	frame_dig -4 // config: ValidatorConfig
	concat
	byte 0x000000000000000000000000000000000000000000000000
	concat
	box_put

	// contracts/contracts.algo.ts:120
	// return validatorID;
	frame_dig 0 // validatorID: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// addPool(uint64)(uint64,uint64)
abi_route_addPool:
	// The ABI return prefix
	byte 0x151f7c75

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute addPool(uint64)(uint64,uint64)
	callsub addPool
	concat
	log
	int 1
	return

// addPool(validatorID: ValidatorID): ValidatorPoolKey
//
// Adds a new pool to a validator's pool set.
addPool:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 4

	// contracts/contracts.algo.ts:127
	// assert(this.ValidatorList(validatorID).exists)
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	box_len
	swap
	pop
	assert

	// contracts/contracts.algo.ts:129
	// owner = this.ValidatorList(validatorID).value.Owner
	int 8 // headOffset
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	frame_bury 0 // owner: address

	// contracts/contracts.algo.ts:130
	// manager = this.ValidatorList(validatorID).value.Manager
	int 40 // headOffset
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	frame_bury 1 // manager: address

	// contracts/contracts.algo.ts:132
	// assert(this.txn.sender === owner || this.txn.sender === manager)
	txn Sender
	frame_dig 0 // owner: address
	==
	dup
	bnz skip_or0
	txn Sender
	frame_dig 1 // manager: address
	==
	||

skip_or0:
	assert

	// contracts/contracts.algo.ts:134
	// numPools = this.ValidatorList(validatorID).value.State.NumPools
	int 112
	int 8
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 2 // numPools: uint64

	// if0_condition
	// contracts/contracts.algo.ts:135
	// numPools >= MAX_POOLS
	frame_dig 2 // numPools: uint64
	int 256
	>=
	bz if0_end

	// if0_consequent
	err // 'already at max pool size'

if0_end:
	// contracts/contracts.algo.ts:138
	// numPools += 1
	frame_dig 2 // numPools: uint64
	int 1
	+
	frame_bury 2 // numPools: uint64

	// contracts/contracts.algo.ts:141
	// poolKey: ValidatorPoolKey = { ID: validatorID, PoolID: numPools }
	frame_dig -1 // validatorID: ValidatorID
	itob
	frame_dig 2 // numPools: uint64
	itob
	concat
	frame_bury 3 // poolKey: ValidatorPoolKey

	// contracts/contracts.algo.ts:142
	// this.ValidatorPools(poolKey).create()
	byte 0x70 // "p"
	frame_dig 3 // poolKey: ValidatorPoolKey
	concat
	int 4013
	box_create
	pop

	// contracts/contracts.algo.ts:145
	// return poolKey;
	frame_dig 3 // poolKey: ValidatorPoolKey

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

// validateConfig(config: ValidatorConfig): void
validateConfig:
	proto 1 0

	// contracts/contracts.algo.ts:150
	// assert(config.PayoutEveryXDays >= MIN_PAYOUT_DAYS && config.PayoutEveryXDays <= MAX_PAYOUT_DAYS)
	frame_dig -1 // config: ValidatorConfig
	extract 0 8
	btoi
	int 1
	>=
	dup
	bz skip_and0
	frame_dig -1 // config: ValidatorConfig
	extract 0 8
	btoi
	int 30
	<=
	&&

skip_and0:
	assert

	// contracts/contracts.algo.ts:152
	// assert(config.PercentToValidator >= MIN_PCT_TO_VALIDATOR && config.PercentToValidator <= MAX_PCT_TO_VALIDATOR)
	frame_dig -1 // config: ValidatorConfig
	extract 8 8
	btoi
	int 100
	>=
	dup
	bz skip_and1
	frame_dig -1 // config: ValidatorConfig
	extract 8 8
	btoi
	int 1000
	<=
	&&

skip_and1:
	assert

	// contracts/contracts.algo.ts:153
	// assert(config.PoolsPerNode > 0 && config.PoolsPerNode <= MAX_POOLS_PER_NODE)
	frame_dig -1 // config: ValidatorConfig
	extract 16 8
	btoi
	int 0
	>
	dup
	bz skip_and2
	frame_dig -1 // config: ValidatorConfig
	extract 16 8
	btoi
	int 8
	<=
	&&

skip_and2:
	assert

	// contracts/contracts.algo.ts:154
	// assert(config.MaxNodes > 0 && config.MaxNodes <= MAX_NODES_PER_VALIDATOR)
	frame_dig -1 // config: ValidatorConfig
	extract 24 8
	btoi
	int 0
	>
	dup
	bz skip_and3
	frame_dig -1 // config: ValidatorConfig
	extract 24 8
	btoi
	int 100
	<=
	&&

skip_and3:
	assert
	retsub

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "getNumValidators()uint64"
	method "getValidatorInfo(uint64)(uint64,address,address,uint64,(uint64,uint64,uint64,uint64),(uint64,uint64,uint64))"
	method "addValidator(address,address,uint64,(uint64,uint64,uint64,uint64))uint64"
	method "addPool(uint64)(uint64,uint64)"
	txna ApplicationArgs 0
	match abi_route_getNumValidators abi_route_getValidatorInfo abi_route_addValidator abi_route_addPool
	err