#pragma version 10

// This TEAL was generated by TEALScript v0.88.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// createApplication(uint64)void
*abi_route_createApplication:
	// poolTemplateAppID: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64)void
	callsub createApplication
	int 1
	return

// createApplication(poolTemplateAppID: uint64): void
createApplication:
	proto 1 0

	// contracts/validatorRegistry.algo.ts:188
	// this.NumValidators.value = 0
	byte 0x6e756d56 // "numV"
	int 0
	app_global_put

	// contracts/validatorRegistry.algo.ts:189
	// this.StakingPoolTemplateAppID.value = poolTemplateAppID
	byte 0x706f6f6c54656d706c6174654170704944 // "poolTemplateAppID"
	frame_dig -1 // poolTemplateAppID: uint64
	app_global_put

	// contracts/validatorRegistry.algo.ts:190
	// this.NumStakers.value = 0
	byte 0x6e756d5374616b657273 // "numStakers"
	int 0
	app_global_put

	// contracts/validatorRegistry.algo.ts:191
	// this.TotalAlgoStaked.value = 0
	byte 0x7374616b6564 // "staked"
	int 0
	app_global_put
	retsub

// gas()void
*abi_route_gas:
	// execute gas()void
	callsub gas
	int 1
	return

// gas(): void
//
// gas is a dummy no-op call that can be used to pool-up resource references and opcode cost
gas:
	proto 0 0
	retsub

// minBalanceForAccount(contracts: uint64, extraPages: uint64, assets: uint64, localInts: uint64, localBytes: uint64, globalInts: uint64, globalBytes: uint64): uint64
minBalanceForAccount:
	proto 7 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/validatorRegistry.algo.ts:208
	// minBal = ALGORAND_ACCOUNT_MIN_BALANCE
	int 100000
	frame_bury 0 // minBal: uint64

	// contracts/validatorRegistry.algo.ts:209
	// minBal += contracts * APPLICATION_BASE_FEE
	frame_dig 0 // minBal: uint64
	frame_dig -1 // contracts: uint64
	int 100000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/validatorRegistry.algo.ts:210
	// minBal += extraPages * APPLICATION_BASE_FEE
	frame_dig 0 // minBal: uint64
	frame_dig -2 // extraPages: uint64
	int 100000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/validatorRegistry.algo.ts:211
	// minBal += assets * ASSET_HOLDING_FEE
	frame_dig 0 // minBal: uint64
	frame_dig -3 // assets: uint64
	int 100000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/validatorRegistry.algo.ts:212
	// minBal += localInts * SSC_VALUE_UINT
	frame_dig 0 // minBal: uint64
	frame_dig -4 // localInts: uint64
	int 28500
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/validatorRegistry.algo.ts:213
	// minBal += globalInts * SSC_VALUE_UINT
	frame_dig 0 // minBal: uint64
	frame_dig -6 // globalInts: uint64
	int 28500
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/validatorRegistry.algo.ts:214
	// minBal += localBytes * SSC_VALUE_BYTES
	frame_dig 0 // minBal: uint64
	frame_dig -5 // localBytes: uint64
	int 50000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/validatorRegistry.algo.ts:215
	// minBal += globalBytes * SSC_VALUE_BYTES
	frame_dig 0 // minBal: uint64
	frame_dig -7 // globalBytes: uint64
	int 50000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/validatorRegistry.algo.ts:216
	// return minBal;
	frame_dig 0 // minBal: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// costForBoxStorage(totalNumBytes: uint64): uint64
costForBoxStorage:
	proto 1 1

	// contracts/validatorRegistry.algo.ts:223
	// return SCBOX_PERBOX + totalNumBytes * SCBOX_PERBYTE;
	int 2500
	frame_dig -1 // totalNumBytes: uint64
	int 400
	*
	+
	retsub

// getMbrAmounts()(uint64,uint64,uint64,uint64)
*abi_route_getMbrAmounts:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getMbrAmounts()(uint64,uint64,uint64,uint64)
	callsub getMbrAmounts
	concat
	log
	int 1
	return

// getMbrAmounts(): MbrAmounts
//
// Returns the MBR amounts needed for various actions:
// [
// AddValidatorMbr: uint64 - mbr needed to add a new validator - paid to validator contract
// AddPoolMbr: uint64 - mbr needed to add a new pool - paid to validator
// PoolInitMbr: uint64 - mbr needed to initStorage() of pool - paid to pool itself
// AddStakerMbr: uint64 - mbr staker needs to add to first staking payment (stays w/ validator)
// ]
getMbrAmounts:
	proto 0 1

	// contracts/validatorRegistry.algo.ts:239
	// return {
	//             AddValidatorMbr: this.costForBoxStorage(1 /* v prefix */ + len<ValidatorID>() + len<ValidatorInfo>()),
	//             AddPoolMbr: this.minBalanceForAccount(
	//                 1,
	//                 0,
	//                 0,
	//                 0,
	//                 0,
	//                 StakingPool.schema.global.numUint,
	//                 StakingPool.schema.global.numByteSlice
	//             ),
	//             PoolInitMbr:
	//                 ALGORAND_ACCOUNT_MIN_BALANCE +
	//                 this.costForBoxStorage(7 /* 'stakers' name */ + len<StakedInfo>() * MAX_STAKERS_PER_POOL),
	//             AddStakerMbr:
	//                 // how much to charge for first time a staker adds stake - since we add a tracking box per staker
	//                 this.costForBoxStorage(
	//                     3 /* 'sps' prefix */ + len<Address>() + len<ValidatorPoolKey>() * MAX_POOLS_PER_STAKER
	//                 ), // size of key + all values
	//         };
	int 1067
	callsub costForBoxStorage
	itob
	int 1
	int 8
	int 0
	dupn 3
	int 1
	callsub minBalanceForAccount
	itob
	concat
	int 100000
	int 12807
	callsub costForBoxStorage
	+
	itob
	concat
	int 179
	callsub costForBoxStorage
	itob
	concat
	retsub

// getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
*abi_route_getProtocolConstraints:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	callsub getProtocolConstraints
	concat
	log
	int 1
	return

// getProtocolConstraints(): Constraints
//
// Returns the protocol constraints so that UIs can limit what users specify for validator configuration parameters.
getProtocolConstraints:
	proto 0 1

	// contracts/validatorRegistry.algo.ts:265
	// return {
	//             EpochPayoutMinsMin: MIN_PAYOUT_MINS,
	//             EpochPayoutMinsMax: MAX_PAYOUT_MINS,
	//             MinPctToValidatorWFourDecimals: MIN_PCT_TO_VALIDATOR,
	//             MaxPctToValidatorWFourDecimals: MAX_PCT_TO_VALIDATOR,
	//             MinEntryStake: MIN_ALGO_STAKE_PER_POOL,
	//             MaxAlgoPerPool: this.maxAlgoAllowedPerPool(),
	//             MaxAlgoPerValidator: this.maxAllowedStake(),
	//             AmtConsideredSaturated: this.algoSaturationLevel(),
	//             MaxNodes: MAX_NODES,
	//             MaxPoolsPerNode: MAX_POOLS_PER_NODE,
	//             MaxStakersPerPool: MAX_STAKERS_PER_POOL,
	//         };
	byte 0x00000000000000010000000000002760000000000000000000000000000f424000000000000f4240
	callsub maxAlgoAllowedPerPool
	itob
	concat
	callsub maxAllowedStake
	itob
	concat
	callsub algoSaturationLevel
	itob
	concat
	byte 0x0000000000000008
	concat
	byte 0x0000000000000003
	concat
	byte 0x00000000000000c8
	concat
	retsub

// getNumValidators()uint64
*abi_route_getNumValidators:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getNumValidators()uint64
	callsub getNumValidators
	itob
	concat
	log
	int 1
	return

// getNumValidators(): uint64
//
// Returns the current number of validators
getNumValidators:
	proto 0 1

	// contracts/validatorRegistry.algo.ts:285
	// return this.NumValidators.value;
	byte 0x6e756d56 // "numV"
	app_global_get
	retsub

// getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)
*abi_route_getValidatorConfig:
	// The ABI return prefix
	byte 0x151f7c75

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)
	callsub getValidatorConfig
	concat
	log
	int 1
	return

// getValidatorConfig(validatorID: ValidatorID): ValidatorConfig
getValidatorConfig:
	proto 1 1

	// contracts/validatorRegistry.algo.ts:290
	// return this.ValidatorList(validatorID).value.Config;
	int 0
	int 208
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	retsub

// getValidatorState(uint64)(uint16,uint64,uint64,uint64)
*abi_route_getValidatorState:
	// The ABI return prefix
	byte 0x151f7c75

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute getValidatorState(uint64)(uint16,uint64,uint64,uint64)
	callsub getValidatorState
	concat
	log
	int 1
	return

// getValidatorState(validatorID: ValidatorID): ValidatorCurState
getValidatorState:
	proto 1 1

	// contracts/validatorRegistry.algo.ts:295
	// return this.ValidatorList(validatorID).value.State;
	int 208 // headOffset
	int 26
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	retsub

// getValidatorOwnerAndManager(uint64)(address,address)
*abi_route_getValidatorOwnerAndManager:
	// The ABI return prefix
	byte 0x151f7c75

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute getValidatorOwnerAndManager(uint64)(address,address)
	callsub getValidatorOwnerAndManager
	concat
	log
	int 1
	return

// getValidatorOwnerAndManager(validatorID: ValidatorID): [Address, Address]
getValidatorOwnerAndManager:
	proto 1 1

	// contracts/validatorRegistry.algo.ts:300
	// return [
	//             this.ValidatorList(validatorID).value.Config.Owner,
	//             this.ValidatorList(validatorID).value.Config.Manager,
	//         ];
	int 8
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	int 40
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	concat
	retsub

// getPools(uint64)(uint64,uint16,uint64)[]
*abi_route_getPools:
	// The ABI return prefix
	byte 0x151f7c75

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute getPools(uint64)(uint64,uint16,uint64)[]
	callsub getPools
	dup
	len
	int 18
	/
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// getPools(validatorID: ValidatorID): PoolInfo[]
//
// Return list of all pools for this validator.
// @param {uint64} validatorID
// @return {PoolInfo[]} - array of pools
// Not callable from other contracts because >1K return but can be called w/ simulate which bumps log returns
getPools:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts/validatorRegistry.algo.ts:314
	// retData: PoolInfo[] = []
	byte 0x
	frame_bury 0 // retData: PoolInfo[]

	// contracts/validatorRegistry.algo.ts:315
	// poolSet = clone(this.ValidatorList(validatorID).value.Pools)
	int 234 // headOffset
	int 432
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	frame_bury 1 // poolSet: (uint64,uint16,uint64)[24]

	// contracts/validatorRegistry.algo.ts:316
	// for (let i = 0; i < poolSet.length; i += 1)
	int 0
	frame_bury 2 // i: uint64

*for_0:
	// contracts/validatorRegistry.algo.ts:316
	// i < poolSet.length
	frame_dig 2 // i: uint64
	int 24
	<
	bz *for_0_end

	// *if0_condition
	// contracts/validatorRegistry.algo.ts:317
	// poolSet[i].PoolAppID === 0
	frame_dig 1 // poolSet: (uint64,uint16,uint64)[24]
	frame_dig 2 // i: uint64
	int 18
	* // acc * typeLength
	int 0
	+
	int 8
	extract3
	btoi
	int 0
	==
	bz *if0_end

	// *if0_consequent
	b *for_0_end

*if0_end:
	// contracts/validatorRegistry.algo.ts:321
	// retData.push(poolSet[i])
	frame_dig 0 // retData: PoolInfo[]
	frame_dig 1 // poolSet: (uint64,uint16,uint64)[24]
	frame_dig 2 // i: uint64
	int 18
	* // acc * typeLength
	int 18
	extract3
	concat
	frame_bury 0 // retData: PoolInfo[]

*for_0_continue:
	// contracts/validatorRegistry.algo.ts:316
	// i += 1
	frame_dig 2 // i: uint64
	int 1
	+
	frame_bury 2 // i: uint64
	b *for_0

*for_0_end:
	// contracts/validatorRegistry.algo.ts:323
	// return retData;
	frame_dig 0 // retData: PoolInfo[]

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// getPoolAppID(uint64,uint64)uint64
*abi_route_getPoolAppID:
	// The ABI return prefix
	byte 0x151f7c75

	// poolID: uint64
	txna ApplicationArgs 2
	btoi

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute getPoolAppID(uint64,uint64)uint64
	callsub getPoolAppID
	itob
	concat
	log
	int 1
	return

// getPoolAppID(validatorID: uint64, poolID: uint64): uint64
getPoolAppID:
	proto 2 1

	// contracts/validatorRegistry.algo.ts:331
	// assert(poolID !== 0 && poolID <= this.ValidatorList(validatorID).value.Pools.length)
	frame_dig -2 // poolID: uint64
	int 0
	!=
	dup
	bz *skip_and0
	frame_dig -2 // poolID: uint64
	int 24
	<=
	&&

*skip_and0:
	assert

	// contracts/validatorRegistry.algo.ts:332
	// return this.ValidatorList(validatorID).value.Pools[poolID - 1].PoolAppID;
	int 234 // headOffset
	frame_dig -2 // poolID: uint64
	int 1
	-
	int 18
	* // acc * typeLength
	+
	int 0
	+
	int 8
	byte 0x76 // "v"
	frame_dig -1 // validatorID: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	retsub

// getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)
*abi_route_getPoolInfo:
	// The ABI return prefix
	byte 0x151f7c75

	// poolKey: (uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	int 24
	==
	assert

	// execute getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)
	callsub getPoolInfo
	concat
	log
	int 1
	return

// getPoolInfo(poolKey: ValidatorPoolKey): PoolInfo
getPoolInfo:
	proto 1 1

	// contracts/validatorRegistry.algo.ts:337
	// return this.ValidatorList(poolKey.ID).value.Pools[poolKey.PoolID - 1];
	int 234 // headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 18
	* // acc * typeLength
	+
	int 18
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	retsub

// getCurMaxStakePerPool(uint64)uint64
*abi_route_getCurMaxStakePerPool:
	// The ABI return prefix
	byte 0x151f7c75

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute getCurMaxStakePerPool(uint64)uint64
	callsub getCurMaxStakePerPool
	itob
	concat
	log
	int 1
	return

// getCurMaxStakePerPool(validatorID: ValidatorID): uint64
//
// Calculate the maximum stake per pool for a given validator.
// Normally this would be MaxAlgoPerPool, but it should also never go above MaxAllowedStake / NumPools so
// as pools are added the max allowed per pool can reduce.
//
// @param {ValidatorID} validatorID - The ID of the validator.
getCurMaxStakePerPool:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts/validatorRegistry.algo.ts:348
	// numPools = this.ValidatorList(validatorID).value.State.NumPools as uint64
	int 208
	int 2
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // numPools: uint64

	// contracts/validatorRegistry.algo.ts:349
	// hardMaxDividedBetweenPools = this.maxAllowedStake() / numPools
	callsub maxAllowedStake
	frame_dig 0 // numPools: uint64
	/
	frame_bury 1 // hardMaxDividedBetweenPools: uint64

	// contracts/validatorRegistry.algo.ts:350
	// maxPerPool: uint64 = this.ValidatorList(validatorID).value.Config.MaxAlgoPerPool
	int 183
	int 8
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 2 // maxPerPool: uint64

	// *if1_condition
	// contracts/validatorRegistry.algo.ts:351
	// maxPerPool === 0
	frame_dig 2 // maxPerPool: uint64
	int 0
	==
	bz *if1_end

	// *if1_consequent
	// contracts/validatorRegistry.algo.ts:352
	// maxPerPool = this.maxAlgoAllowedPerPool()
	callsub maxAlgoAllowedPerPool
	frame_bury 2 // maxPerPool: uint64

*if1_end:
	// *if2_condition
	// contracts/validatorRegistry.algo.ts:354
	// hardMaxDividedBetweenPools < maxPerPool
	frame_dig 1 // hardMaxDividedBetweenPools: uint64
	frame_dig 2 // maxPerPool: uint64
	<
	bz *if2_end

	// *if2_consequent
	// contracts/validatorRegistry.algo.ts:355
	// maxPerPool = hardMaxDividedBetweenPools
	frame_dig 1 // hardMaxDividedBetweenPools: uint64
	frame_bury 2 // maxPerPool: uint64

*if2_end:
	// contracts/validatorRegistry.algo.ts:357
	// return maxPerPool;
	frame_dig 2 // maxPerPool: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// doesStakerNeedToPayMBR(address)bool
*abi_route_doesStakerNeedToPayMBR:
	// The ABI return prefix
	byte 0x151f7c75

	// staker: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute doesStakerNeedToPayMBR(address)bool
	callsub doesStakerNeedToPayMBR
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// doesStakerNeedToPayMBR(staker: Address): boolean
//
// Helper callers can call w/ simulate to determine if 'AddStaker' MBR should be included w/ staking amount
// @param staker
doesStakerNeedToPayMBR:
	proto 1 1

	// contracts/validatorRegistry.algo.ts:366
	// return !this.StakerPoolSet(staker).exists;
	byte 0x737073 // "sps"
	frame_dig -1 // staker: Address
	concat
	box_len
	swap
	pop
	!
	retsub

// getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]
*abi_route_getStakedPoolsForAccount:
	// The ABI return prefix
	byte 0x151f7c75

	// staker: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]
	callsub getStakedPoolsForAccount
	dup
	len
	int 24
	/
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// getStakedPoolsForAccount(staker: Address): ValidatorPoolKey[]
//
// Retrieves the staked pools for an account.
//
// @param {Address} staker - The account to retrieve staked pools for.
// @return {ValidatorPoolKey[]} - The array of staked pools for the account.
getStakedPoolsForAccount:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// *if3_condition
	// contracts/validatorRegistry.algo.ts:376
	// !this.StakerPoolSet(staker).exists
	byte 0x737073 // "sps"
	frame_dig -1 // staker: Address
	concat
	box_len
	swap
	pop
	!
	bz *if3_end

	// *if3_consequent
	// contracts/validatorRegistry.algo.ts:377
	// return [];
	byte 0x
	retsub

*if3_end:
	// contracts/validatorRegistry.algo.ts:379
	// retData: ValidatorPoolKey[] = []
	byte 0x
	frame_bury 0 // retData: ValidatorPoolKey[]

	// contracts/validatorRegistry.algo.ts:380
	// poolSet = clone(this.StakerPoolSet(staker).value)
	byte 0x737073 // "sps"
	frame_dig -1 // staker: Address
	concat
	box_get
	assert
	frame_bury 1 // poolSet: (uint64,uint64,uint64)[6]

	// contracts/validatorRegistry.algo.ts:381
	// for (let i = 0; i < poolSet.length; i += 1)
	int 0
	frame_bury 2 // i: uint64

*for_1:
	// contracts/validatorRegistry.algo.ts:381
	// i < poolSet.length
	frame_dig 2 // i: uint64
	int 6
	<
	bz *for_1_end

	// *if4_condition
	// contracts/validatorRegistry.algo.ts:382
	// poolSet[i].ID !== 0
	frame_dig 1 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 2 // i: uint64
	int 24
	* // acc * typeLength
	int 0
	+
	int 8
	extract3
	btoi
	int 0
	!=
	bz *if4_end

	// *if4_consequent
	// contracts/validatorRegistry.algo.ts:383
	// retData.push(poolSet[i])
	frame_dig 0 // retData: ValidatorPoolKey[]
	frame_dig 1 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 2 // i: uint64
	int 24
	* // acc * typeLength
	int 24
	extract3
	concat
	frame_bury 0 // retData: ValidatorPoolKey[]

*if4_end:

*for_1_continue:
	// contracts/validatorRegistry.algo.ts:381
	// i += 1
	frame_dig 2 // i: uint64
	int 1
	+
	frame_bury 2 // i: uint64
	b *for_1

*for_1_end:
	// contracts/validatorRegistry.algo.ts:386
	// return retData;
	frame_dig 0 // retData: ValidatorPoolKey[]

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// getTokenPayoutRatio(uint64)(uint64[24],uint64)
*abi_route_getTokenPayoutRatio:
	// The ABI return prefix
	byte 0x151f7c75

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute getTokenPayoutRatio(uint64)(uint64[24],uint64)
	callsub getTokenPayoutRatio
	concat
	log
	int 1
	return

// getTokenPayoutRatio(validatorID: ValidatorID): PoolTokenPayoutRatio
//
// Retrieves the token payout ratio for a given validator - returning the pool ratios of whole so that token
// payouts across pools can be based on a stable snaphost of stake.
//
// @param {ValidatorID} validatorID - The ID of the validator.
// @return {PoolTokenPayoutRatio} - The token payout ratio for the validator.
getTokenPayoutRatio:
	proto 1 1

	// contracts/validatorRegistry.algo.ts:398
	// return this.ValidatorList(validatorID).value.TokenPayoutRatio;
	int 666 // headOffset
	int 200
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	retsub

// getNodePoolAssignments(uint64)((uint64[3])[8])
*abi_route_getNodePoolAssignments:
	// The ABI return prefix
	byte 0x151f7c75

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute getNodePoolAssignments(uint64)((uint64[3])[8])
	callsub getNodePoolAssignments
	concat
	log
	int 1
	return

// getNodePoolAssignments(validatorID: uint64): NodePoolAssignmentConfig
getNodePoolAssignments:
	proto 1 1

	// contracts/validatorRegistry.algo.ts:403
	// assert(this.ValidatorList(validatorID).exists)
	byte 0x76 // "v"
	frame_dig -1 // validatorID: uint64
	itob
	concat
	box_len
	swap
	pop
	assert

	// contracts/validatorRegistry.algo.ts:405
	// return this.ValidatorList(validatorID).value.NodePoolAssignments;
	int 866 // headOffset
	int 192
	byte 0x76 // "v"
	frame_dig -1 // validatorID: uint64
	itob
	concat
	cover 2
	box_extract
	retsub

// getNFDRegistryID()uint64
*abi_route_getNFDRegistryID:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getNFDRegistryID()uint64
	callsub getNFDRegistryID
	itob
	concat
	log
	int 1
	return

// getNFDRegistryID(): uint64
getNFDRegistryID:
	proto 0 1

	// contracts/validatorRegistry.algo.ts:409
	// return this.NFDRegistryAppID;
	pushint TMPL_NFDRegistryAppID
	retsub

// addValidator(pay,string,(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64
*abi_route_addValidator:
	// The ABI return prefix
	byte 0x151f7c75

	// config: (uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)
	txna ApplicationArgs 2
	dup
	len
	int 208
	==
	assert

	// nfdName: string
	txna ApplicationArgs 1
	extract 2 0

	// mbrPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute addValidator(pay,string,(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64
	callsub addValidator
	itob
	concat
	log
	int 1
	return

// addValidator(mbrPayment: PayTxn, nfdName: string, config: ValidatorConfig): uint64
//
// Adds a new validator
// @param mbrPayment payment from caller which covers mbr increase of new validator storage
// @param nfdName (Optional) Name of nfd (used as double-check against id specified in config)
// @param config ValidatorConfig struct
// @returns validator ID
addValidator:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/validatorRegistry.algo.ts:419
	// this.validateConfig(config)
	frame_dig -3 // config: ValidatorConfig
	callsub validateConfig

	// contracts/validatorRegistry.algo.ts:420
	// assert(config.Owner !== Address.zeroAddress)
	frame_dig -3 // config: ValidatorConfig
	extract 8 32
	global ZeroAddress
	!=
	assert

	// contracts/validatorRegistry.algo.ts:421
	// assert(config.Manager !== Address.zeroAddress)
	frame_dig -3 // config: ValidatorConfig
	extract 40 32
	global ZeroAddress
	!=
	assert

	// contracts/validatorRegistry.algo.ts:422
	// assert(this.txn.sender === config.Owner, 'sender must be owner to add new validator')
	txn Sender
	frame_dig -3 // config: ValidatorConfig
	extract 8 32
	==

	// sender must be owner to add new validator
	assert

	// contracts/validatorRegistry.algo.ts:424
	// verifyPayTxn(mbrPayment, { amount: this.getMbrAmounts().AddValidatorMbr })
	// verify amount
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Amount
	callsub getMbrAmounts
	extract 0 8
	btoi
	==
	assert

	// contracts/validatorRegistry.algo.ts:427
	// validatorID = this.NumValidators.value + 1
	byte 0x6e756d56 // "numV"
	app_global_get
	int 1
	+
	frame_bury 0 // validatorID: uint64

	// contracts/validatorRegistry.algo.ts:428
	// this.NumValidators.value = validatorID
	byte 0x6e756d56 // "numV"
	frame_dig 0 // validatorID: uint64
	app_global_put

	// contracts/validatorRegistry.algo.ts:430
	// this.ValidatorList(validatorID).create()
	byte 0x76 // "v"
	frame_dig 0 // validatorID: uint64
	itob
	concat
	int 1058
	box_create
	pop

	// contracts/validatorRegistry.algo.ts:431
	// this.ValidatorList(validatorID).value.Config = config
	int 0
	frame_dig -3 // config: ValidatorConfig
	byte 0x76 // "v"
	frame_dig 0 // validatorID: uint64
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:432
	// this.ValidatorList(validatorID).value.Config.ID = validatorID
	int 0
	frame_dig 0 // validatorID: uint64
	itob
	byte 0x76 // "v"
	frame_dig 0 // validatorID: uint64
	itob
	concat
	cover 2
	box_replace

	// *if5_condition
	// contracts/validatorRegistry.algo.ts:435
	// config.NFDForInfo !== 0
	frame_dig -3 // config: ValidatorConfig
	extract 72 8
	btoi
	int 0
	!=
	bz *if5_end

	// *if5_consequent
	// contracts/validatorRegistry.algo.ts:437
	// sendAppCall({
	//                 applicationID: AppID.fromUint64(this.NFDRegistryAppID),
	//                 applicationArgs: ['is_valid_nfd_appid', nfdName, itob(config.NFDForInfo)],
	//                 applications: [AppID.fromUint64(config.NFDForInfo)],
	//             })
	itxn_begin
	int appl
	itxn_field TypeEnum

	// contracts/validatorRegistry.algo.ts:438
	// applicationID: AppID.fromUint64(this.NFDRegistryAppID)
	pushint TMPL_NFDRegistryAppID
	itxn_field ApplicationID

	// contracts/validatorRegistry.algo.ts:439
	// applicationArgs: ['is_valid_nfd_appid', nfdName, itob(config.NFDForInfo)]
	byte 0x69735f76616c69645f6e66645f6170706964 // "is_valid_nfd_appid"
	itxn_field ApplicationArgs
	frame_dig -2 // nfdName: string
	itxn_field ApplicationArgs
	frame_dig -3 // config: ValidatorConfig
	extract 72 8
	btoi
	itob
	itxn_field ApplicationArgs

	// contracts/validatorRegistry.algo.ts:440
	// applications: [AppID.fromUint64(config.NFDForInfo)]
	frame_dig -3 // config: ValidatorConfig
	extract 72 8
	btoi
	itxn_field Applications

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/validatorRegistry.algo.ts:442
	// assert(btoi(this.itxn.lastLog) === 1, "provided NFD isn't valid")
	itxn LastLog
	btoi
	int 1
	==

	// provided NFD isn't valid
	assert

	// contracts/validatorRegistry.algo.ts:444
	// assert(
	//                 this.txn.sender === (AppID.fromUint64(config.NFDForInfo).globalState('i.owner.a') as Address),
	//                 'If specifying NFD, account adding validator must be owner'
	//             )
	txn Sender
	frame_dig -3 // config: ValidatorConfig
	extract 72 8
	btoi
	byte 0x692e6f776e65722e61 // "i.owner.a"
	app_global_get_ex
	assert
	==

	// If specifying NFD, account adding validator must be owner
	assert

*if5_end:
	// *if6_condition
	// contracts/validatorRegistry.algo.ts:449
	// config.EntryGatingType === GATING_TYPE_CREATED_BY_NFD_ADDRESSES
	frame_dig -3 // config: ValidatorConfig
	extract 80 1
	btoi
	int 3
	==
	bz *if6_end

	// *if6_consequent
	// contracts/validatorRegistry.algo.ts:451
	// assert(config.NFDForInfo !== 0, 'an NFD must be specified for the validator when gating by NFD addresses')
	frame_dig -3 // config: ValidatorConfig
	extract 72 8
	btoi
	int 0
	!=

	// an NFD must be specified for the validator when gating by NFD addresses
	assert

*if6_end:
	// *if7_condition
	// contracts/validatorRegistry.algo.ts:453
	// config.EntryGatingType === GATING_TYPE_SEGMENT_OF_NFD
	frame_dig -3 // config: ValidatorConfig
	extract 80 1
	btoi
	int 4
	==
	bz *if7_end

	// *if7_consequent
	// contracts/validatorRegistry.algo.ts:455
	// nfdRootAppID = extractUint64(config.EntryGatingValue, 0)
	frame_dig -3 // config: ValidatorConfig
	extract 81 32
	int 0
	extract_uint64
	frame_bury 1 // nfdRootAppID: uint64

	// contracts/validatorRegistry.algo.ts:456
	// assert(this.isNFDAppIDValid(nfdRootAppID), 'provided NFD App ID for gating must be valid NFD')
	frame_dig 1 // nfdRootAppID: uint64
	callsub isNFDAppIDValid

	// provided NFD App ID for gating must be valid NFD
	assert

*if7_end:
	// contracts/validatorRegistry.algo.ts:458
	// return validatorID;
	frame_dig 0 // validatorID: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// changeValidatorManager(uint64,address)void
*abi_route_changeValidatorManager:
	// manager: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute changeValidatorManager(uint64,address)void
	callsub changeValidatorManager
	int 1
	return

// changeValidatorManager(validatorID: ValidatorID, manager: Address): void
//
// Changes the Validator Manager for a specific Validator ID.
// [ ONLY OWNER CAN CHANGE ]
//
// @param {ValidatorID} validatorID - The ID of the validator to change the manager for.
// @param {Address} manager - The new manager address.
changeValidatorManager:
	proto 2 0

	// contracts/validatorRegistry.algo.ts:469
	// assert(this.txn.sender === this.ValidatorList(validatorID).value.Config.Owner)
	txn Sender
	int 8
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	==
	assert

	// contracts/validatorRegistry.algo.ts:470
	// this.ValidatorList(validatorID).value.Config.Manager = manager
	int 40
	frame_dig -2 // manager: Address
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace
	retsub

// changeValidatorSunsetInfo(uint64,uint64,uint64)void
*abi_route_changeValidatorSunsetInfo:
	// sunsettingTo: uint64
	txna ApplicationArgs 3
	btoi

	// sunsettingOn: uint64
	txna ApplicationArgs 2
	btoi

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute changeValidatorSunsetInfo(uint64,uint64,uint64)void
	callsub changeValidatorSunsetInfo
	int 1
	return

// changeValidatorSunsetInfo(validatorID: ValidatorID, sunsettingOn: uint64, sunsettingTo: ValidatorID): void
//
// Updates the sunset information for a given validator.
// [ ONLY OWNER CAN CHANGE ]
//
// @param {ValidatorID} validatorID - The ID of the validator to update.
// @param {uint64} sunsettingOn - The new sunset timestamp.
// @param {uint64} sunsettingTo - The new sunset to validator ID.
changeValidatorSunsetInfo:
	proto 3 0

	// contracts/validatorRegistry.algo.ts:482
	// assert(this.txn.sender === this.ValidatorList(validatorID).value.Config.Owner)
	txn Sender
	int 8
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	==
	assert

	// contracts/validatorRegistry.algo.ts:483
	// this.ValidatorList(validatorID).value.Config.SunsettingOn = sunsettingOn
	int 192
	frame_dig -2 // sunsettingOn: uint64
	itob
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:484
	// this.ValidatorList(validatorID).value.Config.SunsettingTo = sunsettingTo
	int 200
	frame_dig -3 // sunsettingTo: ValidatorID
	itob
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace
	retsub

// changeValidatorNFD(uint64,uint64,string)void
*abi_route_changeValidatorNFD:
	// nfdName: string
	txna ApplicationArgs 3
	extract 2 0

	// nfdAppID: uint64
	txna ApplicationArgs 2
	btoi

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute changeValidatorNFD(uint64,uint64,string)void
	callsub changeValidatorNFD
	int 1
	return

// changeValidatorNFD(validatorID: ValidatorID, nfdAppID: uint64, nfdName: string): void
//
// Changes the NFD for a validator in the ValidatorList contract.
// [ ONLY OWNER OR MANAGER CAN CHANGE ]
//
// @param {ValidatorID} validatorID - The ID of the validator to update.
// @param {uint64} nfdAppID - The application ID of the NFD to assign to the validator.
// @param {string} nfdName - The name of the NFD (which must match)
changeValidatorNFD:
	proto 3 0

	// contracts/validatorRegistry.algo.ts:497
	// assert(
	//             this.txn.sender === this.ValidatorList(validatorID).value.Config.Owner ||
	//                 this.txn.sender === this.ValidatorList(validatorID).value.Config.Manager
	//         )
	txn Sender
	int 8
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	==
	dup
	bnz *skip_or0
	txn Sender
	int 40
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	==
	||

*skip_or0:
	assert

	// contracts/validatorRegistry.algo.ts:502
	// sendAppCall({
	//             applicationID: AppID.fromUint64(this.NFDRegistryAppID),
	//             applicationArgs: ['is_valid_nfd_appid', nfdName, itob(nfdAppID)],
	//             applications: [AppID.fromUint64(nfdAppID)],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum

	// contracts/validatorRegistry.algo.ts:503
	// applicationID: AppID.fromUint64(this.NFDRegistryAppID)
	pushint TMPL_NFDRegistryAppID
	itxn_field ApplicationID

	// contracts/validatorRegistry.algo.ts:504
	// applicationArgs: ['is_valid_nfd_appid', nfdName, itob(nfdAppID)]
	byte 0x69735f76616c69645f6e66645f6170706964 // "is_valid_nfd_appid"
	itxn_field ApplicationArgs
	frame_dig -3 // nfdName: string
	itxn_field ApplicationArgs
	frame_dig -2 // nfdAppID: uint64
	itob
	itxn_field ApplicationArgs

	// contracts/validatorRegistry.algo.ts:505
	// applications: [AppID.fromUint64(nfdAppID)]
	frame_dig -2 // nfdAppID: uint64
	itxn_field Applications

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/validatorRegistry.algo.ts:508
	// assert(
	//             this.txn.sender === (AppID.fromUint64(nfdAppID).globalState('i.owner.a') as Address),
	//             'If specifying NFD, account adding validator must be owner'
	//         )
	txn Sender
	frame_dig -2 // nfdAppID: uint64
	byte 0x692e6f776e65722e61 // "i.owner.a"
	app_global_get_ex
	assert
	==

	// If specifying NFD, account adding validator must be owner
	assert

	// contracts/validatorRegistry.algo.ts:512
	// this.ValidatorList(validatorID).value.Config.NFDForInfo = nfdAppID
	int 72
	frame_dig -2 // nfdAppID: uint64
	itob
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace
	retsub

// changeValidatorCommissionAddress(uint64,address)void
*abi_route_changeValidatorCommissionAddress:
	// commissionAddress: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute changeValidatorCommissionAddress(uint64,address)void
	callsub changeValidatorCommissionAddress
	int 1
	return

// changeValidatorCommissionAddress(validatorID: ValidatorID, commissionAddress: Address): void
//
// Change the commission address that validator rewards are sent to.
// [ ONLY OWNER CAN CHANGE ]
changeValidatorCommissionAddress:
	proto 2 0

	// contracts/validatorRegistry.algo.ts:520
	// assert(this.txn.sender === this.ValidatorList(validatorID).value.Config.Owner)
	txn Sender
	int 8
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	==
	assert

	// contracts/validatorRegistry.algo.ts:521
	// assert(commissionAddress !== Address.zeroAddress)
	frame_dig -2 // commissionAddress: Address
	global ZeroAddress
	!=
	assert

	// contracts/validatorRegistry.algo.ts:522
	// this.ValidatorList(validatorID).value.Config.ValidatorCommissionAddress = commissionAddress
	int 143
	frame_dig -2 // commissionAddress: Address
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace
	retsub

// changeValidatorRewardInfo(uint64,uint8,byte[32],uint64,uint64)void
*abi_route_changeValidatorRewardInfo:
	// RewardPerPayout: uint64
	txna ApplicationArgs 5
	btoi

	// GatingAssetMinBalance: uint64
	txna ApplicationArgs 4
	btoi

	// EntryGatingValue: byte[32]
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// EntryGatingType: uint8
	txna ApplicationArgs 2
	dup
	len
	int 1
	==
	assert
	btoi

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute changeValidatorRewardInfo(uint64,uint8,byte[32],uint64,uint64)void
	callsub changeValidatorRewardInfo
	int 1
	return

// changeValidatorRewardInfo(validatorID: ValidatorID, EntryGatingType: uint8, EntryGatingValue: bytes32, GatingAssetMinBalance: uint64, RewardPerPayout: uint64): void
//
// Allow the additional rewards (gating entry, additional token rewards) information be changed at will.
// [ ONLY OWNER CAN CHANGE ]
changeValidatorRewardInfo:
	proto 5 0

	// contracts/validatorRegistry.algo.ts:536
	// assert(this.txn.sender === this.ValidatorList(validatorID).value.Config.Owner)
	txn Sender
	int 8
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	==
	assert

	// contracts/validatorRegistry.algo.ts:538
	// this.ValidatorList(validatorID).value.Config.EntryGatingType = EntryGatingType
	int 80
	frame_dig -2 // EntryGatingType: uint8
	itob
	extract 7 1
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:539
	// this.ValidatorList(validatorID).value.Config.EntryGatingValue = EntryGatingValue
	int 81
	frame_dig -3 // EntryGatingValue: bytes32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:540
	// this.ValidatorList(validatorID).value.Config.GatingAssetMinBalance = GatingAssetMinBalance
	int 113
	frame_dig -4 // GatingAssetMinBalance: uint64
	itob
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:541
	// this.ValidatorList(validatorID).value.Config.RewardPerPayout = RewardPerPayout
	int 129
	frame_dig -5 // RewardPerPayout: uint64
	itob
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace
	retsub

// addPool(pay,uint64,uint64)(uint64,uint64,uint64)
*abi_route_addPool:
	// The ABI return prefix
	byte 0x151f7c75

	// nodeNum: uint64
	txna ApplicationArgs 2
	btoi

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// mbrPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute addPool(pay,uint64,uint64)(uint64,uint64,uint64)
	callsub addPool
	concat
	log
	int 1
	return

// addPool(mbrPayment: PayTxn, validatorID: ValidatorID, nodeNum: uint64): ValidatorPoolKey
//
// Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.
// The caller must pay the cost of the validators MBR increase as well as the MBR that will be needed for the pool itself.
//
// [ ONLY OWNER OR MANAGER CAN call ]
// @param {PayTxn} mbrPayment payment from caller which covers mbr increase of adding a new pool
// @param {uint64} validatorID is ID of validator to pool to (must be owner or manager)
// @param {uint64} nodeNum is node number to add to
// @returns {ValidatorPoolKey} pool key to created pool
addPool:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/validatorRegistry.algo.ts:557
	// assert(
	//             this.txn.sender === this.ValidatorList(validatorID).value.Config.Owner ||
	//                 this.txn.sender === this.ValidatorList(validatorID).value.Config.Manager
	//         )
	txn Sender
	int 8
	int 32
	byte 0x76 // "v"
	frame_dig -2 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	==
	dup
	bnz *skip_or1
	txn Sender
	int 40
	int 32
	byte 0x76 // "v"
	frame_dig -2 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	==
	||

*skip_or1:
	assert

	// contracts/validatorRegistry.algo.ts:563
	// verifyPayTxn(mbrPayment, { amount: this.getMbrAmounts().AddPoolMbr, receiver: this.app.address })
	// verify amount
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Amount
	callsub getMbrAmounts
	extract 8 8
	btoi
	==
	assert

	// verify receiver
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// contracts/validatorRegistry.algo.ts:565
	// assert(this.ValidatorList(validatorID).exists)
	byte 0x76 // "v"
	frame_dig -2 // validatorID: ValidatorID
	itob
	concat
	box_len
	swap
	pop
	assert

	// contracts/validatorRegistry.algo.ts:567
	// numPools: uint64 = this.ValidatorList(validatorID).value.State.NumPools as uint64
	int 208
	int 2
	byte 0x76 // "v"
	frame_dig -2 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // numPools: uint64

	// *if8_condition
	// contracts/validatorRegistry.algo.ts:568
	// (numPools as uint64) >= MAX_POOLS
	frame_dig 0 // numPools: uint64
	int 24
	>=
	bz *if8_end

	// *if8_consequent
	err // 'already at max pool size'

*if8_end:
	// contracts/validatorRegistry.algo.ts:571
	// numPools += 1
	frame_dig 0 // numPools: uint64
	int 1
	+
	frame_bury 0 // numPools: uint64

	// contracts/validatorRegistry.algo.ts:574
	// sendAppCall({
	//             onCompletion: OnCompletion.NoOp,
	//             approvalProgram: AppID.fromUint64(this.StakingPoolTemplateAppID.value).approvalProgram,
	//             clearStateProgram: AppID.fromUint64(this.StakingPoolTemplateAppID.value).clearStateProgram,
	//             globalNumUint: AppID.fromUint64(this.StakingPoolTemplateAppID.value).globalNumUint,
	//             globalNumByteSlice: AppID.fromUint64(this.StakingPoolTemplateAppID.value).globalNumByteSlice,
	//             extraProgramPages: AppID.fromUint64(this.StakingPoolTemplateAppID.value).extraProgramPages,
	//             applicationArgs: [
	//                 // creatingContractID, validatorID, poolID, minEntryStake
	//                 method('createApplication(uint64,uint64,uint64,uint64)void'),
	//                 itob(this.app.id),
	//                 itob(validatorID),
	//                 itob(numPools as uint64),
	//                 itob(this.ValidatorList(validatorID).value.Config.MinEntryStake),
	//             ],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum

	// contracts/validatorRegistry.algo.ts:575
	// onCompletion: OnCompletion.NoOp
	int 0 // NoOp
	itxn_field OnCompletion

	// contracts/validatorRegistry.algo.ts:576
	// approvalProgram: AppID.fromUint64(this.StakingPoolTemplateAppID.value).approvalProgram
	byte 0x706f6f6c54656d706c6174654170704944 // "poolTemplateAppID"
	app_global_get
	app_params_get AppApprovalProgram
	pop
	itxn_field ApprovalProgram

	// contracts/validatorRegistry.algo.ts:577
	// clearStateProgram: AppID.fromUint64(this.StakingPoolTemplateAppID.value).clearStateProgram
	byte 0x706f6f6c54656d706c6174654170704944 // "poolTemplateAppID"
	app_global_get
	app_params_get AppClearStateProgram
	pop
	itxn_field ClearStateProgram

	// contracts/validatorRegistry.algo.ts:578
	// globalNumUint: AppID.fromUint64(this.StakingPoolTemplateAppID.value).globalNumUint
	byte 0x706f6f6c54656d706c6174654170704944 // "poolTemplateAppID"
	app_global_get
	app_params_get AppGlobalNumUint
	pop
	itxn_field GlobalNumUint

	// contracts/validatorRegistry.algo.ts:579
	// globalNumByteSlice: AppID.fromUint64(this.StakingPoolTemplateAppID.value).globalNumByteSlice
	byte 0x706f6f6c54656d706c6174654170704944 // "poolTemplateAppID"
	app_global_get
	app_params_get AppGlobalNumByteSlice
	pop
	itxn_field GlobalNumByteSlice

	// contracts/validatorRegistry.algo.ts:580
	// extraProgramPages: AppID.fromUint64(this.StakingPoolTemplateAppID.value).extraProgramPages
	byte 0x706f6f6c54656d706c6174654170704944 // "poolTemplateAppID"
	app_global_get
	app_params_get AppExtraProgramPages
	pop
	itxn_field ExtraProgramPages

	// contracts/validatorRegistry.algo.ts:581
	// applicationArgs: [
	//                 // creatingContractID, validatorID, poolID, minEntryStake
	//                 method('createApplication(uint64,uint64,uint64,uint64)void'),
	//                 itob(this.app.id),
	//                 itob(validatorID),
	//                 itob(numPools as uint64),
	//                 itob(this.ValidatorList(validatorID).value.Config.MinEntryStake),
	//             ]
	method "createApplication(uint64,uint64,uint64,uint64)void"
	itxn_field ApplicationArgs
	txna Applications 0
	itob
	itxn_field ApplicationArgs
	frame_dig -2 // validatorID: ValidatorID
	itob
	itxn_field ApplicationArgs
	frame_dig 0 // numPools: uint64
	itob
	itxn_field ApplicationArgs
	int 175
	int 8
	byte 0x76 // "v"
	frame_dig -2 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/validatorRegistry.algo.ts:591
	// this.ValidatorList(validatorID).value.State.NumPools = numPools as uint16
	int 208
	frame_dig 0 // numPools: uint64
	itob
	extract 6 2
	byte 0x76 // "v"
	frame_dig -2 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:594
	// this.ValidatorList(validatorID).value.Pools[numPools - 1].PoolAppID = this.itxn.createdApplicationID.id
	int 234 // headOffset
	frame_dig 0 // numPools: uint64
	int 1
	-
	int 18
	* // acc * typeLength
	+
	int 0
	+
	itxn CreatedApplicationID
	itob
	byte 0x76 // "v"
	frame_dig -2 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:595
	// this.addPoolToNode(validatorID, this.itxn.createdApplicationID.id, nodeNum)
	frame_dig -3 // nodeNum: uint64
	itxn CreatedApplicationID
	frame_dig -2 // validatorID: ValidatorID
	callsub addPoolToNode

	// contracts/validatorRegistry.algo.ts:598
	// return { ID: validatorID, PoolID: numPools as uint64, PoolAppID: this.itxn!.createdApplicationID.id };
	frame_dig -2 // validatorID: ValidatorID
	itob
	frame_dig 0 // numPools: uint64
	itob
	concat
	itxn CreatedApplicationID
	itob
	concat

	// set the subroutine return value
	frame_bury 0
	retsub

// addStake(pay,uint64,uint64)(uint64,uint64,uint64)
*abi_route_addStake:
	// The ABI return prefix
	byte 0x151f7c75

	// valueToVerify: uint64
	txna ApplicationArgs 2
	btoi

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// stakedAmountPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute addStake(pay,uint64,uint64)(uint64,uint64,uint64)
	callsub addStake
	concat
	log
	int 1
	return

// addStake(stakedAmountPayment: PayTxn, validatorID: ValidatorID, valueToVerify: uint64): ValidatorPoolKey
//
// Adds stake to a validator pool.
//
// @param {PayTxn} stakedAmountPayment - payment coming from staker to place into a pool
// @param {ValidatorID} validatorID - The ID of the validator.
// @param {uint64} valueToVerify - only if validator has gating to enter - this is asset id or nfd id that corresponds to gating.
// Txn sender is factored in as well if that is part of gating.
// * @returns {ValidatorPoolKey} - The key of the validator pool.
addStake:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 5

	// contracts/validatorRegistry.algo.ts:611
	// assert(this.ValidatorList(validatorID).exists)
	byte 0x76 // "v"
	frame_dig -2 // validatorID: ValidatorID
	itob
	concat
	box_len
	swap
	pop
	assert

	// contracts/validatorRegistry.algo.ts:613
	// staker = this.txn.sender
	txn Sender
	frame_bury 0 // staker: address

	// contracts/validatorRegistry.algo.ts:617
	// verifyPayTxn(stakedAmountPayment, {
	//             sender: staker,
	//             receiver: this.app.address,
	//         })
	// verify sender
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Sender
	frame_dig 0 // staker: address
	==
	assert

	// verify receiver
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// contracts/validatorRegistry.algo.ts:624
	// assert(
	//             this.ValidatorList(validatorID).value.State.TotalAlgoStaked < this.maxAllowedStake(),
	//             'total staked for all of a validators pools may not exceed hard cap'
	//         )
	int 218
	int 8
	byte 0x76 // "v"
	frame_dig -2 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	callsub maxAllowedStake
	<

	// total staked for all of a validators pools may not exceed hard cap
	assert

	// contracts/validatorRegistry.algo.ts:631
	// this.doesStakerMeetGating(validatorID, valueToVerify)
	frame_dig -3 // valueToVerify: uint64
	frame_dig -2 // validatorID: ValidatorID
	callsub doesStakerMeetGating

	// contracts/validatorRegistry.algo.ts:633
	// realAmount = stakedAmountPayment.amount
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	frame_bury 1 // realAmount: uint64

	// contracts/validatorRegistry.algo.ts:634
	// mbrAmtLeftBehind: uint64 = 0
	int 0
	frame_bury 2 // mbrAmtLeftBehind: uint64

	// *if9_condition
	// contracts/validatorRegistry.algo.ts:636
	// !this.StakerPoolSet(staker).exists
	byte 0x737073 // "sps"
	frame_dig 0 // staker: address
	concat
	box_len
	swap
	pop
	!
	bz *if9_end

	// *if9_consequent
	// contracts/validatorRegistry.algo.ts:639
	// mbrAmtLeftBehind = this.getMbrAmounts().AddStakerMbr
	callsub getMbrAmounts
	extract 24 8
	btoi
	frame_bury 2 // mbrAmtLeftBehind: uint64

	// contracts/validatorRegistry.algo.ts:640
	// realAmount -= mbrAmtLeftBehind
	frame_dig 1 // realAmount: uint64
	frame_dig 2 // mbrAmtLeftBehind: uint64
	-
	frame_bury 1 // realAmount: uint64

	// contracts/validatorRegistry.algo.ts:641
	// this.StakerPoolSet(staker).create()
	byte 0x737073 // "sps"
	frame_dig 0 // staker: address
	concat
	int 144
	box_create
	pop

*if9_end:
	// contracts/validatorRegistry.algo.ts:645
	// findRet = this.findPoolForStaker(validatorID, staker, realAmount)
	frame_dig 1 // realAmount: uint64
	frame_dig 0 // staker: address
	frame_dig -2 // validatorID: ValidatorID
	callsub findPoolForStaker
	frame_bury 3 // findRet: ((uint64,uint64,uint64),bool,bool)

	// contracts/validatorRegistry.algo.ts:646
	// poolKey = findRet[0]
	// contracts/validatorRegistry.algo.ts:647
	// isNewStakerToValidator = findRet[1]
	frame_dig 3 // findRet: ((uint64,uint64,uint64),bool,bool)
	store 255 // full array
	load 255 // full array
	int 192
	getbit
	frame_bury 4 // isNewStakerToValidator: bool

	// contracts/validatorRegistry.algo.ts:648
	// isNewStakerToProtocol = findRet[2]
	frame_dig 3 // findRet: ((uint64,uint64,uint64),bool,bool)
	store 255 // full array
	load 255 // full array
	int 193
	getbit
	frame_bury 5 // isNewStakerToProtocol: bool

	// *if10_condition
	// contracts/validatorRegistry.algo.ts:649
	// poolKey.PoolID === 0
	frame_dig 3 // findRet: ((uint64,uint64,uint64),bool,bool)
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	int 0
	==
	bz *if10_end

	// *if10_consequent
	err // 'No pool available with free stake.  Validator needs to add another pool'

*if10_end:
	// contracts/validatorRegistry.algo.ts:654
	// this.updateStakerPoolSet(staker, poolKey)
	frame_dig 3 // findRet: ((uint64,uint64,uint64),bool,bool)
	store 255 // full array
	load 255 // full array
	extract 0 24
	frame_dig 0 // staker: address
	callsub updateStakerPoolSet

	// contracts/validatorRegistry.algo.ts:657
	// this.callPoolAddStake(
	//             stakedAmountPayment,
	//             poolKey,
	//             mbrAmtLeftBehind,
	//             isNewStakerToValidator,
	//             isNewStakerToProtocol
	//         )
	frame_dig 5 // isNewStakerToProtocol: bool
	frame_dig 4 // isNewStakerToValidator: bool
	frame_dig 2 // mbrAmtLeftBehind: uint64
	frame_dig 3 // findRet: ((uint64,uint64,uint64),bool,bool)
	store 255 // full array
	load 255 // full array
	extract 0 24
	frame_dig -1 // stakedAmountPayment: PayTxn
	callsub callPoolAddStake

	// contracts/validatorRegistry.algo.ts:664
	// return poolKey;
	frame_dig 3 // findRet: ((uint64,uint64,uint64),bool,bool)
	store 255 // full array
	load 255 // full array
	extract 0 24

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 5
	retsub

// verifyPoolKeyCaller(poolKey: ValidatorPoolKey): void
verifyPoolKeyCaller:
	proto 1 0

	// contracts/validatorRegistry.algo.ts:671
	// assert(this.ValidatorList(poolKey.ID).exists)
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	box_len
	swap
	pop
	assert

	// contracts/validatorRegistry.algo.ts:672
	// assert((poolKey.PoolID as uint64) < 2 ** 16)
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 2
	int 16
	exp
	<
	assert

	// contracts/validatorRegistry.algo.ts:673
	// assert(poolKey.PoolID > 0 && (poolKey.PoolID as uint16) <= this.ValidatorList(poolKey.ID).value.State.NumPools)
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 0
	>
	dup
	bz *skip_and1
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 208
	int 2
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	<=
	&&

*skip_and1:
	assert

	// contracts/validatorRegistry.algo.ts:676
	// assert(
	//             poolKey.PoolAppID === this.ValidatorList(poolKey.ID).value.Pools[poolKey.PoolID - 1].PoolAppID,
	//             "The passed in app id doesn't match the passed in ids"
	//         )
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 16 8
	btoi
	int 234 // headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 18
	* // acc * typeLength
	+
	int 0
	+
	int 8
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	==

	// The passed in app id doesn't match the passed in ids
	assert

	// contracts/validatorRegistry.algo.ts:681
	// assert(this.txn.sender === AppID.fromUint64(poolKey.PoolAppID).address)
	txn Sender
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 16 8
	btoi
	app_params_get AppAddress
	pop
	==
	assert

	// contracts/validatorRegistry.algo.ts:683
	// assert(poolKey.ID === (AppID.fromUint64(poolKey.PoolAppID).globalState('validatorID') as uint64))
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 16 8
	btoi
	byte 0x76616c696461746f724944 // "validatorID"
	app_global_get_ex
	assert
	==
	assert

	// contracts/validatorRegistry.algo.ts:684
	// assert(poolKey.PoolID === (AppID.fromUint64(poolKey.PoolAppID).globalState('poolID') as uint64))
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 16 8
	btoi
	byte 0x706f6f6c4944 // "poolID"
	app_global_get_ex
	assert
	==
	assert
	retsub

// setTokenPayoutRatio(uint64)(uint64[24],uint64)
*abi_route_setTokenPayoutRatio:
	// The ABI return prefix
	byte 0x151f7c75

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute setTokenPayoutRatio(uint64)(uint64[24],uint64)
	callsub setTokenPayoutRatio
	concat
	log
	int 1
	return

// setTokenPayoutRatio(validatorID: ValidatorID): PoolTokenPayoutRatio
//
// setTokenPayoutRatio is called by Staking Pool # 1 (ONLY) to ask the validator (us) to calculate the ratios
// of stake in the pools for subsequent token payouts (ie: 2 pools, '100' algo total staked, 60 in pool 1, and 40
// in pool 2.  This is done so we have a stable snapshot of stake - taken once per epoch - only triggered by
// pool 1 doing payout.  Pools other than 1 doing payout call pool 1 to ask it do it first.
// It would be 60/40% in the PoolPctOfWhole values.  The token reward payouts then use these values instead of
// their 'current' stake which changes as part of the payouts themselves (and people could be changing stake
// during the epoch updates across pools)
//
// Multiple pools will call us via pool 1 (pool2->pool1->valdiator, etc.) so don't assert on pool1 calling multiple
// times in same epoch.  Just return.
//
// @param validatorID - validator id (and thus pool) calling us.  Verified so that sender MUST be pool 1 of this validator.
// @returns PoolTokenPayoutRatio - the finished ratio data
setTokenPayoutRatio:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 8

	// contracts/validatorRegistry.algo.ts:704
	// pool1AppID = this.ValidatorList(validatorID).value.Pools[0].PoolAppID
	int 234
	int 8
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // pool1AppID: uint64

	// contracts/validatorRegistry.algo.ts:705
	// assert(pool1AppID !== 0)
	frame_dig 0 // pool1AppID: uint64
	int 0
	!=
	assert

	// *if11_condition
	// contracts/validatorRegistry.algo.ts:707
	// this.txn.sender !== AppID.fromUint64(pool1AppID).address
	txn Sender
	frame_dig 0 // pool1AppID: uint64
	app_params_get AppAddress
	pop
	!=
	bz *if11_end

	// *if11_consequent
	// contracts/validatorRegistry.algo.ts:708
	// return this.ValidatorList(validatorID).value.TokenPayoutRatio;
	int 666 // headOffset
	int 200
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract

	// set the subroutine return value
	frame_bury 0
	retsub

*if11_end:
	// contracts/validatorRegistry.algo.ts:713
	// curTime = globals.latestTimestamp
	global LatestTimestamp
	frame_bury 1 // curTime: uint64

	// contracts/validatorRegistry.algo.ts:714
	// lastPayoutUpdate = this.ValidatorList(validatorID).value.TokenPayoutRatio.UpdatedForPayout
	int 858
	int 8
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 2 // lastPayoutUpdate: uint64

	// *if12_condition
	// contracts/validatorRegistry.algo.ts:715
	// lastPayoutUpdate !== 0
	frame_dig 2 // lastPayoutUpdate: uint64
	int 0
	!=
	bz *if12_end

	// *if12_consequent
	// *if13_condition
	// contracts/validatorRegistry.algo.ts:717
	// (AppID.fromUint64(pool1AppID).globalState('lastPayout') as uint64) === lastPayoutUpdate
	frame_dig 0 // pool1AppID: uint64
	byte 0x6c6173745061796f7574 // "lastPayout"
	app_global_get_ex
	assert
	frame_dig 2 // lastPayoutUpdate: uint64
	==
	bz *if13_end

	// *if13_consequent
	// contracts/validatorRegistry.algo.ts:718
	// return this.ValidatorList(validatorID).value.TokenPayoutRatio;
	int 666 // headOffset
	int 200
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

*if13_end:
	// contracts/validatorRegistry.algo.ts:720
	// secsSinceLastPayout = curTime - lastPayoutUpdate
	frame_dig 1 // curTime: uint64
	frame_dig 2 // lastPayoutUpdate: uint64
	-
	frame_bury 3 // secsSinceLastPayout: uint64

	// contracts/validatorRegistry.algo.ts:721
	// epochInSecs = (this.ValidatorList(validatorID).value.Config.PayoutEveryXMins as uint64) * 60
	int 137
	int 2
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	int 60
	*
	frame_bury 4 // epochInSecs: uint64

	// *if14_condition
	// contracts/validatorRegistry.algo.ts:723
	// secsSinceLastPayout < epochInSecs
	frame_dig 3 // secsSinceLastPayout: uint64
	frame_dig 4 // epochInSecs: uint64
	<
	bz *if14_end

	// *if14_consequent
	// contracts/validatorRegistry.algo.ts:724
	// return this.ValidatorList(validatorID).value.TokenPayoutRatio;
	int 666 // headOffset
	int 200
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 4
	retsub

*if14_end:

*if12_end:
	// contracts/validatorRegistry.algo.ts:727
	// this.ValidatorList(validatorID).value.TokenPayoutRatio.UpdatedForPayout = curTime
	int 858
	frame_dig 1 // curTime: uint64
	itob
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:729
	// curNumPools = this.ValidatorList(validatorID).value.State.NumPools as uint64
	int 208
	int 2
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 5 // curNumPools: uint64

	// contracts/validatorRegistry.algo.ts:730
	// totalStakeForValidator = this.ValidatorList(validatorID).value.State.TotalAlgoStaked
	int 218
	int 8
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 6 // totalStakeForValidator: uint64

	// contracts/validatorRegistry.algo.ts:731
	// for (let i = 0; i < curNumPools; i += 1)
	int 0
	frame_bury 7 // i: uint64

*for_2:
	// contracts/validatorRegistry.algo.ts:731
	// i < curNumPools
	frame_dig 7 // i: uint64
	frame_dig 5 // curNumPools: uint64
	<
	bz *for_2_end

	// contracts/validatorRegistry.algo.ts:736
	// ourPoolPctOfWhole = wideRatio(
	//                 [this.ValidatorList(validatorID).value.Pools[i].TotalAlgoStaked, 1_000_000],
	//                 [totalStakeForValidator]
	//             )
	int 234 // headOffset
	frame_dig 7 // i: uint64
	int 18
	* // acc * typeLength
	+
	int 10 // headOffset
	+
	int 8
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	int 1_000_000
	mulw
	int 0
	frame_dig 6 // totalStakeForValidator: uint64
	divmodw
	pop
	pop
	swap
	!
	assert
	frame_bury 8 // ourPoolPctOfWhole: uint64

	// contracts/validatorRegistry.algo.ts:740
	// this.ValidatorList(validatorID).value.TokenPayoutRatio.PoolPctOfWhole[i] = ourPoolPctOfWhole
	int 666
	frame_dig 7 // i: uint64
	int 8
	* // acc * typeLength
	+
	frame_dig 8 // ourPoolPctOfWhole: uint64
	itob
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace

*for_2_continue:
	// contracts/validatorRegistry.algo.ts:731
	// i += 1
	frame_dig 7 // i: uint64
	int 1
	+
	frame_bury 7 // i: uint64
	b *for_2

*for_2_end:
	// contracts/validatorRegistry.algo.ts:742
	// return this.ValidatorList(validatorID).value.TokenPayoutRatio;
	int 666 // headOffset
	int 200
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 8
	retsub

// stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64)void
*abi_route_stakeUpdatedViaRewards:
	// rewardTokenAmountReserved: uint64
	txna ApplicationArgs 3
	btoi

	// algoToAdd: uint64
	txna ApplicationArgs 2
	btoi

	// poolKey: (uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	int 24
	==
	assert

	// execute stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64)void
	callsub stakeUpdatedViaRewards
	int 1
	return

// stakeUpdatedViaRewards(poolKey: ValidatorPoolKey, algoToAdd: uint64, rewardTokenAmountReserved: uint64): void
//
// stakeUpdatedViaRewards is called by Staking Pools to inform the validator (us) that a particular amount of total
// stake has been added to the specified pool.  This is used to update the stats we have in our PoolInfo storage.
// The calling App ID is validated against our pool list as well.
// @param {ValidatorPoolKey} poolKey - ValidatorPoolKey type
// @param {uint64} algoToAdd - amount this validator's total stake increased via rewards
// @param {uint64} rewardTokenAmountReserved - amount this validator's total stake increased via rewards (that should be
// seen as 'accounted for/pending spent')
stakeUpdatedViaRewards:
	proto 3 0

	// contracts/validatorRegistry.algo.ts:755
	// this.verifyPoolKeyCaller(poolKey)
	frame_dig -1 // poolKey: ValidatorPoolKey
	callsub verifyPoolKeyCaller

	// contracts/validatorRegistry.algo.ts:758
	// this.ValidatorList(poolKey.ID).value.Pools[poolKey.PoolID - 1].TotalAlgoStaked += algoToAdd
	int 234 // headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 18
	* // acc * typeLength
	+
	int 10 // headOffset
	+
	int 234 // headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 18
	* // acc * typeLength
	+
	int 10 // headOffset
	+
	int 8
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -2 // algoToAdd: uint64
	+
	itob
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:759
	// this.ValidatorList(poolKey.ID).value.State.TotalAlgoStaked += algoToAdd
	int 218
	dup
	int 8
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -2 // algoToAdd: uint64
	+
	itob
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:760
	// this.ValidatorList(poolKey.ID).value.State.RewardTokenHeldBack += rewardTokenAmountReserved
	int 226
	dup
	int 8
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -3 // rewardTokenAmountReserved: uint64
	+
	itob
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:762
	// this.TotalAlgoStaked.value += algoToAdd
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig -2 // algoToAdd: uint64
	+
	byte 0x7374616b6564 // "staked"
	swap
	app_global_put

	// contracts/validatorRegistry.algo.ts:765
	// this.reverifyNFDOwnership(poolKey.ID)
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	callsub reverifyNFDOwnership
	retsub

// stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void
*abi_route_stakeRemoved:
	// stakerRemoved: bool
	txna ApplicationArgs 5
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// rewardRemoved: uint64
	txna ApplicationArgs 4
	btoi

	// amountRemoved: uint64
	txna ApplicationArgs 3
	btoi

	// staker: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// poolKey: (uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	int 24
	==
	assert

	// execute stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void
	callsub stakeRemoved
	int 1
	return

// stakeRemoved(poolKey: ValidatorPoolKey, staker: Address, amountRemoved: uint64, rewardRemoved: uint64, stakerRemoved: boolean): void
//
// stakeRemoved is called by Staking Pools to inform the validator (us) that a particular amount of total stake has been removed
// from the specified pool.  This is used to update the stats we have in our PoolInfo storage.
// If any amount of rewardRemoved is specified, then that amount of reward is sent to the use
// The calling App ID is validated against our pool list as well.
//
// @param {ValidatorPoolKey} poolKey - ValidatorPoolKey type - [validatorID, PoolID] compound type
// @param {Address} staker
// @param {uint64} amountRemoved - algo amount removed
// @param {uint64} rewardRemoved - if applicable, amount of token reward removed (by pool 1 caller) or TO remove and pay out (via pool 1 from different pool caller)
// @param {boolean} stakerRemoved
stakeRemoved:
	proto 5 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// *if15_condition
	// contracts/validatorRegistry.algo.ts:787
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if15_end

	// *if15_consequent
	// contracts/validatorRegistry.algo.ts:788
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if15_end:
	// contracts/validatorRegistry.algo.ts:790
	// this.verifyPoolKeyCaller(poolKey)
	frame_dig -1 // poolKey: ValidatorPoolKey
	callsub verifyPoolKeyCaller

	// contracts/validatorRegistry.algo.ts:794
	// assert(amountRemoved > 0 || rewardRemoved > 0)
	frame_dig -3 // amountRemoved: uint64
	int 0
	>
	dup
	bnz *skip_or2
	frame_dig -4 // rewardRemoved: uint64
	int 0
	>
	||

*skip_or2:
	assert

	// contracts/validatorRegistry.algo.ts:797
	// this.ValidatorList(poolKey.ID).value.Pools[poolKey.PoolID - 1].TotalAlgoStaked -= amountRemoved
	int 234 // headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 18
	* // acc * typeLength
	+
	int 10 // headOffset
	+
	int 234 // headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 18
	* // acc * typeLength
	+
	int 10 // headOffset
	+
	int 8
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -3 // amountRemoved: uint64
	-
	itob
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:798
	// this.ValidatorList(poolKey.ID).value.State.TotalAlgoStaked -= amountRemoved
	int 218
	dup
	int 8
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -3 // amountRemoved: uint64
	-
	itob
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:799
	// this.TotalAlgoStaked.value -= amountRemoved
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig -3 // amountRemoved: uint64
	-
	byte 0x7374616b6564 // "staked"
	swap
	app_global_put

	// *if16_condition
	// contracts/validatorRegistry.algo.ts:801
	// rewardRemoved > 0
	frame_dig -4 // rewardRemoved: uint64
	int 0
	>
	bz *if16_end

	// *if16_consequent
	// contracts/validatorRegistry.algo.ts:802
	// rewardTokenID = this.ValidatorList(poolKey.ID).value.Config.RewardTokenID
	int 121
	int 8
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // rewardTokenID: uint64

	// contracts/validatorRegistry.algo.ts:803
	// assert(rewardTokenID !== 0, "rewardRemoved can't be set if validator doesn't have reward token!")
	frame_dig 0 // rewardTokenID: uint64
	int 0
	!=

	// rewardRemoved can't be set if validator doesn't have reward token!
	assert

	// contracts/validatorRegistry.algo.ts:804
	// assert(
	//                 this.ValidatorList(poolKey.ID).value.State.RewardTokenHeldBack >= rewardRemoved,
	//                 'reward being removed must be covered by hold back amount'
	//             )
	int 226
	int 8
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -4 // rewardRemoved: uint64
	>=

	// reward being removed must be covered by hold back amount
	assert

	// contracts/validatorRegistry.algo.ts:810
	// this.ValidatorList(poolKey.ID).value.State.RewardTokenHeldBack -= rewardRemoved
	int 226
	dup
	int 8
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -4 // rewardRemoved: uint64
	-
	itob
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// *if17_condition
	// contracts/validatorRegistry.algo.ts:815
	// poolKey.PoolID !== 1
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	!=
	bz *if17_end

	// *if17_consequent
	// contracts/validatorRegistry.algo.ts:816
	// sendMethodCall<typeof StakingPool.prototype.payTokenReward>({
	//                     applicationID: AppID.fromUint64(this.ValidatorList(poolKey.ID).value.Pools[0].PoolAppID),
	//                     methodArgs: [staker, rewardTokenID, rewardRemoved],
	//                 })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "payTokenReward(address,uint64,uint64)void"
	itxn_field ApplicationArgs

	// contracts/validatorRegistry.algo.ts:817
	// applicationID: AppID.fromUint64(this.ValidatorList(poolKey.ID).value.Pools[0].PoolAppID)
	int 234
	int 8
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	itxn_field ApplicationID

	// contracts/validatorRegistry.algo.ts:818
	// methodArgs: [staker, rewardTokenID, rewardRemoved]
	frame_dig -2 // staker: Address
	itxn_field ApplicationArgs
	frame_dig 0 // rewardTokenID: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig -4 // rewardRemoved: uint64
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if17_end:

*if16_end:
	// *if18_condition
	// contracts/validatorRegistry.algo.ts:823
	// stakerRemoved
	frame_dig -5 // stakerRemoved: boolean
	bz *if18_end

	// *if18_consequent
	// contracts/validatorRegistry.algo.ts:825
	// this.ValidatorList(poolKey.ID).value.Pools[poolKey.PoolID - 1].TotalStakers -= 1
	int 234 // headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 18
	* // acc * typeLength
	+
	int 8 // headOffset
	+
	int 234 // headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 18
	* // acc * typeLength
	+
	int 8 // headOffset
	+
	int 2
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	int 1
	-
	itob
	extract 6 2
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:827
	// removeRet = this.removeFromStakerPoolSet(staker, <ValidatorPoolKey>{
	//                 ID: poolKey.ID,
	//                 PoolID: poolKey.PoolID,
	//                 PoolAppID: poolKey.PoolAppID,
	//             })
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	itob
	concat
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 16 8
	btoi
	itob
	concat
	frame_dig -2 // staker: Address
	callsub removeFromStakerPoolSet
	frame_bury 1 // removeRet: (bool,bool)

	// contracts/validatorRegistry.algo.ts:832
	// stakerOutOfThisValidator = removeRet[0]
	frame_dig 1 // removeRet: (bool,bool)
	store 255 // full array
	load 255 // full array
	int 0
	getbit
	frame_bury 2 // stakerOutOfThisValidator: bool

	// contracts/validatorRegistry.algo.ts:833
	// stakerOutOfProtocol = removeRet[1]
	frame_dig 1 // removeRet: (bool,bool)
	store 255 // full array
	load 255 // full array
	int 1
	getbit
	frame_bury 3 // stakerOutOfProtocol: bool

	// *if19_condition
	// contracts/validatorRegistry.algo.ts:835
	// stakerOutOfThisValidator
	frame_dig 2 // stakerOutOfThisValidator: bool
	bz *if19_end

	// *if19_consequent
	// contracts/validatorRegistry.algo.ts:836
	// this.ValidatorList(poolKey.ID).value.State.TotalStakers -= 1
	int 210
	dup
	int 8
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	int 1
	-
	itob
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

*if19_end:
	// *if20_condition
	// contracts/validatorRegistry.algo.ts:839
	// stakerOutOfProtocol
	frame_dig 3 // stakerOutOfProtocol: bool
	bz *if20_end

	// *if20_consequent
	// contracts/validatorRegistry.algo.ts:840
	// this.NumStakers.value -= 1
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	int 1
	-
	byte 0x6e756d5374616b657273 // "numStakers"
	swap
	app_global_put

*if20_end:

*if18_end:
	retsub

// findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)
*abi_route_findPoolForStaker:
	// The ABI return prefix
	byte 0x151f7c75

	// amountToStake: uint64
	txna ApplicationArgs 3
	btoi

	// staker: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)
	callsub findPoolForStaker
	concat
	log
	int 1
	return

// findPoolForStaker(validatorID: ValidatorID, staker: Address, amountToStake: uint64): [ValidatorPoolKey, boolean, boolean]
//
// Finds the pool for a staker based on the provided validator ID, staker address, and amount to stake.
// First checks the stakers 'already staked list' for the validator preferring those (adding if possible) then adds
// to new pool if necessary.
//
// @param {ValidatorID} validatorID - The ID of the validator.
// @param {Address} staker - The address of the staker.
// @param {uint64} amountToStake - The amount to stake.
// @returns {ValidatorPoolKey, boolean, boolean} - The pool for the staker, true/false on whether the staker is 'new'
// to this VALIDATOR, and true/false if staker is new to the protocol.
findPoolForStaker:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 7

	// contracts/validatorRegistry.algo.ts:861
	// isNewStakerToValidator = true
	int 1
	frame_bury 0 // isNewStakerToValidator: bool

	// contracts/validatorRegistry.algo.ts:862
	// isNewStakerToProtocol = true
	int 1
	frame_bury 1 // isNewStakerToProtocol: bool

	// contracts/validatorRegistry.algo.ts:870
	// maxPerPool = this.getCurMaxStakePerPool(validatorID)
	frame_dig -1 // validatorID: ValidatorID
	callsub getCurMaxStakePerPool
	frame_bury 2 // maxPerPool: uint64

	// *if21_condition
	// contracts/validatorRegistry.algo.ts:873
	// this.StakerPoolSet(staker).exists
	byte 0x737073 // "sps"
	frame_dig -2 // staker: Address
	concat
	box_len
	swap
	pop
	bz *if21_end

	// *if21_consequent
	// contracts/validatorRegistry.algo.ts:874
	// poolSet = clone(this.StakerPoolSet(staker).value)
	byte 0x737073 // "sps"
	frame_dig -2 // staker: Address
	concat
	box_get
	assert
	frame_bury 3 // poolSet: (uint64,uint64,uint64)[6]

	// contracts/validatorRegistry.algo.ts:875
	// assert(validatorID !== 0)
	frame_dig -1 // validatorID: ValidatorID
	int 0
	!=
	assert

	// contracts/validatorRegistry.algo.ts:876
	// for (let i = 0; i < poolSet.length; i += 1)
	int 0
	frame_bury 4 // i: uint64

*for_3:
	// contracts/validatorRegistry.algo.ts:876
	// i < poolSet.length
	frame_dig 4 // i: uint64
	int 6
	<
	bz *for_3_end

	// *if22_condition
	// contracts/validatorRegistry.algo.ts:877
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if22_end

	// *if22_consequent
	// contracts/validatorRegistry.algo.ts:878
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if22_end:
	// *if23_condition
	// contracts/validatorRegistry.algo.ts:880
	// poolSet[i].ID === 0
	frame_dig 3 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 4 // i: uint64
	int 24
	* // acc * typeLength
	int 0
	+
	int 8
	extract3
	btoi
	int 0
	==
	bz *if23_end

	// *if23_consequent
	b *for_3_continue

*if23_end:
	// contracts/validatorRegistry.algo.ts:883
	// isNewStakerToProtocol = false
	int 0
	frame_bury 1 // isNewStakerToProtocol: bool

	// *if24_condition
	// contracts/validatorRegistry.algo.ts:884
	// poolSet[i].ID === validatorID
	frame_dig 3 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 4 // i: uint64
	int 24
	* // acc * typeLength
	int 0
	+
	int 8
	extract3
	btoi
	frame_dig -1 // validatorID: ValidatorID
	==
	bz *if24_end

	// *if24_consequent
	// contracts/validatorRegistry.algo.ts:886
	// isNewStakerToValidator = false
	int 0
	frame_bury 0 // isNewStakerToValidator: bool

	// *if25_condition
	// contracts/validatorRegistry.algo.ts:888
	// this.ValidatorList(validatorID).value.Pools[poolSet[i].PoolID - 1].TotalAlgoStaked +
	//                             amountToStake <=
	//                         maxPerPool
	int 234 // headOffset
	frame_dig 3 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 4 // i: uint64
	int 24
	* // acc * typeLength
	int 8 // headOffset
	+
	int 8
	extract3
	btoi
	int 1
	-
	int 18
	* // acc * typeLength
	+
	int 10 // headOffset
	+
	int 8
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -3 // amountToStake: uint64
	+
	frame_dig 2 // maxPerPool: uint64
	<=
	bz *if25_end

	// *if25_consequent
	// contracts/validatorRegistry.algo.ts:892
	// return [poolSet[i], isNewStakerToValidator, isNewStakerToProtocol];
	frame_dig 3 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 4 // i: uint64
	int 24
	* // acc * typeLength
	int 24
	extract3
	byte 0x00
	int 0
	frame_dig 0 // isNewStakerToValidator: bool
	setbit
	int 1
	frame_dig 1 // isNewStakerToProtocol: bool
	setbit
	concat

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 4
	retsub

*if25_end:

*if24_end:

*for_3_continue:
	// contracts/validatorRegistry.algo.ts:876
	// i += 1
	frame_dig 4 // i: uint64
	int 1
	+
	frame_bury 4 // i: uint64
	b *for_3

*for_3_end:

*if21_end:
	// contracts/validatorRegistry.algo.ts:899
	// assert(
	//             amountToStake >= this.ValidatorList(validatorID).value.Config.MinEntryStake,
	//             'must stake at least the minimum for this pool'
	//         )
	frame_dig -3 // amountToStake: uint64
	int 175
	int 8
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	>=

	// must stake at least the minimum for this pool
	assert

	// contracts/validatorRegistry.algo.ts:905
	// pools = clone(this.ValidatorList(validatorID).value.Pools)
	int 234 // headOffset
	int 432
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	frame_bury 5 // pools: (uint64,uint16,uint64)[24]

	// contracts/validatorRegistry.algo.ts:906
	// curNumPools = this.ValidatorList(validatorID).value.State.NumPools as uint64
	int 208
	int 2
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 6 // curNumPools: uint64

	// contracts/validatorRegistry.algo.ts:907
	// for (let i = 0; i < curNumPools; i += 1)
	int 0
	frame_bury 7 // i: uint64

*for_4:
	// contracts/validatorRegistry.algo.ts:907
	// i < curNumPools
	frame_dig 7 // i: uint64
	frame_dig 6 // curNumPools: uint64
	<
	bz *for_4_end

	// *if26_condition
	// contracts/validatorRegistry.algo.ts:908
	// pools[i].TotalAlgoStaked + amountToStake <= maxPerPool
	frame_dig 5 // pools: (uint64,uint16,uint64)[24]
	frame_dig 7 // i: uint64
	int 18
	* // acc * typeLength
	int 10 // headOffset
	+
	int 8
	extract3
	btoi
	frame_dig -3 // amountToStake: uint64
	+
	frame_dig 2 // maxPerPool: uint64
	<=
	bz *if26_end

	// *if26_consequent
	// contracts/validatorRegistry.algo.ts:909
	// return [
	//                     { ID: validatorID, PoolID: i + 1, PoolAppID: pools[i].PoolAppID },
	//                     isNewStakerToValidator,
	//                     isNewStakerToProtocol,
	//                 ];
	frame_dig -1 // validatorID: ValidatorID
	itob
	frame_dig 7 // i: uint64
	int 1
	+
	itob
	concat
	frame_dig 5 // pools: (uint64,uint16,uint64)[24]
	frame_dig 7 // i: uint64
	int 18
	* // acc * typeLength
	int 0
	+
	int 8
	extract3
	btoi
	itob
	concat
	byte 0x00
	int 0
	frame_dig 0 // isNewStakerToValidator: bool
	setbit
	int 1
	frame_dig 1 // isNewStakerToProtocol: bool
	setbit
	concat

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 7
	retsub

*if26_end:

*for_4_continue:
	// contracts/validatorRegistry.algo.ts:907
	// i += 1
	frame_dig 7 // i: uint64
	int 1
	+
	frame_bury 7 // i: uint64
	b *for_4

*for_4_end:
	// contracts/validatorRegistry.algo.ts:917
	// return [{ ID: validatorID, PoolID: 0, PoolAppID: 0 }, isNewStakerToValidator, isNewStakerToProtocol];
	frame_dig -1 // validatorID: ValidatorID
	itob
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x00
	int 0
	frame_dig 0 // isNewStakerToValidator: bool
	setbit
	int 1
	frame_dig 1 // isNewStakerToProtocol: bool
	setbit
	concat

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 7
	retsub

// movePoolToNode(uint64,uint64,uint64)void
*abi_route_movePoolToNode:
	// nodeNum: uint64
	txna ApplicationArgs 3
	btoi

	// poolAppID: uint64
	txna ApplicationArgs 2
	btoi

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute movePoolToNode(uint64,uint64,uint64)void
	callsub movePoolToNode
	int 1
	return

// movePoolToNode(validatorID: ValidatorID, poolAppID: uint64, nodeNum: uint64): void
//
// Find the specified pool (in any node number) and move it to the specified node.
// The pool account is forced offline if moved so prior node will still run for 320 rounds but
// new key goes online on new node soon after (320 rounds after it goes online)
// No-op if success, asserts if not found or can't move  (no space in target)
// [ ONLY OWNER OR MANAGER CAN CHANGE ]
// Only callable by owner or manager
movePoolToNode:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts/validatorRegistry.algo.ts:930
	// assert(
	//             this.txn.sender === this.ValidatorList(validatorID).value.Config.Owner ||
	//                 this.txn.sender === this.ValidatorList(validatorID).value.Config.Manager
	//         )
	txn Sender
	int 8
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	==
	dup
	bnz *skip_or3
	txn Sender
	int 40
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	==
	||

*skip_or3:
	assert

	// contracts/validatorRegistry.algo.ts:935
	// nodePoolAssignments = clone(this.ValidatorList(validatorID).value.NodePoolAssignments)
	int 866 // headOffset
	int 192
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	frame_bury 0 // nodePoolAssignments: ((uint64[3])[8])

	// contracts/validatorRegistry.algo.ts:936
	// assert(nodeNum >= 1 && nodeNum <= MAX_NODES)
	frame_dig -3 // nodeNum: uint64
	int 1
	>=
	dup
	bz *skip_and2
	frame_dig -3 // nodeNum: uint64
	int 8
	<=
	&&

*skip_and2:
	assert

	// contracts/validatorRegistry.algo.ts:938
	// for (let srcNodeIdx = 0; srcNodeIdx < MAX_NODES; srcNodeIdx += 1)
	int 0
	frame_bury 1 // srcNodeIdx: uint64

*for_5:
	// contracts/validatorRegistry.algo.ts:938
	// srcNodeIdx < MAX_NODES
	frame_dig 1 // srcNodeIdx: uint64
	int 8
	<
	bz *for_5_end

	// contracts/validatorRegistry.algo.ts:939
	// for (let i = 0; i < MAX_POOLS_PER_NODE; i += 1)
	int 0
	frame_bury 2 // i: uint64

*for_6:
	// contracts/validatorRegistry.algo.ts:939
	// i < MAX_POOLS_PER_NODE
	frame_dig 2 // i: uint64
	int 3
	<
	bz *for_6_end

	// *if27_condition
	// contracts/validatorRegistry.algo.ts:940
	// nodePoolAssignments.Nodes[srcNodeIdx].PoolAppIDs[i] === poolAppID
	frame_dig 0 // nodePoolAssignments: ((uint64[3])[8])
	int 0
	frame_dig 1 // srcNodeIdx: uint64
	int 24
	* // acc * typeLength
	+
	int 0
	+
	frame_dig 2 // i: uint64
	int 8
	* // acc * typeLength
	+
	int 8
	extract3
	btoi
	frame_dig -2 // poolAppID: uint64
	==
	bz *if27_end

	// *if27_consequent
	// contracts/validatorRegistry.algo.ts:941
	// assert(nodeNum - 1 !== srcNodeIdx, "can't move to same node")
	frame_dig -3 // nodeNum: uint64
	int 1
	-
	frame_dig 1 // srcNodeIdx: uint64
	!=

	// can't move to same node
	assert

	// contracts/validatorRegistry.algo.ts:943
	// this.ValidatorList(validatorID).value.NodePoolAssignments.Nodes[srcNodeIdx].PoolAppIDs[i] = 0
	int 866
	frame_dig 1 // srcNodeIdx: uint64
	int 24
	* // acc * typeLength
	+
	int 0
	+
	frame_dig 2 // i: uint64
	int 8
	* // acc * typeLength
	+
	byte 0x0000000000000000
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:946
	// sendMethodCall<typeof StakingPool.prototype.goOffline>({
	//                         applicationID: AppID.fromUint64(poolAppID),
	//                     })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "goOffline()void"
	itxn_field ApplicationArgs

	// contracts/validatorRegistry.algo.ts:947
	// applicationID: AppID.fromUint64(poolAppID)
	frame_dig -2 // poolAppID: uint64
	itxn_field ApplicationID

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/validatorRegistry.algo.ts:951
	// this.addPoolToNode(validatorID, poolAppID, nodeNum)
	frame_dig -3 // nodeNum: uint64
	frame_dig -2 // poolAppID: uint64
	frame_dig -1 // validatorID: ValidatorID
	callsub addPoolToNode

	// contracts/validatorRegistry.algo.ts:952
	// return;
	retsub

*if27_end:

*for_6_continue:
	// contracts/validatorRegistry.algo.ts:939
	// i += 1
	frame_dig 2 // i: uint64
	int 1
	+
	frame_bury 2 // i: uint64
	b *for_6

*for_6_end:

*for_5_continue:
	// contracts/validatorRegistry.algo.ts:938
	// srcNodeIdx += 1
	frame_dig 1 // srcNodeIdx: uint64
	int 1
	+
	frame_bury 1 // srcNodeIdx: uint64
	b *for_5

*for_5_end:
	err // "couldn't find pool app id in nodes to move"

// reverifyNFDOwnership(validatorID: ValidatorID): void
//
// This method verifies the ownership of NFD (Named Function Data) by a validator.
// If the ownership is no longer valid, it removes the NFD from the validator's configuration.
//
// @param {ValidatorID} validatorID - The ID of the validator whose data should be re-evaluated.
reverifyNFDOwnership:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/validatorRegistry.algo.ts:966
	// validatorConfig = this.ValidatorList(validatorID).value.Config
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	frame_bury 0 // storage key//validatorConfig

	// *if28_condition
	// contracts/validatorRegistry.algo.ts:967
	// validatorConfig.NFDForInfo !== 0
	int 72
	int 8
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	int 0
	!=
	bz *if28_end

	// *if28_consequent
	// contracts/validatorRegistry.algo.ts:970
	// nfdOwner = AppID.fromUint64(validatorConfig.NFDForInfo).globalState('i.owner.a') as Address
	int 72
	int 8
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	byte 0x692e6f776e65722e61 // "i.owner.a"
	app_global_get_ex
	assert
	frame_bury 1 // nfdOwner: address

	// *if29_condition
	// contracts/validatorRegistry.algo.ts:972
	// validatorConfig.Owner !== nfdOwner && validatorConfig.Manager !== nfdOwner
	int 8
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	frame_dig 1 // nfdOwner: address
	!=
	dup
	bz *skip_and3
	int 40
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	frame_dig 1 // nfdOwner: address
	!=
	&&

*skip_and3:
	bz *if29_end

	// *if29_consequent
	// contracts/validatorRegistry.algo.ts:974
	// this.ValidatorList(validatorID).value.Config.NFDForInfo = 0
	int 72
	byte 0x0000000000000000
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace

*if29_end:

*if28_end:
	retsub

// validateConfig(config: ValidatorConfig): void
validateConfig:
	proto 1 0

	// contracts/validatorRegistry.algo.ts:981
	// assert(config.EntryGatingType >= GATING_TYPE_NONE && config.EntryGatingType <= GATING_TYPE_CONST_MAX)
	frame_dig -1 // config: ValidatorConfig
	extract 80 1
	btoi
	int 0
	>=
	dup
	bz *skip_and4
	frame_dig -1 // config: ValidatorConfig
	extract 80 1
	btoi
	int 4
	<=
	&&

*skip_and4:
	assert

	// contracts/validatorRegistry.algo.ts:982
	// assert(config.PayoutEveryXMins >= MIN_PAYOUT_MINS && config.PayoutEveryXMins <= MAX_PAYOUT_MINS)
	frame_dig -1 // config: ValidatorConfig
	extract 137 2
	btoi
	int 1
	>=
	dup
	bz *skip_and5
	frame_dig -1 // config: ValidatorConfig
	extract 137 2
	btoi
	int 10080
	<=
	&&

*skip_and5:
	assert

	// contracts/validatorRegistry.algo.ts:983
	// assert(config.PercentToValidator >= MIN_PCT_TO_VALIDATOR && config.PercentToValidator <= MAX_PCT_TO_VALIDATOR)
	frame_dig -1 // config: ValidatorConfig
	extract 139 4
	btoi
	int 0
	>=
	dup
	bz *skip_and6
	frame_dig -1 // config: ValidatorConfig
	extract 139 4
	btoi
	int 1000000
	<=
	&&

*skip_and6:
	assert

	// *if30_condition
	// contracts/validatorRegistry.algo.ts:984
	// config.PercentToValidator !== 0
	frame_dig -1 // config: ValidatorConfig
	extract 139 4
	btoi
	int 0
	!=
	bz *if30_end

	// *if30_consequent
	// contracts/validatorRegistry.algo.ts:985
	// assert(
	//                 config.ValidatorCommissionAddress !== Address.zeroAddress,
	//                 'ValidatorCommissionAddress must be set if percent to validator is not 0'
	//             )
	frame_dig -1 // config: ValidatorConfig
	extract 143 32
	global ZeroAddress
	!=

	// ValidatorCommissionAddress must be set if percent to validator is not 0
	assert

*if30_end:
	// contracts/validatorRegistry.algo.ts:990
	// assert(config.MinEntryStake >= MIN_ALGO_STAKE_PER_POOL)
	frame_dig -1 // config: ValidatorConfig
	extract 175 8
	btoi
	int 1000000
	>=
	assert

	// contracts/validatorRegistry.algo.ts:992
	// assert(config.PoolsPerNode > 0 && config.PoolsPerNode <= MAX_POOLS_PER_NODE)
	frame_dig -1 // config: ValidatorConfig
	extract 191 1
	btoi
	int 0
	>
	dup
	bz *skip_and7
	frame_dig -1 // config: ValidatorConfig
	extract 191 1
	btoi
	int 3
	<=
	&&

*skip_and7:
	assert
	retsub

// callPoolAddStake(stakedAmountPayment: PayTxn, poolKey: ValidatorPoolKey, mbrAmtPaid: uint64, isNewStakerToValidator: boolean, isNewStakerToProtocol: boolean): void
//
// Adds a stakers amount of algo to a validator pool, transferring the algo we received from them (already verified
// by our caller) to the staking pool account, and then telling it about the amount being added for the specified
// staker.
//
// @param {PayTxn} stakedAmountPayment - payment coming from staker to place into a pool
// @param {ValidatorPoolKey} poolKey - The key of the validator pool.
// @param {uint64} mbrAmtPaid - Amount the user is leaving behind in the validator to pay for their Staker MBR cost
// @param {boolean} isNewStakerToValidator - if this is a new, first-time staker to the validator
// @param {boolean} isNewStakerToProtocol - if this is a new, first-time staker to the protocol
callPoolAddStake:
	proto 5 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// *if31_condition
	// contracts/validatorRegistry.algo.ts:1013
	// globals.opcodeBudget < 500
	global OpcodeBudget
	int 500
	<
	bz *if31_end

	// *if31_consequent
	// contracts/validatorRegistry.algo.ts:1014
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if31_end:
	// contracts/validatorRegistry.algo.ts:1016
	// poolAppID = this.ValidatorList(poolKey.ID).value.Pools[poolKey.PoolID - 1].PoolAppID
	int 234 // headOffset
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 18
	* // acc * typeLength
	+
	int 0
	+
	int 8
	byte 0x76 // "v"
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // poolAppID: uint64

	// contracts/validatorRegistry.algo.ts:1020
	// sendMethodCall<typeof StakingPool.prototype.addStake>({
	//             applicationID: AppID.fromUint64(poolAppID),
	//             methodArgs: [
	//                 // =======
	//                 // THIS IS A SEND of the amount received right back out and into the staking pool contract account.
	//                 { amount: stakedAmountPayment.amount - mbrAmtPaid, receiver: AppID.fromUint64(poolAppID).address },
	//                 // =======
	//                 stakedAmountPayment.sender,
	//             ],
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/validatorRegistry.algo.ts:1025
	// amount: stakedAmountPayment.amount - mbrAmtPaid
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	frame_dig -3 // mbrAmtPaid: uint64
	-
	itxn_field Amount

	// contracts/validatorRegistry.algo.ts:1025
	// receiver: AppID.fromUint64(poolAppID).address
	frame_dig 0 // poolAppID: uint64
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee
	itxn_next
	int appl
	itxn_field TypeEnum
	method "addStake(pay,address)uint64"
	itxn_field ApplicationArgs

	// contracts/validatorRegistry.algo.ts:1021
	// applicationID: AppID.fromUint64(poolAppID)
	frame_dig 0 // poolAppID: uint64
	itxn_field ApplicationID

	// contracts/validatorRegistry.algo.ts:1022
	// methodArgs: [
	//                 // =======
	//                 // THIS IS A SEND of the amount received right back out and into the staking pool contract account.
	//                 { amount: stakedAmountPayment.amount - mbrAmtPaid, receiver: AppID.fromUint64(poolAppID).address },
	//                 // =======
	//                 stakedAmountPayment.sender,
	//             ]
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Sender
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	btoi

	// contracts/validatorRegistry.algo.ts:1032
	// poolNumStakers = AppID.fromUint64(poolAppID).globalState('numStakers') as uint64
	frame_dig 0 // poolAppID: uint64
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get_ex
	assert
	frame_bury 1 // poolNumStakers: uint64

	// contracts/validatorRegistry.algo.ts:1033
	// poolAlgoStaked = AppID.fromUint64(poolAppID).globalState('staked') as uint64
	frame_dig 0 // poolAppID: uint64
	byte 0x7374616b6564 // "staked"
	app_global_get_ex
	assert
	frame_bury 2 // poolAlgoStaked: uint64

	// contracts/validatorRegistry.algo.ts:1034
	// this.ValidatorList(poolKey.ID).value.Pools[poolKey.PoolID - 1].TotalStakers = poolNumStakers as uint16
	int 234 // headOffset
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 18
	* // acc * typeLength
	+
	int 8 // headOffset
	+
	frame_dig 1 // poolNumStakers: uint64
	itob
	extract 6 2
	byte 0x76 // "v"
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:1035
	// this.ValidatorList(poolKey.ID).value.Pools[poolKey.PoolID - 1].TotalAlgoStaked = poolAlgoStaked
	int 234 // headOffset
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 18
	* // acc * typeLength
	+
	int 10 // headOffset
	+
	frame_dig 2 // poolAlgoStaked: uint64
	itob
	byte 0x76 // "v"
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// *if32_condition
	// contracts/validatorRegistry.algo.ts:1038
	// isNewStakerToValidator
	frame_dig -4 // isNewStakerToValidator: boolean
	bz *if32_end

	// *if32_consequent
	// contracts/validatorRegistry.algo.ts:1039
	// this.ValidatorList(poolKey.ID).value.State.TotalStakers += 1
	int 210
	dup
	int 8
	byte 0x76 // "v"
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	int 1
	+
	itob
	byte 0x76 // "v"
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

*if32_end:
	// *if33_condition
	// contracts/validatorRegistry.algo.ts:1041
	// isNewStakerToProtocol
	frame_dig -5 // isNewStakerToProtocol: boolean
	bz *if33_end

	// *if33_consequent
	// contracts/validatorRegistry.algo.ts:1042
	// this.NumStakers.value += 1
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	int 1
	+
	byte 0x6e756d5374616b657273 // "numStakers"
	swap
	app_global_put

*if33_end:
	// contracts/validatorRegistry.algo.ts:1044
	// this.ValidatorList(poolKey.ID).value.State.TotalAlgoStaked += stakedAmountPayment.amount - mbrAmtPaid
	int 218
	dup
	int 8
	byte 0x76 // "v"
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	frame_dig -3 // mbrAmtPaid: uint64
	-
	+
	itob
	byte 0x76 // "v"
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:1045
	// this.TotalAlgoStaked.value += stakedAmountPayment.amount - mbrAmtPaid
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	frame_dig -3 // mbrAmtPaid: uint64
	-
	+
	byte 0x7374616b6564 // "staked"
	swap
	app_global_put
	retsub

// updateStakerPoolSet(staker: Address, poolKey: ValidatorPoolKey): void
updateStakerPoolSet:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/validatorRegistry.algo.ts:1049
	// assert(this.StakerPoolSet(staker).exists)
	byte 0x737073 // "sps"
	frame_dig -1 // staker: Address
	concat
	box_len
	swap
	pop
	assert

	// contracts/validatorRegistry.algo.ts:1051
	// poolSet = clone(this.StakerPoolSet(staker).value)
	byte 0x737073 // "sps"
	frame_dig -1 // staker: Address
	concat
	box_get
	assert
	frame_bury 0 // poolSet: (uint64,uint64,uint64)[6]

	// contracts/validatorRegistry.algo.ts:1052
	// for (let i = 0; i < this.StakerPoolSet(staker).value.length; i += 1)
	int 0
	frame_bury 1 // i: uint64

*for_7:
	// contracts/validatorRegistry.algo.ts:1052
	// i < this.StakerPoolSet(staker).value.length
	frame_dig 1 // i: uint64
	int 6
	<
	bz *for_7_end

	// *if34_condition
	// contracts/validatorRegistry.algo.ts:1053
	// poolSet[i] === poolKey
	frame_dig 0 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 1 // i: uint64
	int 24
	* // acc * typeLength
	int 24
	extract3
	frame_dig -2 // poolKey: ValidatorPoolKey
	==
	bz *if34_end

	// *if34_consequent
	// contracts/validatorRegistry.algo.ts:1055
	// return;
	retsub

*if34_end:
	// *if35_condition
	// contracts/validatorRegistry.algo.ts:1057
	// poolSet[i].ID === 0
	frame_dig 0 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 1 // i: uint64
	int 24
	* // acc * typeLength
	int 0
	+
	int 8
	extract3
	btoi
	int 0
	==
	bz *if35_end

	// *if35_consequent
	// contracts/validatorRegistry.algo.ts:1058
	// this.StakerPoolSet(staker).value[i] = poolKey
	frame_dig 1 // i: uint64
	int 24
	* // acc * typeLength
	frame_dig -2 // poolKey: ValidatorPoolKey
	byte 0x737073 // "sps"
	frame_dig -1 // staker: Address
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:1059
	// return;
	retsub

*if35_end:

*for_7_continue:
	// contracts/validatorRegistry.algo.ts:1052
	// i += 1
	frame_dig 1 // i: uint64
	int 1
	+
	frame_bury 1 // i: uint64
	b *for_7

*for_7_end:
	err // 'No empty slot available in the staker pool set'

// removeFromStakerPoolSet(staker: Address, poolKey: ValidatorPoolKey): [boolean, boolean]
//
// Removes a pool key from the staker's active pool set - fails if not found (!)
//
// @param {Address} staker - The address of the staker.
// @param {ValidatorPoolKey} poolKey - The pool key they should be stored in
//
// @return [boolean, boolean] [is the staker gone from ALL pools of the given VALIDATOR, and is staker gone from ALL pools]
removeFromStakerPoolSet:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 4

	// contracts/validatorRegistry.algo.ts:1075
	// inSameValidatorPoolCount = 0
	int 0
	frame_bury 0 // inSameValidatorPoolCount: uint64

	// contracts/validatorRegistry.algo.ts:1076
	// inAnyPoolCount = 0
	int 0
	frame_bury 1 // inAnyPoolCount: uint64

	// contracts/validatorRegistry.algo.ts:1077
	// found = false
	int 0
	frame_bury 2 // found: bool

	// contracts/validatorRegistry.algo.ts:1079
	// poolSet = clone(this.StakerPoolSet(staker).value)
	byte 0x737073 // "sps"
	frame_dig -1 // staker: Address
	concat
	box_get
	assert
	frame_bury 3 // poolSet: (uint64,uint64,uint64)[6]

	// contracts/validatorRegistry.algo.ts:1080
	// for (let i = 0; i < this.StakerPoolSet(staker).value.length; i += 1)
	int 0
	frame_bury 4 // i: uint64

*for_8:
	// contracts/validatorRegistry.algo.ts:1080
	// i < this.StakerPoolSet(staker).value.length
	frame_dig 4 // i: uint64
	int 6
	<
	bz *for_8_end

	// *if36_condition
	// contracts/validatorRegistry.algo.ts:1081
	// poolSet[i].ID === 0
	frame_dig 3 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 4 // i: uint64
	int 24
	* // acc * typeLength
	int 0
	+
	int 8
	extract3
	btoi
	int 0
	==
	bz *if36_end

	// *if36_consequent
	b *for_8_continue

*if36_end:
	// contracts/validatorRegistry.algo.ts:1084
	// inAnyPoolCount += 1
	frame_dig 1 // inAnyPoolCount: uint64
	int 1
	+
	frame_bury 1 // inAnyPoolCount: uint64

	// *if37_condition
	// contracts/validatorRegistry.algo.ts:1085
	// poolSet[i].ID === poolKey.ID
	frame_dig 3 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 4 // i: uint64
	int 24
	* // acc * typeLength
	int 0
	+
	int 8
	extract3
	btoi
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	==
	bz *if37_end

	// *if37_consequent
	// *if38_condition
	// contracts/validatorRegistry.algo.ts:1086
	// poolSet[i] === poolKey
	frame_dig 3 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 4 // i: uint64
	int 24
	* // acc * typeLength
	int 24
	extract3
	frame_dig -2 // poolKey: ValidatorPoolKey
	==
	bz *if38_else

	// *if38_consequent
	// contracts/validatorRegistry.algo.ts:1087
	// found = true
	int 1
	frame_bury 2 // found: bool

	// contracts/validatorRegistry.algo.ts:1089
	// this.StakerPoolSet(staker).value[i] = { ID: 0, PoolID: 0, PoolAppID: 0 }
	frame_dig 4 // i: uint64
	int 24
	* // acc * typeLength
	byte 0x000000000000000000000000000000000000000000000000
	byte 0x737073 // "sps"
	frame_dig -1 // staker: Address
	concat
	cover 2
	box_replace
	b *if38_end

*if38_else:
	// contracts/validatorRegistry.algo.ts:1091
	// inSameValidatorPoolCount += 1
	frame_dig 0 // inSameValidatorPoolCount: uint64
	int 1
	+
	frame_bury 0 // inSameValidatorPoolCount: uint64

*if38_end:

*if37_end:

*for_8_continue:
	// contracts/validatorRegistry.algo.ts:1080
	// i += 1
	frame_dig 4 // i: uint64
	int 1
	+
	frame_bury 4 // i: uint64
	b *for_8

*for_8_end:
	// *if39_condition
	// contracts/validatorRegistry.algo.ts:1095
	// !found
	frame_dig 2 // found: bool
	!
	bz *if39_end

	// *if39_consequent
	err // 'No matching slot found when told to remove a pool from the stakers set'

*if39_end:
	// contracts/validatorRegistry.algo.ts:1099
	// return [inSameValidatorPoolCount === 0, inAnyPoolCount === 0];
	byte 0x00
	int 0
	frame_dig 0 // inSameValidatorPoolCount: uint64
	int 0
	==
	setbit
	int 1
	frame_dig 1 // inAnyPoolCount: uint64
	int 0
	==
	setbit

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 4
	retsub

// addPoolToNode(validatorID: ValidatorID, poolAppID: uint64, nodeNum: uint64): void
addPoolToNode:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts/validatorRegistry.algo.ts:1103
	// nodePoolAssignments = clone(this.ValidatorList(validatorID).value.NodePoolAssignments)
	int 866 // headOffset
	int 192
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	frame_bury 0 // nodePoolAssignments: ((uint64[3])[8])

	// contracts/validatorRegistry.algo.ts:1104
	// maxPoolsPerNodeForThisValidator = this.ValidatorList(validatorID).value.Config.PoolsPerNode as uint64
	int 191
	int 1
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 1 // maxPoolsPerNodeForThisValidator: uint64

	// contracts/validatorRegistry.algo.ts:1106
	// assert(nodeNum >= 1 && nodeNum <= MAX_NODES)
	frame_dig -3 // nodeNum: uint64
	int 1
	>=
	dup
	bz *skip_and8
	frame_dig -3 // nodeNum: uint64
	int 8
	<=
	&&

*skip_and8:
	assert

	// contracts/validatorRegistry.algo.ts:1108
	// for (let i = 0; i < maxPoolsPerNodeForThisValidator; i += 1)
	int 0
	frame_bury 2 // i: uint64

*for_9:
	// contracts/validatorRegistry.algo.ts:1108
	// i < maxPoolsPerNodeForThisValidator
	frame_dig 2 // i: uint64
	frame_dig 1 // maxPoolsPerNodeForThisValidator: uint64
	<
	bz *for_9_end

	// *if40_condition
	// contracts/validatorRegistry.algo.ts:1109
	// nodePoolAssignments.Nodes[nodeNum - 1].PoolAppIDs[i] === 0
	frame_dig 0 // nodePoolAssignments: ((uint64[3])[8])
	int 0
	frame_dig -3 // nodeNum: uint64
	int 1
	-
	int 24
	* // acc * typeLength
	+
	int 0
	+
	frame_dig 2 // i: uint64
	int 8
	* // acc * typeLength
	+
	int 8
	extract3
	btoi
	int 0
	==
	bz *if40_end

	// *if40_consequent
	// contracts/validatorRegistry.algo.ts:1111
	// this.ValidatorList(validatorID).value.NodePoolAssignments.Nodes[nodeNum - 1].PoolAppIDs[i] = poolAppID
	int 866
	frame_dig -3 // nodeNum: uint64
	int 1
	-
	int 24
	* // acc * typeLength
	+
	int 0
	+
	frame_dig 2 // i: uint64
	int 8
	* // acc * typeLength
	+
	frame_dig -2 // poolAppID: uint64
	itob
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:1112
	// return;
	retsub

*if40_end:

*for_9_continue:
	// contracts/validatorRegistry.algo.ts:1108
	// i += 1
	frame_dig 2 // i: uint64
	int 1
	+
	frame_bury 2 // i: uint64
	b *for_9

*for_9_end:
	err // 'no available space in specified node for this pool'

// doesStakerMeetGating(validatorID: ValidatorID, valueToVerify: uint64): void
//
// Checks if a staker meets the gating requirements specified by the validator.
//
// @param {ValidatorID} validatorID - The ID of the validator.
// @param {uint64} valueToVerify - The value to verify against the gating requirements.
// @returns {void} or asserts if requirements not met.
doesStakerMeetGating:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 7

	// contracts/validatorRegistry.algo.ts:1126
	// type = this.ValidatorList(validatorID).value.Config.EntryGatingType
	int 80
	int 1
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // type: uint8

	// *if41_condition
	// contracts/validatorRegistry.algo.ts:1127
	// type === GATING_TYPE_NONE
	frame_dig 0 // type: uint8
	int 0
	==
	bz *if41_end

	// *if41_consequent
	// contracts/validatorRegistry.algo.ts:1128
	// return;
	retsub

*if41_end:
	// contracts/validatorRegistry.algo.ts:1130
	// staker = this.txn.sender
	txn Sender
	frame_bury 1 // staker: address

	// contracts/validatorRegistry.algo.ts:1131
	// gateReq = clone(this.ValidatorList(validatorID).value.Config.EntryGatingValue)
	int 81
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	frame_bury 2 // gateReq: byte[32]

	// *if42_condition
	// contracts/validatorRegistry.algo.ts:1135
	// type === GATING_TYPE_ASSETS_CREATED_BY ||
	//             type === GATING_TYPE_ASSET_ID ||
	//             type === GATING_TYPE_CREATED_BY_NFD_ADDRESSES
	frame_dig 0 // type: uint8
	int 1
	==
	dup
	bnz *skip_or4
	frame_dig 0 // type: uint8
	int 2
	==
	||

*skip_or4:
	dup
	bnz *skip_or5
	frame_dig 0 // type: uint8
	int 3
	==
	||

*skip_or5:
	bz *if42_end

	// *if42_consequent
	// contracts/validatorRegistry.algo.ts:1139
	// assert(valueToVerify !== 0)
	frame_dig -2 // valueToVerify: uint64
	int 0
	!=
	assert

	// contracts/validatorRegistry.algo.ts:1140
	// balRequired = this.ValidatorList(validatorID).value.Config.GatingAssetMinBalance
	int 113
	int 8
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 3 // balRequired: uint64

	// *if43_condition
	// contracts/validatorRegistry.algo.ts:1141
	// balRequired === 0
	frame_dig 3 // balRequired: uint64
	int 0
	==
	bz *if43_end

	// *if43_consequent
	// contracts/validatorRegistry.algo.ts:1142
	// balRequired = 1
	int 1
	frame_bury 3 // balRequired: uint64

*if43_end:
	// contracts/validatorRegistry.algo.ts:1144
	// assert(
	//                 staker.assetBalance(AssetID.fromUint64(valueToVerify)) >= balRequired,
	//                 'must have required minimum balance of validator defined token to add stake'
	//             )
	frame_dig 1 // staker: address
	frame_dig -2 // valueToVerify: uint64
	asset_holding_get AssetBalance
	pop
	frame_dig 3 // balRequired: uint64
	>=

	// must have required minimum balance of validator defined token to add stake
	assert

*if42_end:
	// *if44_condition
	// contracts/validatorRegistry.algo.ts:1149
	// type === GATING_TYPE_ASSETS_CREATED_BY
	frame_dig 0 // type: uint8
	int 1
	==
	bz *if44_end

	// *if44_consequent
	// contracts/validatorRegistry.algo.ts:1150
	// assert(
	//                 AssetID.fromUint64(valueToVerify).creator === Address.fromBytes(gateReq),
	//                 'specified asset must be created by creator that the validator defined as a requirement to stake'
	//             )
	frame_dig -2 // valueToVerify: uint64
	asset_params_get AssetCreator
	pop
	frame_dig 2 // gateReq: byte[32]
	==

	// specified asset must be created by creator that the validator defined as a requirement to stake
	assert

*if44_end:
	// *if45_condition
	// contracts/validatorRegistry.algo.ts:1155
	// type === GATING_TYPE_ASSET_ID
	frame_dig 0 // type: uint8
	int 2
	==
	bz *if45_end

	// *if45_consequent
	// contracts/validatorRegistry.algo.ts:1156
	// requiredAsset = extractUint64(gateReq, 0)
	frame_dig 2 // gateReq: byte[32]
	int 0
	extract_uint64
	frame_bury 4 // requiredAsset: uint64

	// contracts/validatorRegistry.algo.ts:1157
	// assert(requiredAsset !== 0)
	frame_dig 4 // requiredAsset: uint64
	int 0
	!=
	assert

	// contracts/validatorRegistry.algo.ts:1158
	// assert(
	//                 valueToVerify === requiredAsset,
	//                 'specified asset must be identical to the asset id defined as a requirement to stake'
	//             )
	frame_dig -2 // valueToVerify: uint64
	frame_dig 4 // requiredAsset: uint64
	==

	// specified asset must be identical to the asset id defined as a requirement to stake
	assert

*if45_end:
	// *if46_condition
	// contracts/validatorRegistry.algo.ts:1163
	// type === GATING_TYPE_CREATED_BY_NFD_ADDRESSES
	frame_dig 0 // type: uint8
	int 3
	==
	bz *if46_end

	// *if46_consequent
	// contracts/validatorRegistry.algo.ts:1164
	// nfdForInfo = this.ValidatorList(validatorID).value.Config.NFDForInfo
	int 72
	int 8
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 5 // nfdForInfo: uint64

	// contracts/validatorRegistry.algo.ts:1167
	// assert(
	//                 this.isAddressInNFDCAAlgoList(nfdForInfo, AssetID.fromUint64(valueToVerify).creator),
	//                 'specified asset must be created by creator that is one of the linked addresses in an nfd'
	//             )
	frame_dig -2 // valueToVerify: uint64
	asset_params_get AssetCreator
	pop
	frame_dig 5 // nfdForInfo: uint64
	callsub isAddressInNFDCAAlgoList

	// specified asset must be created by creator that is one of the linked addresses in an nfd
	assert

*if46_end:
	// *if47_condition
	// contracts/validatorRegistry.algo.ts:1172
	// type === GATING_TYPE_SEGMENT_OF_NFD
	frame_dig 0 // type: uint8
	int 4
	==
	bz *if47_end

	// *if47_consequent
	// contracts/validatorRegistry.algo.ts:1174
	// userOfferedNFDAppID = valueToVerify
	frame_dig -2 // valueToVerify: uint64
	frame_bury 6 // userOfferedNFDAppID: uint64

	// contracts/validatorRegistry.algo.ts:1175
	// assert(this.isNFDAppIDValid(userOfferedNFDAppID), 'provided NFD must be valid')
	frame_dig 6 // userOfferedNFDAppID: uint64
	callsub isNFDAppIDValid

	// provided NFD must be valid
	assert

	// contracts/validatorRegistry.algo.ts:1178
	// assert(
	//                 rawBytes(AppID.fromUint64(userOfferedNFDAppID).globalState('i.owner.a') as Address) ===
	//                     rawBytes(staker) || this.isAddressInNFDCAAlgoList(userOfferedNFDAppID, staker),
	//                 "provided nfd for entry isn't owned or linked to the staker"
	//             )
	frame_dig 6 // userOfferedNFDAppID: uint64
	byte 0x692e6f776e65722e61 // "i.owner.a"
	app_global_get_ex
	assert
	frame_dig 1 // staker: address
	==
	dup
	bnz *skip_or6
	frame_dig 1 // staker: address
	frame_dig 6 // userOfferedNFDAppID: uint64
	callsub isAddressInNFDCAAlgoList
	||

*skip_or6:
	// provided nfd for entry isn't owned or linked to the staker
	assert

	// contracts/validatorRegistry.algo.ts:1185
	// requiredParentAppID = extractUint64(gateReq, 0)
	frame_dig 2 // gateReq: byte[32]
	int 0
	extract_uint64
	frame_bury 7 // requiredParentAppID: uint64

	// contracts/validatorRegistry.algo.ts:1187
	// assert(
	//                 (AppID.fromUint64(userOfferedNFDAppID).globalState('i.parentAppID') as uint64) === requiredParentAppID,
	//                 'specified nfd must be a segment of the nfd the validator specified as a requirement'
	//             )
	frame_dig 6 // userOfferedNFDAppID: uint64
	byte 0x692e706172656e744170704944 // "i.parentAppID"
	app_global_get_ex
	assert
	frame_dig 7 // requiredParentAppID: uint64
	==

	// specified nfd must be a segment of the nfd the validator specified as a requirement
	assert

*if47_end:
	retsub

// isNFDAppIDValid(nfdAppID: uint64): boolean
//
// Checks if the given NFD App ID is valid.  Using only the App ID there's no validation against the name (ie: that nfd X is name Y)
// So it's assumed for the caller, the app id alone is fine.  The name is fetched from the specified app id and the two
// together are used for validity check call to the nfd registry.
//
// @param {uint64} nfdAppID - The NFD App ID to verify.
//
// @returns {boolean} - Returns true if the NFD App ID is valid, otherwise false.
isNFDAppIDValid:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/validatorRegistry.algo.ts:1205
	// userOfferedNFDName = AppID.fromUint64(nfdAppID).globalState('i.name') as string
	frame_dig -1 // nfdAppID: uint64
	byte 0x692e6e616d65 // "i.name"
	app_global_get_ex
	assert
	frame_bury 0 // userOfferedNFDName: string

	// contracts/validatorRegistry.algo.ts:1207
	// sendAppCall({
	//             applicationID: AppID.fromUint64(this.NFDRegistryAppID),
	//             applicationArgs: ['is_valid_nfd_appid', userOfferedNFDName, itob(nfdAppID)],
	//             applications: [AppID.fromUint64(nfdAppID)],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum

	// contracts/validatorRegistry.algo.ts:1208
	// applicationID: AppID.fromUint64(this.NFDRegistryAppID)
	pushint TMPL_NFDRegistryAppID
	itxn_field ApplicationID

	// contracts/validatorRegistry.algo.ts:1209
	// applicationArgs: ['is_valid_nfd_appid', userOfferedNFDName, itob(nfdAppID)]
	byte 0x69735f76616c69645f6e66645f6170706964 // "is_valid_nfd_appid"
	itxn_field ApplicationArgs
	frame_dig 0 // userOfferedNFDName: string
	itxn_field ApplicationArgs
	frame_dig -1 // nfdAppID: uint64
	itob
	itxn_field ApplicationArgs

	// contracts/validatorRegistry.algo.ts:1210
	// applications: [AppID.fromUint64(nfdAppID)]
	frame_dig -1 // nfdAppID: uint64
	itxn_field Applications

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/validatorRegistry.algo.ts:1212
	// return btoi(this.itxn.lastLog) === 1;
	itxn LastLog
	btoi
	int 1
	==

	// set the subroutine return value
	frame_bury 0
	retsub

// isAddressInNFDCAAlgoList(nfdAppID: uint64, addrToFind: Address): boolean
//
// Checks if the specified address is present in an NFDs list of verified addresses.
// The NFD is assumed to have already been validated as official.
//
// @param {uint64} nfdAppID - The NFD application ID.
// @param {Address} addrToFind - The address to find in the v.caAlgo.0.as property
// @return {boolean} - `true` if the address is present, `false` otherwise.
isAddressInNFDCAAlgoList:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts/validatorRegistry.algo.ts:1224
	// sendAppCall({
	//             applicationID: AppID.fromUint64(nfdAppID),
	//             applicationArgs: ['read_property', 'v.caAlgo.0.as'],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum

	// contracts/validatorRegistry.algo.ts:1225
	// applicationID: AppID.fromUint64(nfdAppID)
	frame_dig -1 // nfdAppID: uint64
	itxn_field ApplicationID

	// contracts/validatorRegistry.algo.ts:1226
	// applicationArgs: ['read_property', 'v.caAlgo.0.as']
	byte 0x726561645f70726f7065727479 // "read_property"
	itxn_field ApplicationArgs
	byte 0x762e6361416c676f2e302e6173 // "v.caAlgo.0.as"
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/validatorRegistry.algo.ts:1228
	// caAlgoData = this.itxn.lastLog
	itxn LastLog
	frame_bury 0 // caAlgoData: byte[]

	// contracts/validatorRegistry.algo.ts:1229
	// for (let i = 0; i < caAlgoData.length; i += 32)
	int 0
	frame_bury 1 // i: uint64

*for_10:
	// contracts/validatorRegistry.algo.ts:1229
	// i < caAlgoData.length
	frame_dig 1 // i: uint64
	frame_dig 0 // caAlgoData: byte[]
	len
	<
	bz *for_10_end

	// contracts/validatorRegistry.algo.ts:1230
	// addr = extract3(caAlgoData, i, 32)
	frame_dig 0 // caAlgoData: byte[]
	frame_dig 1 // i: uint64
	int 32
	extract3
	frame_bury 2 // addr: byte[]

	// *if48_condition
	// contracts/validatorRegistry.algo.ts:1231
	// addr !== rawBytes(globals.zeroAddress) && addr === rawBytes(addrToFind)
	frame_dig 2 // addr: byte[]
	global ZeroAddress
	!=
	dup
	bz *skip_and9
	frame_dig 2 // addr: byte[]
	frame_dig -2 // addrToFind: Address
	==
	&&

*skip_and9:
	bz *if48_end

	// *if48_consequent
	// contracts/validatorRegistry.algo.ts:1232
	// return true;
	int 1

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

*if48_end:

*for_10_continue:
	// contracts/validatorRegistry.algo.ts:1229
	// i += 32
	frame_dig 1 // i: uint64
	int 32
	+
	frame_bury 1 // i: uint64
	b *for_10

*for_10_end:
	// contracts/validatorRegistry.algo.ts:1235
	// return false;
	int 0

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// maxAlgoAllowedPerPool(): uint64
//
// Returns the MAXIMUM allowed stake per pool and still receive incentives - we'll treat this as the 'max per pool'
maxAlgoAllowedPerPool:
	proto 0 1

	// contracts/validatorRegistry.algo.ts:1243
	// return 70_000_000_000_000;
	int 70_000_000_000_000
	retsub

// algoSaturationLevel(): uint64
//
// Returns the maximum allowed stake per validator based on a percentage of all current online stake before
// the validator is considered saturated - where rewards are diminished.
// NOTE: this function is defined twice - here and in staking pool contract.  Both must be identical.
algoSaturationLevel:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/validatorRegistry.algo.ts:1252
	// online = this.getCurrentOnlineStake()
	callsub getCurrentOnlineStake
	frame_bury 0 // online: uint64

	// contracts/validatorRegistry.algo.ts:1254
	// return wideRatio([online, MAX_VALIDATOR_SOFT_PCT_OF_ONLINE_1DECIMAL], [1000]);
	frame_dig 0 // online: uint64
	int 100
	mulw
	int 0
	int 1000
	divmodw
	pop
	pop
	swap
	!
	assert

	// set the subroutine return value
	frame_bury 0
	retsub

// maxAllowedStake(): uint64
//
// Returns the MAXIMUM allowed stake per validator based on a percentage of all current online stake.
// Adding stake is completely blocked at this amount.
maxAllowedStake:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/validatorRegistry.algo.ts:1262
	// online = this.getCurrentOnlineStake()
	callsub getCurrentOnlineStake
	frame_bury 0 // online: uint64

	// contracts/validatorRegistry.algo.ts:1264
	// return wideRatio([online, MAX_VALIDATOR_HARD_PCT_OF_ONLINE_1DECIMAL], [1000]);
	frame_dig 0 // online: uint64
	int 150
	mulw
	int 0
	int 1000
	divmodw
	pop
	pop
	swap
	!
	assert

	// set the subroutine return value
	frame_bury 0
	retsub

// getCurrentOnlineStake(): uint64
getCurrentOnlineStake:
	proto 0 1

	// contracts/validatorRegistry.algo.ts:1269
	// return 2_000_000_000_000_000;
	int 2_000_000_000_000_000
	retsub

*create_NoOp:
	method "createApplication(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication
	err

*call_NoOp:
	method "gas()void"
	method "getMbrAmounts()(uint64,uint64,uint64,uint64)"
	method "getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
	method "getNumValidators()uint64"
	method "getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)"
	method "getValidatorState(uint64)(uint16,uint64,uint64,uint64)"
	method "getValidatorOwnerAndManager(uint64)(address,address)"
	method "getPools(uint64)(uint64,uint16,uint64)[]"
	method "getPoolAppID(uint64,uint64)uint64"
	method "getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)"
	method "getCurMaxStakePerPool(uint64)uint64"
	method "doesStakerNeedToPayMBR(address)bool"
	method "getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]"
	method "getTokenPayoutRatio(uint64)(uint64[24],uint64)"
	method "getNodePoolAssignments(uint64)((uint64[3])[8])"
	method "getNFDRegistryID()uint64"
	method "addValidator(pay,string,(uint64,address,address,uint64,uint8,byte[32],uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64"
	method "changeValidatorManager(uint64,address)void"
	method "changeValidatorSunsetInfo(uint64,uint64,uint64)void"
	method "changeValidatorNFD(uint64,uint64,string)void"
	method "changeValidatorCommissionAddress(uint64,address)void"
	method "changeValidatorRewardInfo(uint64,uint8,byte[32],uint64,uint64)void"
	method "addPool(pay,uint64,uint64)(uint64,uint64,uint64)"
	method "addStake(pay,uint64,uint64)(uint64,uint64,uint64)"
	method "setTokenPayoutRatio(uint64)(uint64[24],uint64)"
	method "stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64)void"
	method "stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void"
	method "findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)"
	method "movePoolToNode(uint64,uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_gas *abi_route_getMbrAmounts *abi_route_getProtocolConstraints *abi_route_getNumValidators *abi_route_getValidatorConfig *abi_route_getValidatorState *abi_route_getValidatorOwnerAndManager *abi_route_getPools *abi_route_getPoolAppID *abi_route_getPoolInfo *abi_route_getCurMaxStakePerPool *abi_route_doesStakerNeedToPayMBR *abi_route_getStakedPoolsForAccount *abi_route_getTokenPayoutRatio *abi_route_getNodePoolAssignments *abi_route_getNFDRegistryID *abi_route_addValidator *abi_route_changeValidatorManager *abi_route_changeValidatorSunsetInfo *abi_route_changeValidatorNFD *abi_route_changeValidatorCommissionAddress *abi_route_changeValidatorRewardInfo *abi_route_addPool *abi_route_addStake *abi_route_setTokenPayoutRatio *abi_route_stakeUpdatedViaRewards *abi_route_stakeRemoved *abi_route_findPoolForStaker *abi_route_movePoolToNode
	err