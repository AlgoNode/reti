#pragma version 10

// This TEAL was generated by TEALScript v0.86.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// createApplication(uint64)void
*abi_route_createApplication:
	// poolTemplateAppID: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64)void
	callsub createApplication
	int 1
	return

// createApplication(poolTemplateAppID: uint64): void
createApplication:
	proto 1 0

	// contracts/validatorRegistry.algo.ts:109
	// this.numValidators.value = 0
	byte 0x6e756d56 // "numV"
	int 0
	app_global_put

	// contracts/validatorRegistry.algo.ts:110
	// this.StakingPoolTemplateAppID.value = poolTemplateAppID
	byte 0x706f6f6c54656d706c6174654170704944 // "poolTemplateAppID"
	frame_dig -1 // poolTemplateAppID: uint64
	app_global_put
	retsub

// gas()void
*abi_route_gas:
	// execute gas()void
	callsub gas
	int 1
	return

// gas(): void
//
// gas is a dummy no-op call that can be used to pool-up resource references and opcode cost
gas:
	proto 0 0
	retsub

// minBalanceForAccount(contracts: number, extraPages: number, assets: number, localInts: number, localBytes: number, globalInts: number, globalBytes: number): uint64
minBalanceForAccount:
	proto 7 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/validatorRegistry.algo.ts:127
	// minBal = ALGORAND_ACCOUNT_MIN_BALANCE
	int 100000
	frame_bury 0 // minBal: uint64

	// contracts/validatorRegistry.algo.ts:128
	// minBal += contracts * APPLICATION_BASE_FEE
	frame_dig 0 // minBal: uint64
	frame_dig -1 // contracts: number
	int 100000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/validatorRegistry.algo.ts:129
	// minBal += extraPages * APPLICATION_BASE_FEE
	frame_dig 0 // minBal: uint64
	frame_dig -2 // extraPages: number
	int 100000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/validatorRegistry.algo.ts:130
	// minBal += assets * ASSET_HOLDING_FEE
	frame_dig 0 // minBal: uint64
	frame_dig -3 // assets: number
	int 100000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/validatorRegistry.algo.ts:131
	// minBal += localInts * SSC_VALUE_UINT
	frame_dig 0 // minBal: uint64
	frame_dig -4 // localInts: number
	int 28500
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/validatorRegistry.algo.ts:132
	// minBal += globalInts * SSC_VALUE_UINT
	frame_dig 0 // minBal: uint64
	frame_dig -6 // globalInts: number
	int 28500
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/validatorRegistry.algo.ts:133
	// minBal += localBytes * SSC_VALUE_BYTES
	frame_dig 0 // minBal: uint64
	frame_dig -5 // localBytes: number
	int 50000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/validatorRegistry.algo.ts:134
	// minBal += globalBytes * SSC_VALUE_BYTES
	frame_dig 0 // minBal: uint64
	frame_dig -7 // globalBytes: number
	int 50000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/validatorRegistry.algo.ts:135
	// return minBal;
	frame_dig 0 // minBal: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// costForBoxStorage(totalNumBytes: number): uint64
costForBoxStorage:
	proto 1 1

	// contracts/validatorRegistry.algo.ts:142
	// return SCBOX_PERBOX + totalNumBytes * SCBOX_PERBYTE;
	int 2500
	frame_dig -1 // totalNumBytes: number
	int 400
	*
	+
	retsub

// getMbrAmounts()(uint64,uint64,uint64,uint64)
*abi_route_getMbrAmounts:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getMbrAmounts()(uint64,uint64,uint64,uint64)
	callsub getMbrAmounts
	concat
	log
	int 1
	return

// getMbrAmounts(): MbrAmounts
getMbrAmounts:
	proto 0 1

	// contracts/validatorRegistry.algo.ts:149
	// return {
	//             AddValidatorMbr: this.costForBoxStorage(1 /* v prefix */ + len<ValidatorID>() + len<ValidatorInfo>()),
	//             AddPoolMbr: this.minBalanceForAccount(1, 0, 0, 0, 0, StakingPool.schema.global.numUint, 0),
	//             PoolInitMbr:
	//                 ALGORAND_ACCOUNT_MIN_BALANCE +
	//                 this.costForBoxStorage(7 /* 'stakers' name */ + len<StakedInfo>() * MAX_STAKERS_PER_POOL),
	//             AddStakerMbr:
	//                 // how much to charge for first time a staker adds stake - since we add a tracking box per staker
	//                 this.costForBoxStorage(
	//                     3 /* 'sps' prefix */ + len<Address>() + len<ValidatorPoolKey>() * MAX_POOLS_PER_STAKER
	//                 ), // size of key + all values
	//         };
	int 1602
	callsub costForBoxStorage
	itob
	int 0
	int 8
	int 0
	dupn 3
	int 1
	callsub minBalanceForAccount
	itob
	concat
	int 100000
	int 5127
	callsub costForBoxStorage
	+
	itob
	concat
	int 179
	callsub costForBoxStorage
	itob
	concat
	retsub

// getNumValidators()uint64
*abi_route_getNumValidators:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getNumValidators()uint64
	callsub getNumValidators
	itob
	concat
	log
	int 1
	return

// getNumValidators(): uint64
//
// Returns the current number of validators
getNumValidators:
	proto 0 1

	// contracts/validatorRegistry.algo.ts:168
	// return this.numValidators.value;
	byte 0x6e756d56 // "numV"
	app_global_get
	retsub

// getValidatorConfig(uint64)(uint64,address,address,uint64,uint16,uint32,address,uint64,uint64,uint8)
*abi_route_getValidatorConfig:
	// The ABI return prefix
	byte 0x151f7c75

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute getValidatorConfig(uint64)(uint64,address,address,uint64,uint16,uint32,address,uint64,uint64,uint8)
	callsub getValidatorConfig
	concat
	log
	int 1
	return

// getValidatorConfig(validatorID: ValidatorID): ValidatorConfig
getValidatorConfig:
	proto 1 1

	// contracts/validatorRegistry.algo.ts:178
	// return this.ValidatorList(validatorID).value.Config;
	int 0
	int 135
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	retsub

// getValidatorState(uint64)(uint16,uint64,uint64)
*abi_route_getValidatorState:
	// The ABI return prefix
	byte 0x151f7c75

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute getValidatorState(uint64)(uint16,uint64,uint64)
	callsub getValidatorState
	concat
	log
	int 1
	return

// getValidatorState(validatorID: ValidatorID): ValidatorCurState
getValidatorState:
	proto 1 1

	// contracts/validatorRegistry.algo.ts:183
	// return this.ValidatorList(validatorID).value.State;
	int 135 // headOffset
	int 18
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	retsub

// getValidatorOwnerAndManager(uint64)(address,address)
*abi_route_getValidatorOwnerAndManager:
	// The ABI return prefix
	byte 0x151f7c75

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute getValidatorOwnerAndManager(uint64)(address,address)
	callsub getValidatorOwnerAndManager
	concat
	log
	int 1
	return

// getValidatorOwnerAndManager(validatorID: ValidatorID): [Address, Address]
getValidatorOwnerAndManager:
	proto 1 1

	// contracts/validatorRegistry.algo.ts:188
	// return [
	//             this.ValidatorList(validatorID).value.Config.Owner,
	//             this.ValidatorList(validatorID).value.Config.Manager,
	//         ];
	int 8
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	int 40
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	concat
	retsub

// getPoolAppID((uint64,uint64,uint64))uint64
*abi_route_getPoolAppID:
	// The ABI return prefix
	byte 0x151f7c75

	// poolKey: (uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	int 24
	==
	assert

	// execute getPoolAppID((uint64,uint64,uint64))uint64
	callsub getPoolAppID
	itob
	concat
	log
	int 1
	return

// getPoolAppID(poolKey: ValidatorPoolKey): uint64
getPoolAppID:
	proto 1 1

	// contracts/validatorRegistry.algo.ts:197
	// return this.ValidatorList(poolKey.ID).value.Pools[poolKey.PoolID - 1].PoolAppID;
	int 153 // headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 2 // headOffset
	+
	int 8
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	retsub

// getPoolInfo((uint64,uint64,uint64))(uint16,uint64,uint16,uint64)
*abi_route_getPoolInfo:
	// The ABI return prefix
	byte 0x151f7c75

	// poolKey: (uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	int 24
	==
	assert

	// execute getPoolInfo((uint64,uint64,uint64))(uint16,uint64,uint16,uint64)
	callsub getPoolInfo
	concat
	log
	int 1
	return

// getPoolInfo(poolKey: ValidatorPoolKey): PoolInfo
getPoolInfo:
	proto 1 1

	// contracts/validatorRegistry.algo.ts:202
	// return this.ValidatorList(poolKey.ID).value.Pools[poolKey.PoolID - 1];
	int 153 // headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 20
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	retsub

// getStakedPoolsForAccount(account)(uint64,uint64,uint64)[]
*abi_route_getStakedPoolsForAccount:
	// The ABI return prefix
	byte 0x151f7c75

	// staker: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute getStakedPoolsForAccount(account)(uint64,uint64,uint64)[]
	callsub getStakedPoolsForAccount
	dup
	len
	int 24
	/
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// getStakedPoolsForAccount(staker: AccountReference): ValidatorPoolKey[]
//
// Retrieves the staked pools for an account.
//
// @param {Account} staker - The account to retrieve staked pools for.
// @return {ValidatorPoolKey[]} - The array of staked pools for the account.
getStakedPoolsForAccount:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// *if0_condition
	// contracts/validatorRegistry.algo.ts:212
	// !this.StakerPoolSet(staker).exists
	byte 0x737073 // "sps"
	frame_dig -1 // staker: AccountReference
	concat
	box_len
	swap
	pop
	!
	bz *if0_end

	// *if0_consequent
	// contracts/validatorRegistry.algo.ts:213
	// return [];
	byte 0x
	retsub

*if0_end:
	// contracts/validatorRegistry.algo.ts:215
	// retData: ValidatorPoolKey[] = []
	byte 0x
	frame_bury 0 // retData: ValidatorPoolKey[]

	// contracts/validatorRegistry.algo.ts:216
	// poolSet = clone(this.StakerPoolSet(staker).value)
	byte 0x737073 // "sps"
	frame_dig -1 // staker: AccountReference
	concat
	box_get
	assert
	frame_bury 1 // poolSet: (uint64,uint64,uint64)[6]

	// contracts/validatorRegistry.algo.ts:217
	// for (let i = 0; i < poolSet.length; i += 1)
	int 0
	frame_bury 2 // i: uint64

*for_0:
	// contracts/validatorRegistry.algo.ts:217
	// i < poolSet.length
	frame_dig 2 // i: uint64
	int 6
	<
	bz *for_0_end

	// *if1_condition
	// contracts/validatorRegistry.algo.ts:218
	// poolSet[i].ID !== 0
	frame_dig 1 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 2 // i: uint64
	int 24
	* // acc * typeLength
	int 0
	+
	int 8
	extract3
	btoi
	int 0
	!=
	bz *if1_end

	// *if1_consequent
	// contracts/validatorRegistry.algo.ts:219
	// retData.push(poolSet[i])
	frame_dig 0 // retData: ValidatorPoolKey[]
	frame_dig 1 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 2 // i: uint64
	int 24
	* // acc * typeLength
	int 24
	extract3
	concat
	frame_bury 0 // retData: ValidatorPoolKey[]

*if1_end:

*for_0_continue:
	// contracts/validatorRegistry.algo.ts:217
	// i += 1
	frame_dig 2 // i: uint64
	int 1
	+
	frame_bury 2 // i: uint64
	b *for_0

*for_0_end:
	// contracts/validatorRegistry.algo.ts:222
	// return retData;
	frame_dig 0 // retData: ValidatorPoolKey[]

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// addValidator(pay,string,(uint64,address,address,uint64,uint16,uint32,address,uint64,uint64,uint8))uint64
*abi_route_addValidator:
	// The ABI return prefix
	byte 0x151f7c75

	// config: (uint64,address,address,uint64,uint16,uint32,address,uint64,uint64,uint8)
	txna ApplicationArgs 2
	dup
	len
	int 135
	==
	assert

	// nfdName: string
	txna ApplicationArgs 1
	extract 2 0

	// mbrPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute addValidator(pay,string,(uint64,address,address,uint64,uint16,uint32,address,uint64,uint64,uint8))uint64
	callsub addValidator
	itob
	concat
	log
	int 1
	return

// addValidator(mbrPayment: PayTxn, nfdName: string, config: ValidatorConfig): uint64
//
// Adds a new validator
// @param mbrPayment payment from caller which covers mbr increase of new validator storage
// @param nfdName (Optional) Name of nfd (used as double-check against id specified in config)
// @param config ValidatorConfig struct
// @returns validator ID
addValidator:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/validatorRegistry.algo.ts:232
	// this.validateConfig(config)
	frame_dig -3 // config: ValidatorConfig
	callsub validateConfig

	// contracts/validatorRegistry.algo.ts:233
	// assert(config.Owner !== Address.zeroAddress)
	frame_dig -3 // config: ValidatorConfig
	extract 8 32
	global ZeroAddress
	!=
	assert

	// contracts/validatorRegistry.algo.ts:234
	// assert(config.Manager !== Address.zeroAddress)
	frame_dig -3 // config: ValidatorConfig
	extract 40 32
	global ZeroAddress
	!=
	assert

	// contracts/validatorRegistry.algo.ts:235
	// assert(this.txn.sender === config.Owner, 'sender must be owner to add new validator')
	txn Sender
	frame_dig -3 // config: ValidatorConfig
	extract 8 32
	==

	// sender must be owner to add new validator
	assert

	// contracts/validatorRegistry.algo.ts:237
	// verifyPayTxn(mbrPayment, { amount: this.getMbrAmounts().AddValidatorMbr })
	// verify amount
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Amount
	callsub getMbrAmounts
	extract 0 8
	btoi
	==
	assert

	// contracts/validatorRegistry.algo.ts:240
	// validatorID = this.numValidators.value + 1
	byte 0x6e756d56 // "numV"
	app_global_get
	int 1
	+
	frame_bury 0 // validatorID: uint64

	// contracts/validatorRegistry.algo.ts:241
	// this.numValidators.value = validatorID
	byte 0x6e756d56 // "numV"
	frame_dig 0 // validatorID: uint64
	app_global_put

	// contracts/validatorRegistry.algo.ts:243
	// this.ValidatorList(validatorID).create()
	byte 0x76 // "v"
	frame_dig 0 // validatorID: uint64
	itob
	concat
	int 1593
	box_create
	pop

	// contracts/validatorRegistry.algo.ts:244
	// this.ValidatorList(validatorID).value.Config = config
	int 0
	frame_dig -3 // config: ValidatorConfig
	byte 0x76 // "v"
	frame_dig 0 // validatorID: uint64
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:245
	// this.ValidatorList(validatorID).value.Config.ID = validatorID
	int 0
	frame_dig 0 // validatorID: uint64
	itob
	byte 0x76 // "v"
	frame_dig 0 // validatorID: uint64
	itob
	concat
	cover 2
	box_replace

	// *if2_condition
	// contracts/validatorRegistry.algo.ts:247
	// config.NFDForInfo !== 0
	frame_dig -3 // config: ValidatorConfig
	extract 72 8
	btoi
	int 0
	!=
	bz *if2_end

	// *if2_consequent
	// contracts/validatorRegistry.algo.ts:249
	// sendAppCall({
	//                 applicationID: AppID.fromUint64(this.NFDRegistryAppID),
	//                 applicationArgs: ['is_valid_nfd_appid', nfdName, itob(config.NFDForInfo)],
	//             })
	itxn_begin
	int appl
	itxn_field TypeEnum

	// contracts/validatorRegistry.algo.ts:250
	// applicationID: AppID.fromUint64(this.NFDRegistryAppID)
	pushint TMPL_NFDRegistryAppID
	itxn_field ApplicationID

	// contracts/validatorRegistry.algo.ts:251
	// applicationArgs: ['is_valid_nfd_appid', nfdName, itob(config.NFDForInfo)]
	byte 0x69735f76616c69645f6e66645f6170706964 // "is_valid_nfd_appid"
	itxn_field ApplicationArgs
	frame_dig -2 // nfdName: string
	itxn_field ApplicationArgs
	frame_dig -3 // config: ValidatorConfig
	extract 72 8
	btoi
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/validatorRegistry.algo.ts:254
	// assert(
	//                 this.txn.sender === (AppID.fromUint64(config.NFDForInfo).globalState('i.owner.a') as Address),
	//                 'If specifying NFD, account adding validator must be owner'
	//             )
	txn Sender
	frame_dig -3 // config: ValidatorConfig
	extract 72 8
	btoi
	byte 0x692e6f776e65722e61 // "i.owner.a"
	app_global_get_ex
	assert
	==

	// If specifying NFD, account adding validator must be owner
	assert

*if2_end:
	// contracts/validatorRegistry.algo.ts:259
	// return validatorID;
	frame_dig 0 // validatorID: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// changeValidatorManager(uint64,address)void
*abi_route_changeValidatorManager:
	// manager: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute changeValidatorManager(uint64,address)void
	callsub changeValidatorManager
	int 1
	return

// changeValidatorManager(validatorID: ValidatorID, manager: Address): void
changeValidatorManager:
	proto 2 0

	// contracts/validatorRegistry.algo.ts:263
	// assert(this.txn.sender === this.ValidatorList(validatorID).value.Config.Owner)
	txn Sender
	int 8
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	==
	assert

	// contracts/validatorRegistry.algo.ts:264
	// this.ValidatorList(validatorID).value.Config.Manager = manager
	int 40
	frame_dig -2 // manager: Address
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace
	retsub

// changeValidatorNFD(uint64,uint64,string)void
*abi_route_changeValidatorNFD:
	// nfdName: string
	txna ApplicationArgs 3
	extract 2 0

	// nfdAppID: uint64
	txna ApplicationArgs 2
	btoi

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute changeValidatorNFD(uint64,uint64,string)void
	callsub changeValidatorNFD
	int 1
	return

// changeValidatorNFD(validatorID: ValidatorID, nfdAppID: uint64, nfdName: string): void
changeValidatorNFD:
	proto 3 0

	// contracts/validatorRegistry.algo.ts:268
	// assert(
	//             this.txn.sender === this.ValidatorList(validatorID).value.Config.Owner ||
	//                 this.txn.sender === this.ValidatorList(validatorID).value.Config.Manager
	//         )
	txn Sender
	int 8
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	==
	dup
	bnz *skip_or0
	txn Sender
	int 40
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	==
	||

*skip_or0:
	assert

	// contracts/validatorRegistry.algo.ts:273
	// sendAppCall({
	//             applicationID: AppID.fromUint64(this.NFDRegistryAppID),
	//             applicationArgs: ['is_valid_nfd_appid', nfdName, itob(nfdAppID)],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum

	// contracts/validatorRegistry.algo.ts:274
	// applicationID: AppID.fromUint64(this.NFDRegistryAppID)
	pushint TMPL_NFDRegistryAppID
	itxn_field ApplicationID

	// contracts/validatorRegistry.algo.ts:275
	// applicationArgs: ['is_valid_nfd_appid', nfdName, itob(nfdAppID)]
	byte 0x69735f76616c69645f6e66645f6170706964 // "is_valid_nfd_appid"
	itxn_field ApplicationArgs
	frame_dig -3 // nfdName: string
	itxn_field ApplicationArgs
	frame_dig -2 // nfdAppID: uint64
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/validatorRegistry.algo.ts:278
	// assert(
	//             this.txn.sender === (AppID.fromUint64(nfdAppID).globalState('i.owner.a') as Address),
	//             'If specifying NFD, account adding validator must be owner'
	//         )
	txn Sender
	frame_dig -2 // nfdAppID: uint64
	byte 0x692e6f776e65722e61 // "i.owner.a"
	app_global_get_ex
	assert
	==

	// If specifying NFD, account adding validator must be owner
	assert

	// contracts/validatorRegistry.algo.ts:282
	// this.ValidatorList(validatorID).value.Config.NFDForInfo = nfdAppID
	int 72
	frame_dig -2 // nfdAppID: uint64
	itob
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace
	retsub

// changeValidatorCommissionAddress(uint64,address)void
*abi_route_changeValidatorCommissionAddress:
	// commissionAddress: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute changeValidatorCommissionAddress(uint64,address)void
	callsub changeValidatorCommissionAddress
	int 1
	return

// changeValidatorCommissionAddress(validatorID: ValidatorID, commissionAddress: Address): void
changeValidatorCommissionAddress:
	proto 2 0

	// contracts/validatorRegistry.algo.ts:286
	// assert(
	//             this.txn.sender === this.ValidatorList(validatorID).value.Config.Owner ||
	//                 this.txn.sender === this.ValidatorList(validatorID).value.Config.Manager
	//         )
	txn Sender
	int 8
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	==
	dup
	bnz *skip_or1
	txn Sender
	int 40
	int 32
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	==
	||

*skip_or1:
	assert

	// contracts/validatorRegistry.algo.ts:290
	// this.ValidatorList(validatorID).value.Config.ValidatorCommissionAddress = commissionAddress
	int 86
	frame_dig -2 // commissionAddress: Address
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace
	retsub

// addPool(pay,uint64)(uint64,uint64,uint64)
*abi_route_addPool:
	// The ABI return prefix
	byte 0x151f7c75

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// mbrPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute addPool(pay,uint64)(uint64,uint64,uint64)
	callsub addPool
	concat
	log
	int 1
	return

// addPool(mbrPayment: PayTxn, validatorID: ValidatorID): ValidatorPoolKey
//
// Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.
// The caller must pay the cost of the validators MBR increase as well as the MBR that will be needed for the pool itself.
// @param {PayTxn} mbrPayment payment from caller which covers mbr increase of adding a new pool
// @param {uint64} validatorID is ID of validator to pool to (must be owner or manager)
// @returns {ValidatorPoolKey} pool key to created pool
addPool:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/validatorRegistry.algo.ts:301
	// verifyPayTxn(mbrPayment, { amount: this.getMbrAmounts().AddPoolMbr, receiver: this.app.address })
	// verify amount
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Amount
	callsub getMbrAmounts
	extract 8 8
	btoi
	==
	assert

	// verify receiver
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// contracts/validatorRegistry.algo.ts:303
	// assert(this.ValidatorList(validatorID).exists)
	byte 0x76 // "v"
	frame_dig -2 // validatorID: ValidatorID
	itob
	concat
	box_len
	swap
	pop
	assert

	// contracts/validatorRegistry.algo.ts:306
	// assert(
	//             this.txn.sender === this.ValidatorList(validatorID).value.Config.Owner ||
	//                 this.txn.sender === this.ValidatorList(validatorID).value.Config.Manager
	//         )
	txn Sender
	int 8
	int 32
	byte 0x76 // "v"
	frame_dig -2 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	==
	dup
	bnz *skip_or2
	txn Sender
	int 40
	int 32
	byte 0x76 // "v"
	frame_dig -2 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	==
	||

*skip_or2:
	assert

	// contracts/validatorRegistry.algo.ts:311
	// numPools = this.ValidatorList(validatorID).value.State.NumPools
	int 135
	int 2
	byte 0x76 // "v"
	frame_dig -2 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // numPools: uint16

	// *if3_condition
	// contracts/validatorRegistry.algo.ts:312
	// (numPools as uint64) >= MAX_POOLS
	frame_dig 0 // numPools: uint16
	int 72
	>=
	bz *if3_end

	// *if3_consequent
	err // 'already at max pool size'

*if3_end:
	// contracts/validatorRegistry.algo.ts:315
	// numPools += 1
	frame_dig 0 // numPools: uint16
	int 1
	+
	frame_bury 0 // numPools: uint16

	// contracts/validatorRegistry.algo.ts:318
	// sendAppCall({
	//             onCompletion: OnCompletion.NoOp,
	//             approvalProgram: AppID.fromUint64(this.StakingPoolTemplateAppID.value).approvalProgram,
	//             clearStateProgram: AppID.fromUint64(this.StakingPoolTemplateAppID.value).clearStateProgram,
	//             globalNumUint: AppID.fromUint64(this.StakingPoolTemplateAppID.value).globalNumUint,
	//             globalNumByteSlice: AppID.fromUint64(this.StakingPoolTemplateAppID.value).globalNumByteSlice,
	//             extraProgramPages: AppID.fromUint64(this.StakingPoolTemplateAppID.value).extraProgramPages,
	//             applicationArgs: [
	//                 // creatingContractID, validatorID, poolID, minEntryStake, maxStakeAllowed
	//                 method('createApplication(uint64,uint64,uint64,uint64,uint64)void'),
	//                 itob(this.app.id),
	//                 itob(validatorID),
	//                 itob(numPools as uint64),
	//                 itob(this.ValidatorList(validatorID).value.Config.MinEntryStake),
	//                 itob(this.ValidatorList(validatorID).value.Config.MaxAlgoPerPool),
	//             ],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum

	// contracts/validatorRegistry.algo.ts:319
	// onCompletion: OnCompletion.NoOp
	int 0 // NoOp
	itxn_field OnCompletion

	// contracts/validatorRegistry.algo.ts:320
	// approvalProgram: AppID.fromUint64(this.StakingPoolTemplateAppID.value).approvalProgram
	byte 0x706f6f6c54656d706c6174654170704944 // "poolTemplateAppID"
	app_global_get
	app_params_get AppApprovalProgram
	pop
	itxn_field ApprovalProgram

	// contracts/validatorRegistry.algo.ts:321
	// clearStateProgram: AppID.fromUint64(this.StakingPoolTemplateAppID.value).clearStateProgram
	byte 0x706f6f6c54656d706c6174654170704944 // "poolTemplateAppID"
	app_global_get
	app_params_get AppClearStateProgram
	pop
	itxn_field ClearStateProgram

	// contracts/validatorRegistry.algo.ts:322
	// globalNumUint: AppID.fromUint64(this.StakingPoolTemplateAppID.value).globalNumUint
	byte 0x706f6f6c54656d706c6174654170704944 // "poolTemplateAppID"
	app_global_get
	app_params_get AppGlobalNumUint
	pop
	itxn_field GlobalNumUint

	// contracts/validatorRegistry.algo.ts:323
	// globalNumByteSlice: AppID.fromUint64(this.StakingPoolTemplateAppID.value).globalNumByteSlice
	byte 0x706f6f6c54656d706c6174654170704944 // "poolTemplateAppID"
	app_global_get
	app_params_get AppGlobalNumByteSlice
	pop
	itxn_field GlobalNumByteSlice

	// contracts/validatorRegistry.algo.ts:324
	// extraProgramPages: AppID.fromUint64(this.StakingPoolTemplateAppID.value).extraProgramPages
	byte 0x706f6f6c54656d706c6174654170704944 // "poolTemplateAppID"
	app_global_get
	app_params_get AppExtraProgramPages
	pop
	itxn_field ExtraProgramPages

	// contracts/validatorRegistry.algo.ts:325
	// applicationArgs: [
	//                 // creatingContractID, validatorID, poolID, minEntryStake, maxStakeAllowed
	//                 method('createApplication(uint64,uint64,uint64,uint64,uint64)void'),
	//                 itob(this.app.id),
	//                 itob(validatorID),
	//                 itob(numPools as uint64),
	//                 itob(this.ValidatorList(validatorID).value.Config.MinEntryStake),
	//                 itob(this.ValidatorList(validatorID).value.Config.MaxAlgoPerPool),
	//             ]
	method "createApplication(uint64,uint64,uint64,uint64,uint64)void"
	itxn_field ApplicationArgs
	txna Applications 0
	itob
	itxn_field ApplicationArgs
	frame_dig -2 // validatorID: ValidatorID
	itob
	itxn_field ApplicationArgs
	frame_dig 0 // numPools: uint16
	itob
	itxn_field ApplicationArgs
	int 118
	int 8
	byte 0x76 // "v"
	frame_dig -2 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	itxn_field ApplicationArgs
	int 126
	int 8
	byte 0x76 // "v"
	frame_dig -2 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/validatorRegistry.algo.ts:336
	// this.ValidatorList(validatorID).value.State.NumPools = numPools
	int 135
	frame_dig 0 // numPools: uint16
	itob
	extract 6 2
	byte 0x76 // "v"
	frame_dig -2 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:339
	// this.ValidatorList(validatorID).value.Pools[numPools - 1].PoolAppID = this.itxn.createdApplicationID.id
	int 153 // headOffset
	frame_dig 0 // numPools: uint16
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 2 // headOffset
	+
	itxn CreatedApplicationID
	itob
	byte 0x76 // "v"
	frame_dig -2 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:342
	// return { ID: validatorID, PoolID: numPools as uint64, PoolAppID: this.itxn!.createdApplicationID.id };
	frame_dig -2 // validatorID: ValidatorID
	itob
	frame_dig 0 // numPools: uint16
	itob
	concat
	itxn CreatedApplicationID
	itob
	concat

	// set the subroutine return value
	frame_bury 0
	retsub

// addStake(pay,uint64)(uint64,uint64,uint64)
*abi_route_addStake:
	// The ABI return prefix
	byte 0x151f7c75

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// stakedAmountPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute addStake(pay,uint64)(uint64,uint64,uint64)
	callsub addStake
	concat
	log
	int 1
	return

// addStake(stakedAmountPayment: PayTxn, validatorID: ValidatorID): ValidatorPoolKey
//
// Adds stake to a validator pool.
//
// @param {PayTxn} stakedAmountPayment - payment coming from staker to place into a pool
// @param {ValidatorID} validatorID - The ID of the validator.
// @returns {ValidatorPoolKey} - The key of the validator pool.
addStake:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 4

	// contracts/validatorRegistry.algo.ts:353
	// assert(this.ValidatorList(validatorID).exists)
	byte 0x76 // "v"
	frame_dig -2 // validatorID: ValidatorID
	itob
	concat
	box_len
	swap
	pop
	assert

	// contracts/validatorRegistry.algo.ts:354
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts/validatorRegistry.algo.ts:356
	// staker = this.txn.sender
	txn Sender
	frame_bury 0 // staker: address

	// contracts/validatorRegistry.algo.ts:359
	// verifyPayTxn(stakedAmountPayment, {
	//             sender: staker,
	//             receiver: this.app.address,
	//         })
	// verify sender
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Sender
	frame_dig 0 // staker: address
	==
	assert

	// verify receiver
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// contracts/validatorRegistry.algo.ts:364
	// realAmount = stakedAmountPayment.amount
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	frame_bury 1 // realAmount: uint64

	// contracts/validatorRegistry.algo.ts:365
	// mbrAmtLeftBehind: uint64 = 0
	int 0
	frame_bury 2 // mbrAmtLeftBehind: uint64

	// *if4_condition
	// contracts/validatorRegistry.algo.ts:367
	// !this.StakerPoolSet(staker).exists
	byte 0x737073 // "sps"
	frame_dig 0 // staker: address
	concat
	box_len
	swap
	pop
	!
	bz *if4_end

	// *if4_consequent
	// contracts/validatorRegistry.algo.ts:370
	// mbrAmtLeftBehind = this.getMbrAmounts().AddStakerMbr
	callsub getMbrAmounts
	extract 24 8
	btoi
	frame_bury 2 // mbrAmtLeftBehind: uint64

	// contracts/validatorRegistry.algo.ts:371
	// realAmount -= mbrAmtLeftBehind
	frame_dig 1 // realAmount: uint64
	frame_dig 2 // mbrAmtLeftBehind: uint64
	-
	frame_bury 1 // realAmount: uint64

	// contracts/validatorRegistry.algo.ts:372
	// this.StakerPoolSet(staker).create()
	byte 0x737073 // "sps"
	frame_dig 0 // staker: address
	concat
	int 144
	box_create
	pop

*if4_end:
	// contracts/validatorRegistry.algo.ts:376
	// findRet = this.findPoolForStaker(validatorID, staker, realAmount)
	frame_dig 1 // realAmount: uint64
	frame_dig 0 // staker: address
	frame_dig -2 // validatorID: ValidatorID
	callsub findPoolForStaker
	frame_bury 3 // findRet: ((uint64,uint64,uint64),bool)

	// contracts/validatorRegistry.algo.ts:377
	// poolKey = findRet[0]
	// contracts/validatorRegistry.algo.ts:378
	// isNewStaker = findRet[1]
	frame_dig 3 // findRet: ((uint64,uint64,uint64),bool)
	store 255 // full array
	load 255 // full array
	int 192
	getbit
	frame_bury 4 // isNewStaker: bool

	// *if5_condition
	// contracts/validatorRegistry.algo.ts:379
	// poolKey.PoolID === 0
	frame_dig 3 // findRet: ((uint64,uint64,uint64),bool)
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	int 0
	==
	bz *if5_end

	// *if5_consequent
	err // 'No pool available with free stake.  Validator needs to add another pool'

*if5_end:
	// contracts/validatorRegistry.algo.ts:384
	// this.updateStakerPoolSet(staker, poolKey)
	frame_dig 3 // findRet: ((uint64,uint64,uint64),bool)
	store 255 // full array
	load 255 // full array
	extract 0 24
	frame_dig 0 // staker: address
	callsub updateStakerPoolSet

	// contracts/validatorRegistry.algo.ts:387
	// this.callPoolAddStake(stakedAmountPayment, poolKey, mbrAmtLeftBehind, isNewStaker)
	frame_dig 4 // isNewStaker: bool
	frame_dig 2 // mbrAmtLeftBehind: uint64
	frame_dig 3 // findRet: ((uint64,uint64,uint64),bool)
	store 255 // full array
	load 255 // full array
	extract 0 24
	frame_dig -1 // stakedAmountPayment: PayTxn
	callsub callPoolAddStake

	// contracts/validatorRegistry.algo.ts:388
	// return poolKey;
	frame_dig 3 // findRet: ((uint64,uint64,uint64),bool)
	store 255 // full array
	load 255 // full array
	extract 0 24

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 4
	retsub

// verifyPoolKeyCaller(poolKey: ValidatorPoolKey): void
verifyPoolKeyCaller:
	proto 1 0

	// contracts/validatorRegistry.algo.ts:395
	// assert(this.ValidatorList(poolKey.ID).exists)
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	box_len
	swap
	pop
	assert

	// contracts/validatorRegistry.algo.ts:396
	// assert((poolKey.PoolID as uint64) < 2 ** 16)
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 2
	int 16
	exp
	<
	assert

	// contracts/validatorRegistry.algo.ts:397
	// assert(poolKey.PoolID > 0 && (poolKey.PoolID as uint16) <= this.ValidatorList(poolKey.ID).value.State.NumPools)
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 0
	>
	dup
	bz *skip_and0
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 135
	int 2
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	<=
	&&

*skip_and0:
	assert

	// contracts/validatorRegistry.algo.ts:400
	// assert(
	//             poolKey.PoolAppID === this.ValidatorList(poolKey.ID).value.Pools[poolKey.PoolID - 1].PoolAppID,
	//             "The passed in app id doesn't match the passed in ids"
	//         )
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 16 8
	btoi
	int 153 // headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 2 // headOffset
	+
	int 8
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	==

	// The passed in app id doesn't match the passed in ids
	assert

	// contracts/validatorRegistry.algo.ts:405
	// assert(this.txn.sender === AppID.fromUint64(poolKey.PoolAppID).address)
	txn Sender
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 16 8
	btoi
	app_params_get AppAddress
	pop
	==
	assert

	// contracts/validatorRegistry.algo.ts:407
	// assert(poolKey.ID === (AppID.fromUint64(poolKey.PoolAppID).globalState('validatorID') as uint64))
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 16 8
	btoi
	byte 0x76616c696461746f724944 // "validatorID"
	app_global_get_ex
	assert
	==
	assert

	// contracts/validatorRegistry.algo.ts:408
	// assert(poolKey.PoolID === (AppID.fromUint64(poolKey.PoolAppID).globalState('poolID') as uint64))
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 16 8
	btoi
	byte 0x706f6f6c4944 // "poolID"
	app_global_get_ex
	assert
	==
	assert
	retsub

// stakeUpdatedViaRewards((uint64,uint64,uint64),uint64)void
*abi_route_stakeUpdatedViaRewards:
	// amountToAdd: uint64
	txna ApplicationArgs 2
	btoi

	// poolKey: (uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	int 24
	==
	assert

	// execute stakeUpdatedViaRewards((uint64,uint64,uint64),uint64)void
	callsub stakeUpdatedViaRewards
	int 1
	return

// stakeUpdatedViaRewards(poolKey: ValidatorPoolKey, amountToAdd: uint64): void
//
// stakeUpdatedViaRewards is called by Staking Pools to inform the validator (us) that a particular amount of total
// stake has been added to the specified pool.  This is used to update the stats we have in our PoolInfo storage.
// The calling App ID is validated against our pool list as well.
// @param poolKey - ValidatorPoolKey type
// @param amountToAdd - amount this validator's total stake increased via rewards
stakeUpdatedViaRewards:
	proto 2 0

	// contracts/validatorRegistry.algo.ts:419
	// this.verifyPoolKeyCaller(poolKey)
	frame_dig -1 // poolKey: ValidatorPoolKey
	callsub verifyPoolKeyCaller

	// contracts/validatorRegistry.algo.ts:422
	// this.ValidatorList(poolKey.ID).value.Pools[poolKey.PoolID - 1].TotalAlgoStaked += amountToAdd
	int 153 // headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 12 // headOffset
	+
	int 153 // headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 12 // headOffset
	+
	int 8
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -2 // amountToAdd: uint64
	+
	itob
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:423
	// this.ValidatorList(poolKey.ID).value.State.TotalAlgoStaked += amountToAdd
	int 145
	dup
	int 8
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -2 // amountToAdd: uint64
	+
	itob
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace
	retsub

// stakeRemoved((uint64,uint64,uint64),address,uint64,bool)void
*abi_route_stakeRemoved:
	// stakerRemoved: bool
	txna ApplicationArgs 4
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// amountRemoved: uint64
	txna ApplicationArgs 3
	btoi

	// staker: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// poolKey: (uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	int 24
	==
	assert

	// execute stakeRemoved((uint64,uint64,uint64),address,uint64,bool)void
	callsub stakeRemoved
	int 1
	return

// stakeRemoved(poolKey: ValidatorPoolKey, staker: Address, amountRemoved: uint64, stakerRemoved: boolean): void
//
// stakerRemoved is called by Staking Pools to inform the validator (us) that a particular amount of total stake has been removed
// from the specified pool.  This is used to update the stats we have in our PoolInfo storage.
// The calling App ID is validated against our pool list as well.
// @param poolKey - ValidatorPoolKey type - [validatorID, PoolID] compound type
// @param staker
// @param amountRemoved
// @param stakerRemoved
stakeRemoved:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/validatorRegistry.algo.ts:436
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts/validatorRegistry.algo.ts:438
	// this.verifyPoolKeyCaller(poolKey)
	frame_dig -1 // poolKey: ValidatorPoolKey
	callsub verifyPoolKeyCaller

	// contracts/validatorRegistry.algo.ts:442
	// assert(amountRemoved > 0)
	frame_dig -3 // amountRemoved: uint64
	int 0
	>
	assert

	// contracts/validatorRegistry.algo.ts:445
	// this.ValidatorList(poolKey.ID).value.Pools[poolKey.PoolID - 1].TotalAlgoStaked -= amountRemoved
	int 153 // headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 12 // headOffset
	+
	int 153 // headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 12 // headOffset
	+
	int 8
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -3 // amountRemoved: uint64
	-
	itob
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:446
	// this.ValidatorList(poolKey.ID).value.State.TotalAlgoStaked -= amountRemoved
	int 145
	dup
	int 8
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -3 // amountRemoved: uint64
	-
	itob
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// *if6_condition
	// contracts/validatorRegistry.algo.ts:447
	// stakerRemoved
	frame_dig -4 // stakerRemoved: boolean
	bz *if6_end

	// *if6_consequent
	// contracts/validatorRegistry.algo.ts:449
	// this.ValidatorList(poolKey.ID).value.Pools[poolKey.PoolID - 1].TotalStakers -= 1
	int 153 // headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 10 // headOffset
	+
	int 153 // headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 10 // headOffset
	+
	int 2
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	int 1
	-
	itob
	extract 6 2
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:451
	// stakerOutOfThisValidator = this.removeFromStakerPoolSet(staker, <ValidatorPoolKey>{
	//                 ID: poolKey.ID,
	//                 PoolID: poolKey.PoolID,
	//                 PoolAppID: poolKey.PoolAppID,
	//             })
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	itob
	concat
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 16 8
	btoi
	itob
	concat
	frame_dig -2 // staker: Address
	callsub removeFromStakerPoolSet
	frame_bury 0 // stakerOutOfThisValidator: bool

	// *if7_condition
	// contracts/validatorRegistry.algo.ts:457
	// stakerOutOfThisValidator
	frame_dig 0 // stakerOutOfThisValidator: bool
	bz *if7_end

	// *if7_consequent
	// contracts/validatorRegistry.algo.ts:458
	// this.ValidatorList(poolKey.ID).value.State.TotalStakers -= 1
	int 137
	dup
	int 8
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	int 1
	-
	itob
	byte 0x76 // "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

*if7_end:

*if6_end:
	retsub

// findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool)
*abi_route_findPoolForStaker:
	// The ABI return prefix
	byte 0x151f7c75

	// amountToStake: uint64
	txna ApplicationArgs 3
	btoi

	// staker: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool)
	callsub findPoolForStaker
	concat
	log
	int 1
	return

// findPoolForStaker(validatorID: ValidatorID, staker: Address, amountToStake: uint64): [ValidatorPoolKey, boolean]
//
// Finds the pool for a staker based on the provided validator ID, staker address, and amount to stake.
// First checks the stakers 'already staked list' for the validator preferring those (adding if possible) then adds
// to new pool if necessary.
//
// @param {ValidatorID} validatorID - The ID of the validator.
// @param {Address} staker - The address of the staker.
// @param {uint64} amountToStake - The amount to stake.
// @returns {ValidatorPoolKey, boolean} - The pool for the staker and true/false on whether the staker is 'new' to this validator
findPoolForStaker:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 6

	// contracts/validatorRegistry.algo.ts:475
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts/validatorRegistry.algo.ts:477
	// isBrandNewStaker = true
	int 1
	frame_bury 0 // isBrandNewStaker: bool

	// contracts/validatorRegistry.algo.ts:481
	// maxPerPool = this.ValidatorList(validatorID).value.Config.MaxAlgoPerPool
	int 126
	int 8
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 1 // maxPerPool: uint64

	// *if8_condition
	// contracts/validatorRegistry.algo.ts:484
	// this.StakerPoolSet(staker).exists
	byte 0x737073 // "sps"
	frame_dig -2 // staker: Address
	concat
	box_len
	swap
	pop
	bz *if8_end

	// *if8_consequent
	// contracts/validatorRegistry.algo.ts:485
	// poolSet = clone(this.StakerPoolSet(staker).value)
	byte 0x737073 // "sps"
	frame_dig -2 // staker: Address
	concat
	box_get
	assert
	frame_bury 2 // poolSet: (uint64,uint64,uint64)[6]

	// contracts/validatorRegistry.algo.ts:486
	// assert(validatorID !== 0)
	frame_dig -1 // validatorID: ValidatorID
	int 0
	!=
	assert

	// contracts/validatorRegistry.algo.ts:487
	// for (let i = 0; i < poolSet.length; i += 1)
	int 0
	frame_bury 3 // i: uint64

*for_1:
	// contracts/validatorRegistry.algo.ts:487
	// i < poolSet.length
	frame_dig 3 // i: uint64
	int 6
	<
	bz *for_1_end

	// *if9_condition
	// contracts/validatorRegistry.algo.ts:488
	// poolSet[i].ID === validatorID
	frame_dig 2 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 3 // i: uint64
	int 24
	* // acc * typeLength
	int 0
	+
	int 8
	extract3
	btoi
	frame_dig -1 // validatorID: ValidatorID
	==
	bz *if9_end

	// *if9_consequent
	// contracts/validatorRegistry.algo.ts:490
	// log('found validator id entry for this staker')
	byte 0x666f756e642076616c696461746f7220696420656e74727920666f722074686973207374616b6572 // "found validator id entry for this staker"
	log

	// contracts/validatorRegistry.algo.ts:492
	// isBrandNewStaker = false
	int 0
	frame_bury 0 // isBrandNewStaker: bool

	// *if10_condition
	// contracts/validatorRegistry.algo.ts:494
	// this.ValidatorList(validatorID).value.Pools[poolSet[i].PoolID - 1].TotalAlgoStaked +
	//                             amountToStake <=
	//                         maxPerPool
	int 153 // headOffset
	frame_dig 2 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 3 // i: uint64
	int 24
	* // acc * typeLength
	int 8 // headOffset
	+
	int 8
	extract3
	btoi
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 12 // headOffset
	+
	int 8
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -3 // amountToStake: uint64
	+
	frame_dig 1 // maxPerPool: uint64
	<=
	bz *if10_end

	// *if10_consequent
	// contracts/validatorRegistry.algo.ts:498
	// return [poolSet[i], isBrandNewStaker];
	frame_dig 2 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 3 // i: uint64
	int 24
	* // acc * typeLength
	int 24
	extract3
	byte 0x00
	int 0
	frame_dig 0 // isBrandNewStaker: bool
	setbit
	concat

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

*if10_end:

*if9_end:

*for_1_continue:
	// contracts/validatorRegistry.algo.ts:487
	// i += 1
	frame_dig 3 // i: uint64
	int 1
	+
	frame_bury 3 // i: uint64
	b *for_1

*for_1_end:

*if8_end:
	// *if11_condition
	// contracts/validatorRegistry.algo.ts:503
	// isBrandNewStaker
	frame_dig 0 // isBrandNewStaker: bool
	bz *if11_end

	// *if11_consequent
	// contracts/validatorRegistry.algo.ts:504
	// log('in findPoolForStaker will return true for isBrandNewStaker')
	byte 0x696e2066696e64506f6f6c466f725374616b65722077696c6c2072657475726e207472756520666f722069734272616e644e65775374616b6572 // "in findPoolForStaker will return true for isBrandNewStaker"
	log

*if11_end:
	// contracts/validatorRegistry.algo.ts:508
	// assert(
	//             amountToStake >= this.ValidatorList(validatorID).value.Config.MinEntryStake,
	//             'must stake at least the minimum for this pool'
	//         )
	frame_dig -3 // amountToStake: uint64
	int 118
	int 8
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	>=

	// must stake at least the minimum for this pool
	assert

	// contracts/validatorRegistry.algo.ts:514
	// pools = clone(this.ValidatorList(validatorID).value.Pools)
	int 153 // headOffset
	int 1440
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	frame_bury 4 // pools: (uint16,uint64,uint16,uint64)[72]

	// contracts/validatorRegistry.algo.ts:515
	// curNumPools = this.ValidatorList(validatorID).value.State.NumPools as uint64
	int 135
	int 2
	byte 0x76 // "v"
	frame_dig -1 // validatorID: ValidatorID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 5 // curNumPools: uint64

	// contracts/validatorRegistry.algo.ts:516
	// for (let i = 0; i < curNumPools; i += 1)
	int 0
	frame_bury 6 // i: uint64

*for_2:
	// contracts/validatorRegistry.algo.ts:516
	// i < curNumPools
	frame_dig 6 // i: uint64
	frame_dig 5 // curNumPools: uint64
	<
	bz *for_2_end

	// *if12_condition
	// contracts/validatorRegistry.algo.ts:517
	// pools[i].TotalAlgoStaked + amountToStake <= maxPerPool
	frame_dig 4 // pools: (uint16,uint64,uint16,uint64)[72]
	frame_dig 6 // i: uint64
	int 20
	* // acc * typeLength
	int 12 // headOffset
	+
	int 8
	extract3
	btoi
	frame_dig -3 // amountToStake: uint64
	+
	frame_dig 1 // maxPerPool: uint64
	<=
	bz *if12_end

	// *if12_consequent
	// contracts/validatorRegistry.algo.ts:518
	// return [{ ID: validatorID, PoolID: i + 1, PoolAppID: pools[i].PoolAppID }, isBrandNewStaker];
	frame_dig -1 // validatorID: ValidatorID
	itob
	frame_dig 6 // i: uint64
	int 1
	+
	itob
	concat
	frame_dig 4 // pools: (uint16,uint64,uint16,uint64)[72]
	frame_dig 6 // i: uint64
	int 20
	* // acc * typeLength
	int 2 // headOffset
	+
	int 8
	extract3
	btoi
	itob
	concat
	byte 0x00
	int 0
	frame_dig 0 // isBrandNewStaker: bool
	setbit
	concat

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 6
	retsub

*if12_end:

*for_2_continue:
	// contracts/validatorRegistry.algo.ts:516
	// i += 1
	frame_dig 6 // i: uint64
	int 1
	+
	frame_bury 6 // i: uint64
	b *for_2

*for_2_end:
	// contracts/validatorRegistry.algo.ts:522
	// return [{ ID: validatorID, PoolID: 0, PoolAppID: 0 }, isBrandNewStaker];
	frame_dig -1 // validatorID: ValidatorID
	itob
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x00
	int 0
	frame_dig 0 // isBrandNewStaker: bool
	setbit
	concat

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 6
	retsub

// validateConfig(config: ValidatorConfig): void
validateConfig:
	proto 1 0

	// contracts/validatorRegistry.algo.ts:527
	// assert(config.PayoutEveryXDays >= MIN_PAYOUT_DAYS && config.PayoutEveryXDays <= MAX_PAYOUT_DAYS)
	frame_dig -1 // config: ValidatorConfig
	extract 80 2
	btoi
	int 1
	>=
	dup
	bz *skip_and1
	frame_dig -1 // config: ValidatorConfig
	extract 80 2
	btoi
	int 30
	<=
	&&

*skip_and1:
	assert

	// contracts/validatorRegistry.algo.ts:528
	// assert(config.PercentToValidator >= MIN_PCT_TO_VALIDATOR && config.PercentToValidator <= MAX_PCT_TO_VALIDATOR)
	frame_dig -1 // config: ValidatorConfig
	extract 82 4
	btoi
	int 0
	>=
	dup
	bz *skip_and2
	frame_dig -1 // config: ValidatorConfig
	extract 82 4
	btoi
	int 1000000
	<=
	&&

*skip_and2:
	assert

	// *if13_condition
	// contracts/validatorRegistry.algo.ts:529
	// config.PercentToValidator !== 0
	frame_dig -1 // config: ValidatorConfig
	extract 82 4
	btoi
	int 0
	!=
	bz *if13_end

	// *if13_consequent
	// contracts/validatorRegistry.algo.ts:530
	// assert(
	//                 config.ValidatorCommissionAddress !== Address.zeroAddress,
	//                 'ValidatorCommissionAddress must be set if percent to validator is not 0'
	//             )
	frame_dig -1 // config: ValidatorConfig
	extract 86 32
	global ZeroAddress
	!=

	// ValidatorCommissionAddress must be set if percent to validator is not 0
	assert

*if13_end:
	// contracts/validatorRegistry.algo.ts:535
	// assert(config.MinEntryStake >= MIN_ALGO_STAKE_PER_POOL)
	frame_dig -1 // config: ValidatorConfig
	extract 118 8
	btoi
	int 1000000
	>=
	assert

	// contracts/validatorRegistry.algo.ts:536
	// assert(config.MaxAlgoPerPool <= MAX_ALGO_PER_POOL, 'enforce hard constraint to be safe to the network')
	frame_dig -1 // config: ValidatorConfig
	extract 126 8
	btoi
	int 20000000000000
	<=

	// enforce hard constraint to be safe to the network
	assert

	// contracts/validatorRegistry.algo.ts:537
	// assert(config.PoolsPerNode > 0 && config.PoolsPerNode <= MAX_POOLS_PER_NODE)
	frame_dig -1 // config: ValidatorConfig
	extract 134 1
	btoi
	int 0
	>
	dup
	bz *skip_and3
	frame_dig -1 // config: ValidatorConfig
	extract 134 1
	btoi
	int 6
	<=
	&&

*skip_and3:
	assert
	retsub

// callPoolAddStake(stakedAmountPayment: PayTxn, poolKey: ValidatorPoolKey, mbrAmtPaid: uint64, isNewStaker: boolean): void
//
// Adds a stakers amount of algo to a validator pool, transferring the algo we received from them (already verified
// by our caller) to the staking pool account, and then telling it about the amount being added for the specified
// staker.
//
// @param {PayTxn} stakedAmountPayment - payment coming from staker to place into a pool
// @param {ValidatorPoolKey} poolKey - The key of the validator pool.
// @param {uint64} mbrAmtPaid - Amount the user is leaving behind in the validator to pay for their Staker MBR cost
// @param {boolean} isNewStaker - if this is a new, first-time staker to the validator
callPoolAddStake:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts/validatorRegistry.algo.ts:556
	// poolAppID = this.ValidatorList(poolKey.ID).value.Pools[poolKey.PoolID - 1].PoolAppID
	int 153 // headOffset
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 2 // headOffset
	+
	int 8
	byte 0x76 // "v"
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // poolAppID: uint64

	// contracts/validatorRegistry.algo.ts:560
	// sendMethodCall<typeof StakingPool.prototype.addStake>({
	//             applicationID: AppID.fromUint64(poolAppID),
	//             methodArgs: [
	//                 // =======
	//                 // THIS IS A SEND of the amount received right back out and into the staking pool contract account.
	//                 { amount: stakedAmountPayment.amount - mbrAmtPaid, receiver: AppID.fromUint64(poolAppID).address },
	//                 // =======
	//                 stakedAmountPayment.sender,
	//             ],
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/validatorRegistry.algo.ts:565
	// amount: stakedAmountPayment.amount - mbrAmtPaid
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	frame_dig -3 // mbrAmtPaid: uint64
	-
	itxn_field Amount

	// contracts/validatorRegistry.algo.ts:565
	// receiver: AppID.fromUint64(poolAppID).address
	frame_dig 0 // poolAppID: uint64
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee
	itxn_next
	int appl
	itxn_field TypeEnum
	method "addStake(pay,address)uint64"
	itxn_field ApplicationArgs

	// contracts/validatorRegistry.algo.ts:561
	// applicationID: AppID.fromUint64(poolAppID)
	frame_dig 0 // poolAppID: uint64
	itxn_field ApplicationID

	// contracts/validatorRegistry.algo.ts:562
	// methodArgs: [
	//                 // =======
	//                 // THIS IS A SEND of the amount received right back out and into the staking pool contract account.
	//                 { amount: stakedAmountPayment.amount - mbrAmtPaid, receiver: AppID.fromUint64(poolAppID).address },
	//                 // =======
	//                 stakedAmountPayment.sender,
	//             ]
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Sender
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	btoi

	// contracts/validatorRegistry.algo.ts:572
	// poolNumStakers = AppID.fromUint64(poolAppID).globalState('numStakers') as uint64
	frame_dig 0 // poolAppID: uint64
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get_ex
	assert
	frame_bury 1 // poolNumStakers: uint64

	// contracts/validatorRegistry.algo.ts:573
	// poolAlgoStaked = AppID.fromUint64(poolAppID).globalState('staked') as uint64
	frame_dig 0 // poolAppID: uint64
	byte 0x7374616b6564 // "staked"
	app_global_get_ex
	assert
	frame_bury 2 // poolAlgoStaked: uint64

	// contracts/validatorRegistry.algo.ts:574
	// this.ValidatorList(poolKey.ID).value.Pools[poolKey.PoolID - 1].TotalStakers = poolNumStakers as uint16
	int 153 // headOffset
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 10 // headOffset
	+
	frame_dig 1 // poolNumStakers: uint64
	itob
	extract 6 2
	byte 0x76 // "v"
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:575
	// this.ValidatorList(poolKey.ID).value.Pools[poolKey.PoolID - 1].TotalAlgoStaked = poolAlgoStaked
	int 153 // headOffset
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	int 1
	-
	int 20
	* // acc * typeLength
	+
	int 12 // headOffset
	+
	frame_dig 2 // poolAlgoStaked: uint64
	itob
	byte 0x76 // "v"
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// *if14_condition
	// contracts/validatorRegistry.algo.ts:578
	// isNewStaker
	frame_dig -4 // isNewStaker: boolean
	bz *if14_end

	// *if14_consequent
	// contracts/validatorRegistry.algo.ts:579
	// this.ValidatorList(poolKey.ID).value.State.TotalStakers += 1
	int 137
	dup
	int 8
	byte 0x76 // "v"
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	int 1
	+
	itob
	byte 0x76 // "v"
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

*if14_end:
	// contracts/validatorRegistry.algo.ts:581
	// this.ValidatorList(poolKey.ID).value.State.TotalAlgoStaked += stakedAmountPayment.amount - mbrAmtPaid
	int 145
	dup
	int 8
	byte 0x76 // "v"
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	frame_dig -3 // mbrAmtPaid: uint64
	-
	+
	itob
	byte 0x76 // "v"
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace
	retsub

// updateStakerPoolSet(staker: Address, poolKey: ValidatorPoolKey): void
updateStakerPoolSet:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/validatorRegistry.algo.ts:585
	// assert(this.StakerPoolSet(staker).exists)
	byte 0x737073 // "sps"
	frame_dig -1 // staker: Address
	concat
	box_len
	swap
	pop
	assert

	// contracts/validatorRegistry.algo.ts:587
	// poolSet = clone(this.StakerPoolSet(staker).value)
	byte 0x737073 // "sps"
	frame_dig -1 // staker: Address
	concat
	box_get
	assert
	frame_bury 0 // poolSet: (uint64,uint64,uint64)[6]

	// contracts/validatorRegistry.algo.ts:588
	// for (let i = 0; i < this.StakerPoolSet(staker).value.length; i += 1)
	int 0
	frame_bury 1 // i: uint64

*for_3:
	// contracts/validatorRegistry.algo.ts:588
	// i < this.StakerPoolSet(staker).value.length
	frame_dig 1 // i: uint64
	int 6
	<
	bz *for_3_end

	// *if15_condition
	// contracts/validatorRegistry.algo.ts:589
	// poolSet[i] === poolKey
	frame_dig 0 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 1 // i: uint64
	int 24
	* // acc * typeLength
	int 24
	extract3
	frame_dig -2 // poolKey: ValidatorPoolKey
	==
	bz *if15_end

	// *if15_consequent
	// contracts/validatorRegistry.algo.ts:591
	// return;
	retsub

*if15_end:
	// *if16_condition
	// contracts/validatorRegistry.algo.ts:593
	// poolSet[i].ID === 0
	frame_dig 0 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 1 // i: uint64
	int 24
	* // acc * typeLength
	int 0
	+
	int 8
	extract3
	btoi
	int 0
	==
	bz *if16_end

	// *if16_consequent
	// contracts/validatorRegistry.algo.ts:594
	// this.StakerPoolSet(staker).value[i] = poolKey
	frame_dig 1 // i: uint64
	int 24
	* // acc * typeLength
	frame_dig -2 // poolKey: ValidatorPoolKey
	byte 0x737073 // "sps"
	frame_dig -1 // staker: Address
	concat
	cover 2
	box_replace

	// contracts/validatorRegistry.algo.ts:595
	// return;
	retsub

*if16_end:

*for_3_continue:
	// contracts/validatorRegistry.algo.ts:588
	// i += 1
	frame_dig 1 // i: uint64
	int 1
	+
	frame_bury 1 // i: uint64
	b *for_3

*for_3_end:
	err // 'No empty slot available in the staker pool set'

// removeFromStakerPoolSet(staker: Address, poolKey: ValidatorPoolKey): boolean
//
// Removes a pool key from the staker's active pool set - fails if not found (!)
//
// @param {Address} staker - The address of the staker.
// @param {ValidatorPoolKey} poolKey - The pool key they should be stored in
//
// @return {boolean} is the staker gone from ALL pools of the given validator
removeFromStakerPoolSet:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// contracts/validatorRegistry.algo.ts:611
	// inXPools = 0
	int 0
	frame_bury 0 // inXPools: uint64

	// contracts/validatorRegistry.algo.ts:612
	// found = false
	int 0
	frame_bury 1 // found: bool

	// contracts/validatorRegistry.algo.ts:614
	// poolSet = clone(this.StakerPoolSet(staker).value)
	byte 0x737073 // "sps"
	frame_dig -1 // staker: Address
	concat
	box_get
	assert
	frame_bury 2 // poolSet: (uint64,uint64,uint64)[6]

	// contracts/validatorRegistry.algo.ts:615
	// for (let i = 0; i < this.StakerPoolSet(staker).value.length; i += 1)
	int 0
	frame_bury 3 // i: uint64

*for_4:
	// contracts/validatorRegistry.algo.ts:615
	// i < this.StakerPoolSet(staker).value.length
	frame_dig 3 // i: uint64
	int 6
	<
	bz *for_4_end

	// *if17_condition
	// contracts/validatorRegistry.algo.ts:616
	// poolSet[i].ID === poolKey.ID
	frame_dig 2 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 3 // i: uint64
	int 24
	* // acc * typeLength
	int 0
	+
	int 8
	extract3
	btoi
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	==
	bz *if17_end

	// *if17_consequent
	// *if18_condition
	// contracts/validatorRegistry.algo.ts:617
	// poolSet[i] === poolKey
	frame_dig 2 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 3 // i: uint64
	int 24
	* // acc * typeLength
	int 24
	extract3
	frame_dig -2 // poolKey: ValidatorPoolKey
	==
	bz *if18_else

	// *if18_consequent
	// contracts/validatorRegistry.algo.ts:618
	// found = true
	int 1
	frame_bury 1 // found: bool

	// contracts/validatorRegistry.algo.ts:620
	// this.StakerPoolSet(staker).value[i] = { ID: 0, PoolID: 0, PoolAppID: 0 }
	frame_dig 3 // i: uint64
	int 24
	* // acc * typeLength
	byte 0x000000000000000000000000000000000000000000000000
	byte 0x737073 // "sps"
	frame_dig -1 // staker: Address
	concat
	cover 2
	box_replace
	b *if18_end

*if18_else:
	// contracts/validatorRegistry.algo.ts:622
	// inXPools += 1
	frame_dig 0 // inXPools: uint64
	int 1
	+
	frame_bury 0 // inXPools: uint64

*if18_end:

*if17_end:

*for_4_continue:
	// contracts/validatorRegistry.algo.ts:615
	// i += 1
	frame_dig 3 // i: uint64
	int 1
	+
	frame_bury 3 // i: uint64
	b *for_4

*for_4_end:
	// *if19_condition
	// contracts/validatorRegistry.algo.ts:626
	// !found
	frame_dig 1 // found: bool
	!
	bz *if19_end

	// *if19_consequent
	err // 'No matching slot found when told to remove a pool from the stakers set'

*if19_end:
	// contracts/validatorRegistry.algo.ts:630
	// return inXPools === 0;
	frame_dig 0 // inXPools: uint64
	int 0
	==

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

*create_NoOp:
	method "createApplication(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication
	err

*call_NoOp:
	method "gas()void"
	method "getMbrAmounts()(uint64,uint64,uint64,uint64)"
	method "getNumValidators()uint64"
	method "getValidatorConfig(uint64)(uint64,address,address,uint64,uint16,uint32,address,uint64,uint64,uint8)"
	method "getValidatorState(uint64)(uint16,uint64,uint64)"
	method "getValidatorOwnerAndManager(uint64)(address,address)"
	method "getPoolAppID((uint64,uint64,uint64))uint64"
	method "getPoolInfo((uint64,uint64,uint64))(uint16,uint64,uint16,uint64)"
	method "getStakedPoolsForAccount(account)(uint64,uint64,uint64)[]"
	method "addValidator(pay,string,(uint64,address,address,uint64,uint16,uint32,address,uint64,uint64,uint8))uint64"
	method "changeValidatorManager(uint64,address)void"
	method "changeValidatorNFD(uint64,uint64,string)void"
	method "changeValidatorCommissionAddress(uint64,address)void"
	method "addPool(pay,uint64)(uint64,uint64,uint64)"
	method "addStake(pay,uint64)(uint64,uint64,uint64)"
	method "stakeUpdatedViaRewards((uint64,uint64,uint64),uint64)void"
	method "stakeRemoved((uint64,uint64,uint64),address,uint64,bool)void"
	method "findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool)"
	txna ApplicationArgs 0
	match *abi_route_gas *abi_route_getMbrAmounts *abi_route_getNumValidators *abi_route_getValidatorConfig *abi_route_getValidatorState *abi_route_getValidatorOwnerAndManager *abi_route_getPoolAppID *abi_route_getPoolInfo *abi_route_getStakedPoolsForAccount *abi_route_addValidator *abi_route_changeValidatorManager *abi_route_changeValidatorNFD *abi_route_changeValidatorCommissionAddress *abi_route_addPool *abi_route_addStake *abi_route_stakeUpdatedViaRewards *abi_route_stakeRemoved *abi_route_findPoolForStaker
	err