{
  "hints": {
    "createApplication(uint64,uint64,uint64,address,address,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "gas()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addStake(pay,address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeStake(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "payStakers()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "goOnline(byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "goOffline()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "CreatingValidatorContractAppID": {
          "type": "uint64",
          "key": "creatorApp"
        },
        "ValidatorID": {
          "type": "uint64",
          "key": "validatorID"
        },
        "PoolID": {
          "type": "uint64",
          "key": "poolID"
        },
        "Owner": {
          "type": "bytes",
          "key": "owner"
        },
        "Manager": {
          "type": "bytes",
          "key": "manager"
        },
        "NumStakers": {
          "type": "uint64",
          "key": "numStakers"
        },
        "TotalAlgoStaked": {
          "type": "uint64",
          "key": "staked"
        },
        "MaxStakeAllowed": {
          "type": "uint64",
          "key": "maxStake"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 6
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "StakingPool",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Initialize the staking pool w/ owner and manager, but can only be created by the validator contract.",
        "args": [
          {
            "name": "creatingContractID",
            "type": "uint64",
            "desc": "id of contract that constructed us - the validator application (single global instance)"
          },
          {
            "name": "validatorID",
            "type": "uint64",
            "desc": "id of validator we're a staking pool of"
          },
          {
            "name": "poolID",
            "type": "uint64",
            "desc": "which pool id are we"
          },
          {
            "name": "owner",
            "type": "address",
            "desc": "owner of pool"
          },
          {
            "name": "manager",
            "type": "address",
            "desc": "manager of pool (can issue payouts and online txns)"
          },
          {
            "name": "maxStakeAllowed",
            "type": "uint64",
            "desc": "maximum algo allowed in this staking pool"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "gas",
        "desc": "gas is a dummy no-op call that can be used to pool-up resource references and opcode cost",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addStake",
        "desc": "Adds stake to the given account.Can ONLY be called by the validator contract that created usMust receive payment from the validator contract for amount being staked.",
        "args": [
          {
            "name": "stakedAmountPayment",
            "type": "pay",
            "desc": "prior payment coming from validator contract to us on behalf of staker."
          },
          {
            "name": "staker",
            "type": "address",
            "desc": "The account adding new stake"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "{uint64}new 'entry time' in seconds of stake add."
        }
      },
      {
        "name": "removeStake",
        "desc": "Removes stake on behalf of a particular staker.  Also notifies the validator contract for this poolsvalidaotr of the staker / balance changes.",
        "args": [
          {
            "name": "account",
            "type": "address",
            "desc": "The address of the account removing stake."
          },
          {
            "name": "amountToUnstake",
            "type": "uint64",
            "desc": "The amount of stake to be removed."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "payStakers",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "goOnline",
        "args": [
          {
            "name": "votePK",
            "type": "byte[]"
          },
          {
            "name": "selectionPK",
            "type": "byte[]"
          },
          {
            "name": "stateProofPK",
            "type": "byte[]"
          },
          {
            "name": "voteFirst",
            "type": "uint64"
          },
          {
            "name": "voteLast",
            "type": "uint64"
          },
          {
            "name": "voteKeyDilution",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "goOffline",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}