{
  "name": "StakingPool",
  "desc": "",
  "methods": [
    {
      "name": "createApplication",
      "desc": "Initialize the staking pool w/ owner and manager, but can only be created by the validator contract.",
      "args": [
        {
          "name": "creatingContractID",
          "type": "uint64",
          "desc": "id of contract that constructed us - the validator application (single global instance)"
        },
        {
          "name": "validatorID",
          "type": "uint64",
          "desc": "id of validator we're a staking pool of"
        },
        {
          "name": "poolID",
          "type": "uint64",
          "desc": "which pool id are we"
        },
        {
          "name": "minEntryStake",
          "type": "uint64",
          "desc": "minimum amount to be in pool, but also minimum amount balance can't go below (without removing all!)"
        },
        {
          "name": "maxStakeAllowed",
          "type": "uint64",
          "desc": "maximum algo allowed in this staking pool"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "gas",
      "desc": "gas is a dummy no-op call that can be used to pool-up resource references and opcode cost",
      "args": [],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "initStorage",
      "desc": "Called after we're created and then funded so we can create our large stakers ledger storageCaller has to get MBR amounts from ValidatorRegistry to know how much to fund us to cover the box storage cost",
      "args": [],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "addStake",
      "desc": "Adds stake to the given account.Can ONLY be called by the validator contract that created usMust receive payment from the validator contract for amount being staked.",
      "args": [
        {
          "name": "stakedAmountPayment",
          "type": "pay",
          "desc": "prior payment coming from validator contract to us on behalf of staker."
        },
        {
          "name": "staker",
          "type": "address",
          "desc": "The account adding new stake"
        }
      ],
      "returns": {
        "type": "uint64",
        "desc": "{uint64}new 'entry time' in seconds of stake add."
      }
    },
    {
      "name": "removeStake",
      "desc": "Removes stake on behalf of caller (removing own stake).  Also notifies the validator contract for this poolsvalidator of the staker / balance changes.",
      "args": [
        {
          "name": "amountToUnstake",
          "type": "uint64",
          "desc": "The amount of stake to be removed.  Specify 0 to remove all stake."
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "removeTokenReward",
      "desc": "Remove a specified amount of 'community token' rewards for a staker.Anyone can call on behalf of the staker, but the tokens are only sent to the staker.This is so projects can call this on behalf of the staker and cause the staker to be airdropped theirrewarded amount.",
      "args": [
        {
          "name": "staker",
          "type": "address",
          "desc": "the staker account to send rewards to"
        },
        {
          "name": "amountToRemove",
          "type": "uint64",
          "desc": "The amount of community tokens to be removed.  Specify 0 to remove all rewarded."
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "getStakerInfo",
      "desc": "Retrieves the staked information for a given staker.",
      "args": [
        {
          "name": "staker",
          "type": "address",
          "desc": "The address of the staker."
        }
      ],
      "returns": {
        "type": "(address,uint64,uint64,uint64,uint64)",
        "desc": "{StakedInfo}- The staked information for the given staker."
      }
    },
    {
      "name": "epochBalanceUpdate",
      "desc": "Updates the balance of stakers in the pool based on the received 'rewards' (current balance vs known staked balance)Stakers outstanding balance is adjusted based on their % of stake and time in the current epoch - so that balancecompounds over time and staker can remove that amount at will.The validator is paid their percentage each epoch payout.",
      "args": [],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "goOnline",
      "args": [
        {
          "name": "votePK",
          "type": "byte[]"
        },
        {
          "name": "selectionPK",
          "type": "byte[]"
        },
        {
          "name": "stateProofPK",
          "type": "byte[]"
        },
        {
          "name": "voteFirst",
          "type": "uint64"
        },
        {
          "name": "voteLast",
          "type": "uint64"
        },
        {
          "name": "voteKeyDilution",
          "type": "uint64"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "goOffline",
      "args": [],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "linkToNFD",
      "args": [
        {
          "name": "nfdAppID",
          "type": "uint64"
        },
        {
          "name": "nfdName",
          "type": "string"
        }
      ],
      "returns": {
        "type": "void"
      }
    }
  ]
}