#pragma version 10

// This TEAL was generated by TEALScript v0.88.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// createApplication(uint64,uint64,uint64,uint64,uint64)void
*abi_route_createApplication:
	// maxStakeAllowed: uint64
	txna ApplicationArgs 5
	btoi

	// minEntryStake: uint64
	txna ApplicationArgs 4
	btoi

	// poolID: uint64
	txna ApplicationArgs 3
	btoi

	// validatorID: uint64
	txna ApplicationArgs 2
	btoi

	// creatingContractID: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,uint64,uint64,uint64,uint64)void
	callsub createApplication
	int 1
	return

// createApplication(creatingContractID: uint64, validatorID: uint64, poolID: uint64, minEntryStake: uint64, maxStakeAllowed: uint64): void
//
// Initialize the staking pool w/ owner and manager, but can only be created by the validator contract.
// @param creatingContractID - id of contract that constructed us - the validator application (single global instance)
// @param validatorID - id of validator we're a staking pool of
// @param poolID - which pool id are we
// @param minEntryStake - minimum amount to be in pool, but also minimum amount balance can't go below (without removing all!)
// @param maxStakeAllowed - maximum algo allowed in this staking pool
createApplication:
	proto 5 0

	// *if0_condition
	// contracts/stakingPool.algo.ts:86
	// creatingContractID === 0
	frame_dig -1 // creatingContractID: uint64
	int 0
	==
	bz *if0_else

	// *if0_consequent
	// contracts/stakingPool.algo.ts:88
	// assert(creatingContractID === 0)
	frame_dig -1 // creatingContractID: uint64
	int 0
	==
	assert

	// contracts/stakingPool.algo.ts:89
	// assert(validatorID === 0)
	frame_dig -2 // validatorID: uint64
	int 0
	==
	assert

	// contracts/stakingPool.algo.ts:90
	// assert(poolID === 0)
	frame_dig -3 // poolID: uint64
	int 0
	==
	assert
	b *if0_end

*if0_else:
	// contracts/stakingPool.algo.ts:92
	// assert(creatingContractID !== 0)
	frame_dig -1 // creatingContractID: uint64
	int 0
	!=
	assert

	// contracts/stakingPool.algo.ts:93
	// assert(validatorID !== 0)
	frame_dig -2 // validatorID: uint64
	int 0
	!=
	assert

	// contracts/stakingPool.algo.ts:94
	// assert(poolID !== 0)
	frame_dig -3 // poolID: uint64
	int 0
	!=
	assert

*if0_end:
	// contracts/stakingPool.algo.ts:96
	// assert(minEntryStake >= MIN_ALGO_STAKE_PER_POOL)
	frame_dig -4 // minEntryStake: uint64
	int 1000000
	>=
	assert

	// contracts/stakingPool.algo.ts:97
	// assert(maxStakeAllowed <= MAX_ALGO_PER_POOL)
	frame_dig -5 // maxStakeAllowed: uint64
	int 50000000000000
	<=
	assert

	// contracts/stakingPool.algo.ts:98
	// this.CreatingValidatorContractAppID.value = creatingContractID
	byte 0x63726561746f72417070 // "creatorApp"
	frame_dig -1 // creatingContractID: uint64
	app_global_put

	// contracts/stakingPool.algo.ts:99
	// this.ValidatorID.value = validatorID
	byte 0x76616c696461746f724944 // "validatorID"
	frame_dig -2 // validatorID: uint64
	app_global_put

	// contracts/stakingPool.algo.ts:100
	// this.PoolID.value = poolID
	byte 0x706f6f6c4944 // "poolID"
	frame_dig -3 // poolID: uint64
	app_global_put

	// contracts/stakingPool.algo.ts:101
	// this.NumStakers.value = 0
	byte 0x6e756d5374616b657273 // "numStakers"
	int 0
	app_global_put

	// contracts/stakingPool.algo.ts:102
	// this.TotalAlgoStaked.value = 0
	byte 0x7374616b6564 // "staked"
	int 0
	app_global_put

	// contracts/stakingPool.algo.ts:103
	// this.MinEntryStake.value = minEntryStake
	byte 0x6d696e456e7472795374616b65 // "minEntryStake"
	frame_dig -4 // minEntryStake: uint64
	app_global_put

	// contracts/stakingPool.algo.ts:104
	// this.MaxStakeAllowed.value = maxStakeAllowed
	byte 0x6d61785374616b65 // "maxStake"
	frame_dig -5 // maxStakeAllowed: uint64
	app_global_put

	// contracts/stakingPool.algo.ts:105
	// this.LastPayout.value = globals.latestTimestamp
	byte 0x6c6173745061796f7574 // "lastPayout"
	global LatestTimestamp
	app_global_put
	retsub

// gas()void
*abi_route_gas:
	// execute gas()void
	callsub gas
	int 1
	return

// gas(): void
//
// gas is a dummy no-op call that can be used to pool-up resource references and opcode cost
gas:
	proto 0 0
	retsub

// minBalanceForAccount(contracts: uint64, extraPages: uint64, assets: uint64, localInts: uint64, localBytes: uint64, globalInts: uint64, globalBytes: uint64): uint64
minBalanceForAccount:
	proto 7 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/stakingPool.algo.ts:122
	// minBal = ALGORAND_ACCOUNT_MIN_BALANCE
	int 100000
	frame_bury 0 // minBal: uint64

	// contracts/stakingPool.algo.ts:123
	// minBal += contracts * APPLICATION_BASE_FEE
	frame_dig 0 // minBal: uint64
	frame_dig -1 // contracts: uint64
	int 100000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/stakingPool.algo.ts:124
	// minBal += extraPages * APPLICATION_BASE_FEE
	frame_dig 0 // minBal: uint64
	frame_dig -2 // extraPages: uint64
	int 100000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/stakingPool.algo.ts:125
	// minBal += assets * ASSET_HOLDING_FEE
	frame_dig 0 // minBal: uint64
	frame_dig -3 // assets: uint64
	int 100000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/stakingPool.algo.ts:126
	// minBal += localInts * SSC_VALUE_UINT
	frame_dig 0 // minBal: uint64
	frame_dig -4 // localInts: uint64
	int 28500
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/stakingPool.algo.ts:127
	// minBal += globalInts * SSC_VALUE_UINT
	frame_dig 0 // minBal: uint64
	frame_dig -6 // globalInts: uint64
	int 28500
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/stakingPool.algo.ts:128
	// minBal += localBytes * SSC_VALUE_BYTES
	frame_dig 0 // minBal: uint64
	frame_dig -5 // localBytes: uint64
	int 50000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/stakingPool.algo.ts:129
	// minBal += globalBytes * SSC_VALUE_BYTES
	frame_dig 0 // minBal: uint64
	frame_dig -7 // globalBytes: uint64
	int 50000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/stakingPool.algo.ts:130
	// return minBal;
	frame_dig 0 // minBal: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// costForBoxStorage(totalNumBytes: uint64): uint64
costForBoxStorage:
	proto 1 1

	// contracts/stakingPool.algo.ts:137
	// return SCBOX_PERBOX + totalNumBytes * SCBOX_PERBYTE;
	int 2500
	frame_dig -1 // totalNumBytes: uint64
	int 400
	*
	+
	retsub

// initStorage(pay)void
*abi_route_initStorage:
	// mbrPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute initStorage(pay)void
	callsub initStorage
	int 1
	return

// initStorage(mbrPayment: PayTxn): void
//
// Called after we're created and then funded so we can create our large stakers ledger storage
// Caller has to get MBR amounts from ValidatorRegistry to know how much to fund us to cover the box storage cost
// If this is pool 1 AND the validator has specified a reward token, opt-in to that token
// so that the validator can seed the pool with future rewards of that token.
// @param mbrPayment payment from caller which covers mbr increase of new staking pools' storage
initStorage:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// contracts/stakingPool.algo.ts:148
	// assert(!this.Stakers.exists, 'staking pool already initialized')
	byte 0x7374616b657273 // "stakers"
	box_len
	swap
	pop
	!

	// staking pool already initialized
	assert

	// contracts/stakingPool.algo.ts:151
	// validatorConfig = sendMethodCall<typeof ValidatorRegistry.prototype.getValidatorConfig>({
	//             applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value),
	//             methodArgs: [this.ValidatorID.value],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "getValidatorConfig(uint64)(uint64,address,address,uint64,address,uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:152
	// applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value)
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:153
	// methodArgs: [this.ValidatorID.value]
	byte 0x76616c696461746f724944 // "validatorID"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 0 // validatorConfig: (uint64,address,address,uint64,address,uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)

	// contracts/stakingPool.algo.ts:155
	// isTokenEligible = validatorConfig.RewardTokenID !== 0
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,address,uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 120 8
	btoi
	int 0
	!=
	frame_bury 1 // isTokenEligible: bool

	// contracts/stakingPool.algo.ts:156
	// extraMBR = isTokenEligible && this.PoolID.value === 1 ? ASSET_HOLDING_FEE : 0
	frame_dig 1 // isTokenEligible: bool
	dup
	bz *skip_and1
	byte 0x706f6f6c4944 // "poolID"
	app_global_get
	int 1
	==
	&&

*skip_and1:
	bz *ternary1_false
	int 100000
	b *ternary1_end

*ternary1_false:
	int 0

*ternary1_end:
	frame_bury 2 // extraMBR: uint64

	// contracts/stakingPool.algo.ts:157
	// PoolInitMbr =
	//             ALGORAND_ACCOUNT_MIN_BALANCE +
	//             extraMBR +
	//             this.costForBoxStorage(7 /* 'stakers' name */ + len<StakedInfo>() * MAX_STAKERS_PER_POOL)
	int 100000
	frame_dig 2 // extraMBR: uint64
	+
	int 12807
	callsub costForBoxStorage
	+
	frame_bury 3 // PoolInitMbr: uint64

	// contracts/stakingPool.algo.ts:163
	// verifyPayTxn(mbrPayment, { amount: PoolInitMbr })
	// verify amount
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Amount
	frame_dig 3 // PoolInitMbr: uint64
	==
	assert

	// contracts/stakingPool.algo.ts:164
	// this.Stakers.create()
	byte 0x7374616b657273 // "stakers"
	int 12800
	box_create
	pop

	// *if1_condition
	// contracts/stakingPool.algo.ts:166
	// isTokenEligible && this.PoolID.value === 1
	frame_dig 1 // isTokenEligible: bool
	dup
	bz *skip_and2
	byte 0x706f6f6c4944 // "poolID"
	app_global_get
	int 1
	==
	&&

*skip_and2:
	bz *if1_end

	// *if1_consequent
	// contracts/stakingPool.algo.ts:168
	// sendAssetTransfer({
	//                 xferAsset: AssetID.fromUint64(validatorConfig.RewardTokenID),
	//                 assetReceiver: this.app.address,
	//                 assetAmount: 0,
	//             })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:169
	// xferAsset: AssetID.fromUint64(validatorConfig.RewardTokenID)
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,address,uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 120 8
	btoi
	itxn_field XferAsset

	// contracts/stakingPool.algo.ts:170
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/stakingPool.algo.ts:171
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if1_end:
	retsub

// addStake(pay,address)uint64
*abi_route_addStake:
	// The ABI return prefix
	byte 0x151f7c75

	// staker: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// stakedAmountPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute addStake(pay,address)uint64
	callsub addStake
	itob
	concat
	log
	int 1
	return

// addStake(stakedAmountPayment: PayTxn, staker: Address): uint64
//
// Adds stake to the given account.
// Can ONLY be called by the validator contract that created us
// Must receive payment from the validator contract for amount being staked.
//
// @param {PayTxn} stakedAmountPayment prior payment coming from validator contract to us on behalf of staker.
// @param {Address} staker - The account adding new stake
// @throws {Error} - Throws an error if the staking pool is full.
// @returns {uint64} new 'entry time' in seconds of stake add.
addStake:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// contracts/stakingPool.algo.ts:187
	// assert(this.Stakers.exists)
	byte 0x7374616b657273 // "stakers"
	box_len
	swap
	pop
	assert

	// contracts/stakingPool.algo.ts:190
	// assert(this.txn.sender === AppID.fromUint64(this.CreatingValidatorContractAppID.value).address)
	txn Sender
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	app_params_get AppAddress
	pop
	==
	assert

	// contracts/stakingPool.algo.ts:191
	// assert(staker !== globals.zeroAddress)
	frame_dig -2 // staker: Address
	global ZeroAddress
	!=
	assert

	// contracts/stakingPool.algo.ts:195
	// verifyPayTxn(stakedAmountPayment, {
	//             sender: AppID.fromUint64(this.CreatingValidatorContractAppID.value).address,
	//             receiver: this.app.address,
	//             amount: stakedAmountPayment.amount,
	//         })
	// verify sender
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Sender
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	app_params_get AppAddress
	pop
	==
	assert

	// verify receiver
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	==
	assert

	// contracts/stakingPool.algo.ts:200
	// assert(
	//             stakedAmountPayment.amount + this.TotalAlgoStaked.value <= this.MaxStakeAllowed.value,
	//             'adding this stake amount will exceed the max allowed in this pool'
	//         )
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	byte 0x7374616b6564 // "staked"
	app_global_get
	+
	byte 0x6d61785374616b65 // "maxStake"
	app_global_get
	<=

	// adding this stake amount will exceed the max allowed in this pool
	assert

	// contracts/stakingPool.algo.ts:206
	// entryTime = this.getEntryTime()
	callsub getEntryTime
	frame_bury 0 // entryTime: uint64

	// contracts/stakingPool.algo.ts:207
	// firstEmpty = 0
	int 0
	frame_bury 1 // firstEmpty: uint64

	// contracts/stakingPool.algo.ts:210
	// for (let i = 0; i < this.Stakers.value.length; i += 1)
	int 0
	frame_bury 2 // i: uint64

*for_0:
	// contracts/stakingPool.algo.ts:210
	// i < this.Stakers.value.length
	frame_dig 2 // i: uint64
	int 200
	<
	bz *for_0_end

	// *if2_condition
	// contracts/stakingPool.algo.ts:211
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if2_end

	// *if2_consequent
	// contracts/stakingPool.algo.ts:212
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if2_end:
	// contracts/stakingPool.algo.ts:214
	// cmpStaker = clone(this.Stakers.value[i])
	frame_dig 2 // i: uint64
	int 64
	* // acc * typeLength
	int 64
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 3 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// *if3_condition
	// contracts/stakingPool.algo.ts:215
	// cmpStaker.Account === staker
	frame_dig 3 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	frame_dig -2 // staker: Address
	==
	bz *if3_end

	// *if3_consequent
	// contracts/stakingPool.algo.ts:216
	// cmpStaker.Balance += stakedAmountPayment.amount
	frame_dig 3 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 3 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	+
	itob
	replace3
	frame_bury 3 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:217
	// cmpStaker.EntryTime = entryTime
	frame_dig 3 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 56 // headOffset
	frame_dig 0 // entryTime: uint64
	itob
	replace3
	frame_bury 3 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:220
	// this.Stakers.value[i] = cmpStaker
	frame_dig 2 // i: uint64
	int 64
	* // acc * typeLength
	frame_dig 3 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/stakingPool.algo.ts:222
	// this.TotalAlgoStaked.value += stakedAmountPayment.amount
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	+
	byte 0x7374616b6564 // "staked"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:223
	// return entryTime;
	frame_dig 0 // entryTime: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

*if3_end:
	// *if4_condition
	// contracts/stakingPool.algo.ts:225
	// cmpStaker.Account === globals.zeroAddress
	frame_dig 3 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	global ZeroAddress
	==
	bz *if4_end

	// *if4_consequent
	// contracts/stakingPool.algo.ts:226
	// firstEmpty = i + 1
	frame_dig 2 // i: uint64
	int 1
	+
	frame_bury 1 // firstEmpty: uint64
	b *for_0_end

*if4_end:

*for_0_continue:
	// contracts/stakingPool.algo.ts:210
	// i += 1
	frame_dig 2 // i: uint64
	int 1
	+
	frame_bury 2 // i: uint64
	b *for_0

*for_0_end:
	// *if5_condition
	// contracts/stakingPool.algo.ts:231
	// firstEmpty === 0
	frame_dig 1 // firstEmpty: uint64
	int 0
	==
	bz *if5_end

	// *if5_consequent
	err // 'Staking pool full'

*if5_end:
	// contracts/stakingPool.algo.ts:238
	// assert(stakedAmountPayment.amount >= this.MinEntryStake.value, 'must stake at least the minimum for this pool')
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	byte 0x6d696e456e7472795374616b65 // "minEntryStake"
	app_global_get
	>=

	// must stake at least the minimum for this pool
	assert

	// contracts/stakingPool.algo.ts:240
	// assert(this.Stakers.value[firstEmpty - 1].Account === globals.zeroAddress)
	frame_dig 1 // firstEmpty: uint64
	int 1
	-
	int 64
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	global ZeroAddress
	==
	assert

	// contracts/stakingPool.algo.ts:241
	// this.Stakers.value[firstEmpty - 1] = {
	//             Account: staker,
	//             Balance: stakedAmountPayment.amount,
	//             TotalRewarded: 0,
	//             RewardTokenBalance: 0,
	//             EntryTime: entryTime,
	//         }
	frame_dig 1 // firstEmpty: uint64
	int 1
	-
	int 64
	* // acc * typeLength
	frame_dig -2 // staker: Address
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	itob
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	frame_dig 0 // entryTime: uint64
	itob
	concat
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/stakingPool.algo.ts:248
	// this.NumStakers.value += 1
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	int 1
	+
	byte 0x6e756d5374616b657273 // "numStakers"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:249
	// this.TotalAlgoStaked.value += stakedAmountPayment.amount
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	+
	byte 0x7374616b6564 // "staked"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:250
	// return entryTime;
	frame_dig 0 // entryTime: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

// removeStake(uint64)void
*abi_route_removeStake:
	// amountToUnstake: uint64
	txna ApplicationArgs 1
	btoi

	// execute removeStake(uint64)void
	callsub removeStake
	int 1
	return

// removeStake(amountToUnstake: uint64): void
//
// Removes stake on behalf of caller (removing own stake).  If any token rewards exist, those are always sent in
// full. Also notifies the validator contract for this pools validator of the staker / balance changes.
//
// @param {uint64} amountToUnstake - The amount of stake to be removed.  Specify 0 to remove all stake.
// @throws {Error} If the account has insufficient balance or if the account is not found.
removeStake:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 5

	// contracts/stakingPool.algo.ts:264
	// staker = this.txn.sender
	txn Sender
	frame_bury 0 // staker: address

	// contracts/stakingPool.algo.ts:266
	// for (let i = 0; i < this.Stakers.value.length; i += 1)
	int 0
	frame_bury 1 // i: uint64

*for_1:
	// contracts/stakingPool.algo.ts:266
	// i < this.Stakers.value.length
	frame_dig 1 // i: uint64
	int 200
	<
	bz *for_1_end

	// *if6_condition
	// contracts/stakingPool.algo.ts:267
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if6_end

	// *if6_consequent
	// contracts/stakingPool.algo.ts:268
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if6_end:
	// contracts/stakingPool.algo.ts:270
	// cmpStaker = clone(this.Stakers.value[i])
	frame_dig 1 // i: uint64
	int 64
	* // acc * typeLength
	int 64
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// *if7_condition
	// contracts/stakingPool.algo.ts:271
	// cmpStaker.Account === staker
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	frame_dig 0 // staker: address
	==
	bz *if7_end

	// *if7_consequent
	// *if8_condition
	// contracts/stakingPool.algo.ts:272
	// amountToUnstake === 0
	frame_dig -1 // amountToUnstake: uint64
	int 0
	==
	bz *if8_end

	// *if8_consequent
	// contracts/stakingPool.algo.ts:274
	// amountToUnstake = cmpStaker.Balance
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_bury -1 // amountToUnstake: uint64

*if8_end:
	// *if9_condition
	// contracts/stakingPool.algo.ts:276
	// cmpStaker.Balance < amountToUnstake
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig -1 // amountToUnstake: uint64
	<
	bz *if9_end

	// *if9_consequent
	err // 'Insufficient balance'

*if9_end:
	// contracts/stakingPool.algo.ts:279
	// cmpStaker.Balance -= amountToUnstake
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig -1 // amountToUnstake: uint64
	-
	itob
	replace3
	frame_bury 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:280
	// this.TotalAlgoStaked.value -= amountToUnstake
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig -1 // amountToUnstake: uint64
	-
	byte 0x7374616b6564 // "staked"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:282
	// amountRewardTokenRemoved = 0
	int 0
	frame_bury 3 // amountRewardTokenRemoved: uint64

	// *if10_condition
	// contracts/stakingPool.algo.ts:283
	// cmpStaker.RewardTokenBalance > 0
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	int 0
	>
	bz *if10_end

	// *if10_consequent
	// *if11_condition
	// contracts/stakingPool.algo.ts:285
	// this.PoolID.value === 1
	byte 0x706f6f6c4944 // "poolID"
	app_global_get
	int 1
	==
	bz *if11_else

	// *if11_consequent
	// contracts/stakingPool.algo.ts:286
	// validatorConfig = sendMethodCall<typeof ValidatorRegistry.prototype.getValidatorConfig>({
	//                             applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value),
	//                             methodArgs: [this.ValidatorID.value],
	//                         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "getValidatorConfig(uint64)(uint64,address,address,uint64,address,uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:287
	// applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value)
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:288
	// methodArgs: [this.ValidatorID.value]
	byte 0x76616c696461746f724944 // "validatorID"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 4 // validatorConfig: (uint64,address,address,uint64,address,uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)

	// contracts/stakingPool.algo.ts:294
	// sendAssetTransfer({
	//                             xferAsset: AssetID.fromUint64(validatorConfig.RewardTokenID),
	//                             assetReceiver: staker,
	//                             assetAmount: cmpStaker.RewardTokenBalance,
	//                         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:295
	// xferAsset: AssetID.fromUint64(validatorConfig.RewardTokenID)
	frame_dig 4 // validatorConfig: (uint64,address,address,uint64,address,uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 120 8
	btoi
	itxn_field XferAsset

	// contracts/stakingPool.algo.ts:296
	// assetReceiver: staker
	frame_dig 0 // staker: address
	itxn_field AssetReceiver

	// contracts/stakingPool.algo.ts:297
	// assetAmount: cmpStaker.RewardTokenBalance
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stakingPool.algo.ts:299
	// amountRewardTokenRemoved = cmpStaker.RewardTokenBalance
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	frame_bury 3 // amountRewardTokenRemoved: uint64

	// contracts/stakingPool.algo.ts:300
	// cmpStaker.RewardTokenBalance = 0
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 48
	frame_bury 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	b *if11_end

*if11_else:
	// contracts/stakingPool.algo.ts:305
	// amountRewardTokenRemoved = cmpStaker.RewardTokenBalance
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	frame_bury 3 // amountRewardTokenRemoved: uint64

	// contracts/stakingPool.algo.ts:306
	// cmpStaker.RewardTokenBalance = 0
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 48
	frame_bury 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)

*if11_end:

*if10_end:
	// contracts/stakingPool.algo.ts:311
	// assert(
	//                     cmpStaker.Balance === 0 || cmpStaker.Balance >= this.MinEntryStake.value,
	//                     'cannot reduce balance below minimum allowed stake unless all is removed'
	//                 )
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	int 0
	==
	dup
	bnz *skip_or0
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	byte 0x6d696e456e7472795374616b65 // "minEntryStake"
	app_global_get
	>=
	||

*skip_or0:
	// cannot reduce balance below minimum allowed stake unless all is removed
	assert

	// contracts/stakingPool.algo.ts:319
	// sendPayment({
	//                     amount: amountToUnstake,
	//                     receiver: staker,
	//                     note: 'unstaked',
	//                 })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:320
	// amount: amountToUnstake
	frame_dig -1 // amountToUnstake: uint64
	itxn_field Amount

	// contracts/stakingPool.algo.ts:321
	// receiver: staker
	frame_dig 0 // staker: address
	itxn_field Receiver

	// contracts/stakingPool.algo.ts:322
	// note: 'unstaked'
	byte 0x756e7374616b6564 // "unstaked"
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stakingPool.algo.ts:324
	// stakerRemoved = false
	int 0
	frame_bury 5 // stakerRemoved: bool

	// *if12_condition
	// contracts/stakingPool.algo.ts:325
	// cmpStaker.Balance === 0
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	int 0
	==
	bz *if12_end

	// *if12_consequent
	// contracts/stakingPool.algo.ts:327
	// this.NumStakers.value -= 1
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	int 1
	-
	byte 0x6e756d5374616b657273 // "numStakers"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:328
	// cmpStaker.Account = globals.zeroAddress
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 0
	global ZeroAddress
	replace3
	frame_bury 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:329
	// cmpStaker.TotalRewarded = 0
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 40
	frame_bury 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:330
	// cmpStaker.RewardTokenBalance = 0
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 48
	frame_bury 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:331
	// stakerRemoved = true
	int 1
	frame_bury 5 // stakerRemoved: bool

*if12_end:
	// contracts/stakingPool.algo.ts:334
	// this.Stakers.value[i] = cmpStaker
	frame_dig 1 // i: uint64
	int 64
	* // acc * typeLength
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/stakingPool.algo.ts:339
	// sendMethodCall<typeof ValidatorRegistry.prototype.stakeRemoved>({
	//                     applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value),
	//                     methodArgs: [
	//                         { ID: this.ValidatorID.value, PoolID: this.PoolID.value, PoolAppID: this.app.id },
	//                         staker,
	//                         amountToUnstake,
	//                         amountRewardTokenRemoved,
	//                         stakerRemoved,
	//                     ],
	//                 })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:340
	// applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value)
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:341
	// methodArgs: [
	//                         { ID: this.ValidatorID.value, PoolID: this.PoolID.value, PoolAppID: this.app.id },
	//                         staker,
	//                         amountToUnstake,
	//                         amountRewardTokenRemoved,
	//                         stakerRemoved,
	//                     ]
	byte 0x76616c696461746f724944 // "validatorID"
	app_global_get
	itob
	byte 0x706f6f6c4944 // "poolID"
	app_global_get
	itob
	concat
	txna Applications 0
	itob
	concat
	itxn_field ApplicationArgs
	frame_dig 0 // staker: address
	itxn_field ApplicationArgs
	frame_dig -1 // amountToUnstake: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig 3 // amountRewardTokenRemoved: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig 5 // stakerRemoved: bool
	byte 0x00
	int 0
	uncover 2
	setbit
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stakingPool.algo.ts:349
	// return;
	retsub

*if7_end:

*for_1_continue:
	// contracts/stakingPool.algo.ts:266
	// i += 1
	frame_dig 1 // i: uint64
	int 1
	+
	frame_bury 1 // i: uint64
	b *for_1

*for_1_end:
	err // 'Account not found'

// getStakerInfo(address)(address,uint64,uint64,uint64,uint64)
*abi_route_getStakerInfo:
	// The ABI return prefix
	byte 0x151f7c75

	// staker: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute getStakerInfo(address)(address,uint64,uint64,uint64,uint64)
	callsub getStakerInfo
	concat
	log
	int 1
	return

// getStakerInfo(staker: Address): StakedInfo
//
// Retrieves the staked information for a given staker.
//
// @param {Address} staker - The address of the staker.
// @returns {StakedInfo} - The staked information for the given staker.
// @throws {Error} - If the staker's account is not found.
getStakerInfo:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/stakingPool.algo.ts:364
	// for (let i = 0; i < this.Stakers.value.length; i += 1)
	int 0
	frame_bury 0 // i: uint64

*for_2:
	// contracts/stakingPool.algo.ts:364
	// i < this.Stakers.value.length
	frame_dig 0 // i: uint64
	int 200
	<
	bz *for_2_end

	// *if13_condition
	// contracts/stakingPool.algo.ts:365
	// globals.opcodeBudget < 200
	global OpcodeBudget
	int 200
	<
	bz *if13_end

	// *if13_consequent
	// contracts/stakingPool.algo.ts:366
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if13_end:
	// *if14_condition
	// contracts/stakingPool.algo.ts:368
	// this.Stakers.value[i].Account === staker
	frame_dig 0 // i: uint64
	int 64
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_dig -1 // staker: Address
	==
	bz *if14_end

	// *if14_consequent
	// contracts/stakingPool.algo.ts:369
	// return this.Stakers.value[i];
	frame_dig 0 // i: uint64
	int 64
	* // acc * typeLength
	int 64
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract

	// set the subroutine return value
	frame_bury 0
	retsub

*if14_end:

*for_2_continue:
	// contracts/stakingPool.algo.ts:364
	// i += 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64
	b *for_2

*for_2_end:
	err // 'Account not found'

// payTokenReward(address,uint64,uint64)void
*abi_route_payTokenReward:
	// amountToSend: uint64
	txna ApplicationArgs 3
	btoi

	// rewardToken: uint64
	txna ApplicationArgs 2
	btoi

	// staker: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute payTokenReward(address,uint64,uint64)void
	callsub payTokenReward
	int 1
	return

// payTokenReward(staker: Address, rewardToken: uint64, amountToSend: uint64): void
//
// Remove a specified amount of 'community token' rewards for a staker.
// This can ONLY be called by our validator and only if we're pool 1 - with the token.
// @param staker - the staker account to send rewards to
// @param rewardToken - ID of reward token (to avoid re-entrancy in calling validator back to get id)
// @param amountToSend - amount to send the staker (there is significant trust here(!) - also why only validator can call us
payTokenReward:
	proto 3 0

	// contracts/stakingPool.algo.ts:384
	// assert(this.txn.sender === AppID.fromUint64(this.CreatingValidatorContractAppID.value).address)
	txn Sender
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	app_params_get AppAddress
	pop
	==
	assert

	// contracts/stakingPool.algo.ts:385
	// assert(this.PoolID.value === 1, 'must be pool 1 in order to be called to pay out token rewards')
	byte 0x706f6f6c4944 // "poolID"
	app_global_get
	int 1
	==

	// must be pool 1 in order to be called to pay out token rewards
	assert

	// contracts/stakingPool.algo.ts:386
	// assert(rewardToken !== 0, 'can only claim token rewards from validator that has them')
	frame_dig -2 // rewardToken: uint64
	int 0
	!=

	// can only claim token rewards from validator that has them
	assert

	// contracts/stakingPool.algo.ts:389
	// sendAssetTransfer({
	//             xferAsset: AssetID.fromUint64(rewardToken),
	//             assetReceiver: staker,
	//             assetAmount: amountToSend,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:390
	// xferAsset: AssetID.fromUint64(rewardToken)
	frame_dig -2 // rewardToken: uint64
	itxn_field XferAsset

	// contracts/stakingPool.algo.ts:391
	// assetReceiver: staker
	frame_dig -1 // staker: Address
	itxn_field AssetReceiver

	// contracts/stakingPool.algo.ts:392
	// assetAmount: amountToSend
	frame_dig -3 // amountToSend: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// updateAlgodVer(string)void
*abi_route_updateAlgodVer:
	// algodVer: string
	txna ApplicationArgs 1
	extract 2 0

	// execute updateAlgodVer(string)void
	callsub updateAlgodVer
	int 1
	return

// updateAlgodVer(algodVer: string): void
//
// Update the (honor system) algod version for the node associated to this pool.  The node management daemon
// should compare its current nodes version to the version stored in global state, updating when different.
// The reti node daemon composes its own version string using format:
// {major}.{minor}.{build} {branch} [{commit hash}],
// ie: 3.22.0 rel/stable [6b508975]
// @param {string} algodVer - string representing the algorand node daemon version (reti node daemon composes its own meta version)
updateAlgodVer:
	proto 1 0

	// contracts/stakingPool.algo.ts:405
	// assert(this.isOwnerOrManagerCaller())
	callsub isOwnerOrManagerCaller
	assert

	// contracts/stakingPool.algo.ts:406
	// this.AlgodVer.value = algodVer
	byte 0x616c676f64566572 // "algodVer"
	frame_dig -1 // algodVer: string
	app_global_put
	retsub

// epochBalanceUpdate()void
*abi_route_epochBalanceUpdate:
	// execute epochBalanceUpdate()void
	callsub epochBalanceUpdate
	int 1
	return

// epochBalanceUpdate(): void
//
// Updates the balance of stakers in the pool based on the received 'rewards' (current balance vs known staked balance)
// Stakers outstanding balance is adjusted based on their % of stake and time in the current epoch - so that balance
// compounds over time and staker can remove that amount at will.
// The validator is paid their percentage each epoch payout.
//
// Note: ANYONE can call this.
epochBalanceUpdate:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 30

	// contracts/stakingPool.algo.ts:419
	// validatorConfig = sendMethodCall<typeof ValidatorRegistry.prototype.getValidatorConfig>({
	//             applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value),
	//             methodArgs: [this.ValidatorID.value],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "getValidatorConfig(uint64)(uint64,address,address,uint64,address,uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:420
	// applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value)
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:421
	// methodArgs: [this.ValidatorID.value]
	byte 0x76616c696461746f724944 // "validatorID"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 0 // validatorConfig: (uint64,address,address,uint64,address,uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)

	// contracts/stakingPool.algo.ts:423
	// payoutMins = validatorConfig.PayoutEveryXMins as uint64
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,address,uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 136 2
	btoi
	frame_bury 1 // payoutMins: uint64

	// contracts/stakingPool.algo.ts:424
	// isTokenEligible = validatorConfig.RewardTokenID !== 0
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,address,uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 120 8
	btoi
	int 0
	!=
	frame_bury 2 // isTokenEligible: bool

	// contracts/stakingPool.algo.ts:427
	// validatorState = sendMethodCall<typeof ValidatorRegistry.prototype.getValidatorState>({
	//             applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value),
	//             methodArgs: [this.ValidatorID.value],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "getValidatorState(uint64)(uint16,uint64,uint64,uint64)"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:428
	// applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value)
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:429
	// methodArgs: [this.ValidatorID.value]
	byte 0x76616c696461746f724944 // "validatorID"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 3 // validatorState: (uint16,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:431
	// validatorTotalStake = validatorState.TotalAlgoStaked
	frame_dig 3 // validatorState: (uint16,uint64,uint64,uint64)
	extract 10 8
	btoi
	frame_bury 4 // validatorTotalStake: uint64

	// contracts/stakingPool.algo.ts:432
	// rewardTokenHeldBack = validatorState.RewardTokenHeldBack
	frame_dig 3 // validatorState: (uint16,uint64,uint64,uint64)
	extract 18 8
	btoi
	frame_bury 5 // rewardTokenHeldBack: uint64

	// contracts/stakingPool.algo.ts:436
	// algoRewardAvail = this.app.address.balance - this.TotalAlgoStaked.value - this.app.address.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	byte 0x7374616b6564 // "staked"
	app_global_get
	-
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	frame_bury 6 // algoRewardAvail: uint64

	// contracts/stakingPool.algo.ts:440
	// tokenRewardAvail = 0
	int 0
	frame_bury 7 // tokenRewardAvail: uint64

	// contracts/stakingPool.algo.ts:441
	// tokenRewardPaidOut = 0
	int 0
	frame_bury 8 // tokenRewardPaidOut: uint64

	// *if15_condition
	// contracts/stakingPool.algo.ts:442
	// isTokenEligible
	frame_dig 2 // isTokenEligible: bool
	bz *if15_end

	// *if15_consequent
	// contracts/stakingPool.algo.ts:444
	// poolOneAddress = this.app.address
	global CurrentApplicationAddress
	frame_bury 9 // poolOneAddress: address

	// *if16_condition
	// contracts/stakingPool.algo.ts:445
	// this.PoolID.value !== 1
	byte 0x706f6f6c4944 // "poolID"
	app_global_get
	int 1
	!=
	bz *if16_end

	// *if16_consequent
	// contracts/stakingPool.algo.ts:447
	// poolOneAppID = sendMethodCall<typeof ValidatorRegistry.prototype.getPoolAppID>({
	//                     applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value),
	//                     methodArgs: [this.ValidatorID.value, 1],
	//                 })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "getPoolAppID(uint64,uint64)uint64"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:448
	// applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value)
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:449
	// methodArgs: [this.ValidatorID.value, 1]
	byte 0x76616c696461746f724944 // "validatorID"
	app_global_get
	itob
	itxn_field ApplicationArgs
	byte 0x0000000000000001
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	btoi
	frame_bury 10 // poolOneAppID: uint64

	// contracts/stakingPool.algo.ts:451
	// poolOneAddress = AppID.fromUint64(poolOneAppID).address
	frame_dig 10 // poolOneAppID: uint64
	app_params_get AppAddress
	pop
	frame_bury 9 // poolOneAddress: address

*if16_end:
	// contracts/stakingPool.algo.ts:453
	// tokenRewardBal =
	//                 poolOneAddress.assetBalance(AssetID.fromUint64(validatorConfig.RewardTokenID)) - rewardTokenHeldBack
	frame_dig 9 // poolOneAddress: address
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,address,uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 120 8
	btoi
	asset_holding_get AssetBalance
	pop
	frame_dig 5 // rewardTokenHeldBack: uint64
	-
	frame_bury 11 // tokenRewardBal: uint64

	// *if17_condition
	// contracts/stakingPool.algo.ts:457
	// tokenRewardBal >= validatorConfig.RewardPerPayout
	frame_dig 11 // tokenRewardBal: uint64
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,address,uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 128 8
	btoi
	>=
	bz *if17_end

	// *if17_consequent
	// contracts/stakingPool.algo.ts:466
	// ourPoolPctOfWhole = wideRatio([this.TotalAlgoStaked.value, 1_000_000], [validatorTotalStake])
	byte 0x7374616b6564 // "staked"
	app_global_get
	int 1_000_000
	mulw
	int 0
	frame_dig 4 // validatorTotalStake: uint64
	divmodw
	pop
	pop
	swap
	!
	assert
	frame_bury 12 // ourPoolPctOfWhole: uint64

	// contracts/stakingPool.algo.ts:469
	// tokenRewardAvail = wideRatio([validatorConfig.RewardPerPayout, ourPoolPctOfWhole], [1_000_000])
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,address,uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 128 8
	btoi
	frame_dig 12 // ourPoolPctOfWhole: uint64
	mulw
	int 0
	int 1_000_000
	divmodw
	pop
	pop
	swap
	!
	assert
	frame_bury 7 // tokenRewardAvail: uint64

	// contracts/stakingPool.algo.ts:470
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts/stakingPool.algo.ts:471
	// log(concat('token reward avail: ', tokenRewardAvail.toString()))
	byte 0x746f6b656e2072657761726420617661696c3a20 // "token reward avail: "
	frame_dig 7 // tokenRewardAvail: uint64
	callsub *itoa
	concat
	log

*if17_end:

*if15_end:
	// *if18_condition
	// contracts/stakingPool.algo.ts:475
	// tokenRewardAvail === 0
	frame_dig 7 // tokenRewardAvail: uint64
	int 0
	==
	bz *if18_end

	// *if18_consequent
	// contracts/stakingPool.algo.ts:478
	// assert(algoRewardAvail > 1_000_000, 'Reward needs to be at least 1 ALGO')
	frame_dig 6 // algoRewardAvail: uint64
	int 1_000_000
	>

	// Reward needs to be at least 1 ALGO
	assert

*if18_end:
	// contracts/stakingPool.algo.ts:480
	// log(concat('algo reward avail: ', algoRewardAvail.toString()))
	byte 0x616c676f2072657761726420617661696c3a20 // "algo reward avail: "
	frame_dig 6 // algoRewardAvail: uint64
	callsub *itoa
	concat
	log

	// *if19_condition
	// contracts/stakingPool.algo.ts:483
	// validatorConfig.PercentToValidator !== 0
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,address,uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 138 4
	btoi
	int 0
	!=
	bz *if19_end

	// *if19_consequent
	// contracts/stakingPool.algo.ts:486
	// validatorPay = wideRatio(
	//                 [algoRewardAvail, validatorConfig.PercentToValidator as uint64],
	//                 [1_000_000]
	//             )
	frame_dig 6 // algoRewardAvail: uint64
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,address,uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 138 4
	btoi
	mulw
	int 0
	int 1_000_000
	divmodw
	pop
	pop
	swap
	!
	assert
	frame_bury 13 // validatorPay: uint64

	// contracts/stakingPool.algo.ts:492
	// algoRewardAvail -= validatorPay
	frame_dig 6 // algoRewardAvail: uint64
	frame_dig 13 // validatorPay: uint64
	-
	frame_bury 6 // algoRewardAvail: uint64

	// *if20_condition
	// contracts/stakingPool.algo.ts:496
	// validatorPay > 0
	frame_dig 13 // validatorPay: uint64
	int 0
	>
	bz *if20_end

	// *if20_consequent
	// contracts/stakingPool.algo.ts:497
	// log(concat('paying validator: %i', itob(validatorPay)))
	byte 0x706179696e672076616c696461746f723a202569 // "paying validator: %i"
	frame_dig 13 // validatorPay: uint64
	itob
	concat
	log

	// contracts/stakingPool.algo.ts:498
	// sendPayment({
	//                     amount: validatorPay,
	//                     receiver: validatorConfig.ValidatorCommissionAddress,
	//                     note: 'validator reward',
	//                 })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:499
	// amount: validatorPay
	frame_dig 13 // validatorPay: uint64
	itxn_field Amount

	// contracts/stakingPool.algo.ts:500
	// receiver: validatorConfig.ValidatorCommissionAddress
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,address,uint64,uint64,uint64,uint16,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 142 32
	itxn_field Receiver

	// contracts/stakingPool.algo.ts:501
	// note: 'validator reward'
	byte 0x76616c696461746f7220726577617264 // "validator reward"
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stakingPool.algo.ts:503
	// log(concat('remaining reward: %i', itob(algoRewardAvail)))
	byte 0x72656d61696e696e67207265776172643a202569 // "remaining reward: %i"
	frame_dig 6 // algoRewardAvail: uint64
	itob
	concat
	log

*if20_end:

*if19_end:
	// *if21_condition
	// contracts/stakingPool.algo.ts:507
	// algoRewardAvail === 0 && tokenRewardAvail === 0
	frame_dig 6 // algoRewardAvail: uint64
	int 0
	==
	dup
	bz *skip_and3
	frame_dig 7 // tokenRewardAvail: uint64
	int 0
	==
	&&

*skip_and3:
	bz *if21_end

	// *if21_consequent
	// contracts/stakingPool.algo.ts:510
	// return;
	retsub

*if21_end:
	// contracts/stakingPool.algo.ts:518
	// curTime = globals.latestTimestamp
	global LatestTimestamp
	frame_bury 14 // curTime: uint64

	// contracts/stakingPool.algo.ts:521
	// epochInSecs = payoutMins * 60
	frame_dig 1 // payoutMins: uint64
	int 60
	*
	frame_bury 15 // epochInSecs: uint64

	// *if22_condition
	// contracts/stakingPool.algo.ts:522
	// this.LastPayout.exists
	txna Applications 0
	byte 0x6c6173745061796f7574 // "lastPayout"
	app_global_get_ex
	swap
	pop
	bz *if22_end

	// *if22_consequent
	// contracts/stakingPool.algo.ts:523
	// secsSinceLastPayout = curTime - this.LastPayout.value
	frame_dig 14 // curTime: uint64
	byte 0x6c6173745061796f7574 // "lastPayout"
	app_global_get
	-
	frame_bury 16 // secsSinceLastPayout: uint64

	// contracts/stakingPool.algo.ts:524
	// log(concat('secs since last payout: %i', itob(secsSinceLastPayout)))
	byte 0x736563732073696e6365206c617374207061796f75743a202569 // "secs since last payout: %i"
	frame_dig 16 // secsSinceLastPayout: uint64
	itob
	concat
	log

	// contracts/stakingPool.algo.ts:527
	// assert(secsSinceLastPayout >= epochInSecs, "Can't payout earlier than last payout + epoch time")
	frame_dig 16 // secsSinceLastPayout: uint64
	frame_dig 15 // epochInSecs: uint64
	>=

	// Can't payout earlier than last payout + epoch time
	assert

*if22_end:
	// contracts/stakingPool.algo.ts:531
	// increasedStake = 0
	int 0
	frame_bury 17 // increasedStake: uint64

	// contracts/stakingPool.algo.ts:555
	// partialStakersTotalStake: uint64 = 0
	int 0
	frame_bury 18 // partialStakersTotalStake: uint64

	// contracts/stakingPool.algo.ts:556
	// for (let i = 0; i < this.Stakers.value.length; i += 1)
	int 0
	frame_bury 19 // i: uint64

*for_3:
	// contracts/stakingPool.algo.ts:556
	// i < this.Stakers.value.length
	frame_dig 19 // i: uint64
	int 200
	<
	bz *for_3_end

	// *if23_condition
	// contracts/stakingPool.algo.ts:557
	// globals.opcodeBudget < 400
	global OpcodeBudget
	int 400
	<
	bz *if23_end

	// *if23_consequent
	// contracts/stakingPool.algo.ts:558
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if23_end:
	// contracts/stakingPool.algo.ts:560
	// cmpStaker = clone(this.Stakers.value[i])
	frame_dig 19 // i: uint64
	int 64
	* // acc * typeLength
	int 64
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 20 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// *if24_condition
	// contracts/stakingPool.algo.ts:561
	// cmpStaker.Account !== globals.zeroAddress
	frame_dig 20 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	global ZeroAddress
	!=
	bz *if24_end

	// *if24_consequent
	// *if25_condition
	// contracts/stakingPool.algo.ts:562
	// cmpStaker.EntryTime > curTime
	frame_dig 20 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	frame_dig 14 // curTime: uint64
	>
	bz *if25_else

	// *if25_consequent
	// contracts/stakingPool.algo.ts:565
	// partialStakersTotalStake += cmpStaker.Balance
	frame_dig 18 // partialStakersTotalStake: uint64
	frame_dig 20 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	+
	frame_bury 18 // partialStakersTotalStake: uint64
	b *if25_end

*if25_else:
	// contracts/stakingPool.algo.ts:569
	// timeInPool = curTime - cmpStaker.EntryTime
	frame_dig 14 // curTime: uint64
	frame_dig 20 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	-
	frame_bury 21 // timeInPool: uint64

	// *if26_condition
	// contracts/stakingPool.algo.ts:573
	// timeInPool < epochInSecs
	frame_dig 21 // timeInPool: uint64
	frame_dig 15 // epochInSecs: uint64
	<
	bz *if26_end

	// *if26_consequent
	// contracts/stakingPool.algo.ts:574
	// partialStakersTotalStake += cmpStaker.Balance
	frame_dig 18 // partialStakersTotalStake: uint64
	frame_dig 20 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	+
	frame_bury 18 // partialStakersTotalStake: uint64

	// contracts/stakingPool.algo.ts:575
	// timePercentage = (timeInPool * 1000) / epochInSecs
	frame_dig 21 // timeInPool: uint64
	int 1000
	*
	frame_dig 15 // epochInSecs: uint64
	/
	frame_bury 22 // timePercentage: uint64

	// *if27_condition
	// contracts/stakingPool.algo.ts:577
	// tokenRewardAvail > 0
	frame_dig 7 // tokenRewardAvail: uint64
	int 0
	>
	bz *if27_end

	// *if27_consequent
	// contracts/stakingPool.algo.ts:579
	// stakerTokenReward = wideRatio(
	//                                 [cmpStaker.Balance, tokenRewardAvail, timePercentage],
	//                                 [this.TotalAlgoStaked.value, 1000]
	//                             )
	frame_dig 20 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 7 // tokenRewardAvail: uint64
	mulw
	frame_dig 22 // timePercentage: uint64
	uncover 2
	dig 1
	*
	cover 2
	mulw
	cover 2
	+
	swap
	byte 0x7374616b6564 // "staked"
	app_global_get
	int 1000
	mulw
	divmodw
	pop
	pop
	swap
	!
	assert
	frame_bury 23 // stakerTokenReward: uint64

	// contracts/stakingPool.algo.ts:586
	// tokenRewardAvail -= stakerTokenReward
	frame_dig 7 // tokenRewardAvail: uint64
	frame_dig 23 // stakerTokenReward: uint64
	-
	frame_bury 7 // tokenRewardAvail: uint64

	// contracts/stakingPool.algo.ts:587
	// cmpStaker.RewardTokenBalance += stakerTokenReward
	frame_dig 20 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 48 // headOffset
	frame_dig 20 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	frame_dig 23 // stakerTokenReward: uint64
	+
	itob
	replace3
	frame_bury 20 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:588
	// tokenRewardPaidOut += stakerTokenReward
	frame_dig 8 // tokenRewardPaidOut: uint64
	frame_dig 23 // stakerTokenReward: uint64
	+
	frame_bury 8 // tokenRewardPaidOut: uint64

*if27_end:
	// *if28_condition
	// contracts/stakingPool.algo.ts:590
	// algoRewardAvail > 0
	frame_dig 6 // algoRewardAvail: uint64
	int 0
	>
	bz *if28_end

	// *if28_consequent
	// contracts/stakingPool.algo.ts:592
	// stakerReward = wideRatio(
	//                                 [cmpStaker.Balance, algoRewardAvail, timePercentage],
	//                                 [this.TotalAlgoStaked.value, 1000]
	//                             )
	frame_dig 20 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 6 // algoRewardAvail: uint64
	mulw
	frame_dig 22 // timePercentage: uint64
	uncover 2
	dig 1
	*
	cover 2
	mulw
	cover 2
	+
	swap
	byte 0x7374616b6564 // "staked"
	app_global_get
	int 1000
	mulw
	divmodw
	pop
	pop
	swap
	!
	assert
	frame_bury 24 // stakerReward: uint64

	// contracts/stakingPool.algo.ts:599
	// algoRewardAvail -= stakerReward
	frame_dig 6 // algoRewardAvail: uint64
	frame_dig 24 // stakerReward: uint64
	-
	frame_bury 6 // algoRewardAvail: uint64

	// contracts/stakingPool.algo.ts:602
	// cmpStaker.Balance += stakerReward
	frame_dig 20 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 20 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 24 // stakerReward: uint64
	+
	itob
	replace3
	frame_bury 20 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:603
	// cmpStaker.TotalRewarded += stakerReward
	frame_dig 20 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 40 // headOffset
	frame_dig 20 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 40 8
	btoi
	frame_dig 24 // stakerReward: uint64
	+
	itob
	replace3
	frame_bury 20 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:604
	// increasedStake += stakerReward
	frame_dig 17 // increasedStake: uint64
	frame_dig 24 // stakerReward: uint64
	+
	frame_bury 17 // increasedStake: uint64

*if28_end:
	// contracts/stakingPool.algo.ts:607
	// this.Stakers.value[i] = cmpStaker
	frame_dig 19 // i: uint64
	int 64
	* // acc * typeLength
	frame_dig 20 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

*if26_end:

*if25_end:

*if24_end:

*for_3_continue:
	// contracts/stakingPool.algo.ts:556
	// i += 1
	frame_dig 19 // i: uint64
	int 1
	+
	frame_bury 19 // i: uint64
	b *for_3

*for_3_end:
	// contracts/stakingPool.algo.ts:612
	// log(concat('partial staker total stake: %i', itob(partialStakersTotalStake)))
	byte 0x7061727469616c207374616b657220746f74616c207374616b653a202569 // "partial staker total stake: %i"
	frame_dig 18 // partialStakersTotalStake: uint64
	itob
	concat
	log

	// contracts/stakingPool.algo.ts:616
	// newPoolTotalStake = this.TotalAlgoStaked.value - partialStakersTotalStake
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig 18 // partialStakersTotalStake: uint64
	-
	frame_bury 25 // newPoolTotalStake: uint64

	// *if29_condition
	// contracts/stakingPool.algo.ts:620
	// newPoolTotalStake > 0
	frame_dig 25 // newPoolTotalStake: uint64
	int 0
	>
	bz *if29_end

	// *if29_consequent
	// contracts/stakingPool.algo.ts:622
	// for (let i = 0; i < this.Stakers.value.length; i += 1)
	int 0
	frame_bury 26 // i: uint64

*for_4:
	// contracts/stakingPool.algo.ts:622
	// i < this.Stakers.value.length
	frame_dig 26 // i: uint64
	int 200
	<
	bz *for_4_end

	// *if30_condition
	// contracts/stakingPool.algo.ts:623
	// globals.opcodeBudget < 200
	global OpcodeBudget
	int 200
	<
	bz *if30_end

	// *if30_consequent
	// contracts/stakingPool.algo.ts:624
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if30_end:
	// contracts/stakingPool.algo.ts:626
	// cmpStaker = clone(this.Stakers.value[i])
	frame_dig 26 // i: uint64
	int 64
	* // acc * typeLength
	int 64
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 27 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// *if31_condition
	// contracts/stakingPool.algo.ts:627
	// cmpStaker.Account !== globals.zeroAddress && cmpStaker.EntryTime < curTime
	frame_dig 27 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	global ZeroAddress
	!=
	dup
	bz *skip_and4
	frame_dig 27 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	frame_dig 14 // curTime: uint64
	<
	&&

*skip_and4:
	bz *if31_end

	// *if31_consequent
	// contracts/stakingPool.algo.ts:628
	// timeInPool = curTime - cmpStaker.EntryTime
	frame_dig 14 // curTime: uint64
	frame_dig 27 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	-
	frame_bury 28 // timeInPool: uint64

	// *if32_condition
	// contracts/stakingPool.algo.ts:630
	// timeInPool >= epochInSecs
	frame_dig 28 // timeInPool: uint64
	frame_dig 15 // epochInSecs: uint64
	>=
	bz *if32_end

	// *if32_consequent
	// *if33_condition
	// contracts/stakingPool.algo.ts:634
	// tokenRewardAvail > 0
	frame_dig 7 // tokenRewardAvail: uint64
	int 0
	>
	bz *if33_end

	// *if33_consequent
	// contracts/stakingPool.algo.ts:635
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts/stakingPool.algo.ts:636
	// log(concat('staker balance: ', cmpStaker.Balance.toString()))
	byte 0x7374616b65722062616c616e63653a20 // "staker balance: "
	frame_dig 27 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	callsub *itoa
	concat
	log

	// contracts/stakingPool.algo.ts:637
	// log(concat('tkn rwd avail: ', tokenRewardAvail.toString()))
	byte 0x746b6e2072776420617661696c3a20 // "tkn rwd avail: "
	frame_dig 7 // tokenRewardAvail: uint64
	callsub *itoa
	concat
	log

	// contracts/stakingPool.algo.ts:638
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts/stakingPool.algo.ts:639
	// log(concat('new pool stake: ', newPoolTotalStake.toString()))
	byte 0x6e657720706f6f6c207374616b653a20 // "new pool stake: "
	frame_dig 25 // newPoolTotalStake: uint64
	callsub *itoa
	concat
	log

	// contracts/stakingPool.algo.ts:641
	// stakerTokenReward = wideRatio(
	//                                 [cmpStaker.Balance, tokenRewardAvail],
	//                                 [newPoolTotalStake]
	//                             )
	frame_dig 27 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 7 // tokenRewardAvail: uint64
	mulw
	int 0
	frame_dig 25 // newPoolTotalStake: uint64
	divmodw
	pop
	pop
	swap
	!
	assert
	frame_bury 29 // stakerTokenReward: uint64

	// contracts/stakingPool.algo.ts:645
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts/stakingPool.algo.ts:646
	// log(concat('paying staker token reward: ', stakerTokenReward.toString()))
	byte 0x706179696e67207374616b657220746f6b656e207265776172643a20 // "paying staker token reward: "
	frame_dig 29 // stakerTokenReward: uint64
	callsub *itoa
	concat
	log

	// contracts/stakingPool.algo.ts:650
	// cmpStaker.RewardTokenBalance += stakerTokenReward
	frame_dig 27 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 48 // headOffset
	frame_dig 27 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	frame_dig 29 // stakerTokenReward: uint64
	+
	itob
	replace3
	frame_bury 27 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:651
	// tokenRewardPaidOut += stakerTokenReward
	frame_dig 8 // tokenRewardPaidOut: uint64
	frame_dig 29 // stakerTokenReward: uint64
	+
	frame_bury 8 // tokenRewardPaidOut: uint64

*if33_end:
	// *if34_condition
	// contracts/stakingPool.algo.ts:653
	// algoRewardAvail > 0
	frame_dig 6 // algoRewardAvail: uint64
	int 0
	>
	bz *if34_end

	// *if34_consequent
	// contracts/stakingPool.algo.ts:654
	// stakerReward = wideRatio([cmpStaker.Balance, algoRewardAvail], [newPoolTotalStake])
	frame_dig 27 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 6 // algoRewardAvail: uint64
	mulw
	int 0
	frame_dig 25 // newPoolTotalStake: uint64
	divmodw
	pop
	pop
	swap
	!
	assert
	frame_bury 30 // stakerReward: uint64

	// contracts/stakingPool.algo.ts:657
	// cmpStaker.Balance += stakerReward
	frame_dig 27 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 27 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 30 // stakerReward: uint64
	+
	itob
	replace3
	frame_bury 27 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:658
	// cmpStaker.TotalRewarded += stakerReward
	frame_dig 27 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 40 // headOffset
	frame_dig 27 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 40 8
	btoi
	frame_dig 30 // stakerReward: uint64
	+
	itob
	replace3
	frame_bury 27 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:659
	// increasedStake += stakerReward
	frame_dig 17 // increasedStake: uint64
	frame_dig 30 // stakerReward: uint64
	+
	frame_bury 17 // increasedStake: uint64

*if34_end:
	// contracts/stakingPool.algo.ts:663
	// this.Stakers.value[i] = cmpStaker
	frame_dig 26 // i: uint64
	int 64
	* // acc * typeLength
	frame_dig 27 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

*if32_end:

*if31_end:

*for_4_continue:
	// contracts/stakingPool.algo.ts:622
	// i += 1
	frame_dig 26 // i: uint64
	int 1
	+
	frame_bury 26 // i: uint64
	b *for_4

*for_4_end:

*if29_end:
	// contracts/stakingPool.algo.ts:671
	// this.TotalAlgoStaked.value += increasedStake
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig 17 // increasedStake: uint64
	+
	byte 0x7374616b6564 // "staked"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:673
	// log(concat('increased stake: %i', itob(increasedStake)))
	byte 0x696e63726561736564207374616b653a202569 // "increased stake: %i"
	frame_dig 17 // increasedStake: uint64
	itob
	concat
	log

	// contracts/stakingPool.algo.ts:674
	// log(concat('token reward paid out: %i', itob(tokenRewardPaidOut)))
	byte 0x746f6b656e207265776172642070616964206f75743a202569 // "token reward paid out: %i"
	frame_dig 8 // tokenRewardPaidOut: uint64
	itob
	concat
	log

	// contracts/stakingPool.algo.ts:679
	// sendMethodCall<typeof ValidatorRegistry.prototype.stakeUpdatedViaRewards>({
	//             applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value),
	//             methodArgs: [
	//                 { ID: this.ValidatorID.value, PoolID: this.PoolID.value, PoolAppID: this.app.id },
	//                 increasedStake,
	//                 tokenRewardPaidOut,
	//             ],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64)void"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:680
	// applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value)
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:681
	// methodArgs: [
	//                 { ID: this.ValidatorID.value, PoolID: this.PoolID.value, PoolAppID: this.app.id },
	//                 increasedStake,
	//                 tokenRewardPaidOut,
	//             ]
	byte 0x76616c696461746f724944 // "validatorID"
	app_global_get
	itob
	byte 0x706f6f6c4944 // "poolID"
	app_global_get
	itob
	concat
	txna Applications 0
	itob
	concat
	itxn_field ApplicationArgs
	frame_dig 17 // increasedStake: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig 8 // tokenRewardPaidOut: uint64
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stakingPool.algo.ts:687
	// this.LastPayout.value = curTime
	byte 0x6c6173745061796f7574 // "lastPayout"
	frame_dig 14 // curTime: uint64
	app_global_put
	retsub

// goOnline(byte[],byte[],byte[],uint64,uint64,uint64)void
*abi_route_goOnline:
	// voteKeyDilution: uint64
	txna ApplicationArgs 6
	btoi

	// voteLast: uint64
	txna ApplicationArgs 5
	btoi

	// voteFirst: uint64
	txna ApplicationArgs 4
	btoi

	// stateProofPK: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// selectionPK: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// votePK: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute goOnline(byte[],byte[],byte[],uint64,uint64,uint64)void
	callsub goOnline
	int 1
	return

// goOnline(votePK: bytes, selectionPK: bytes, stateProofPK: bytes, voteFirst: uint64, voteLast: uint64, voteKeyDilution: uint64): void
goOnline:
	proto 6 0

	// contracts/stakingPool.algo.ts:698
	// assert(this.isOwnerOrManagerCaller())
	callsub isOwnerOrManagerCaller
	assert

	// contracts/stakingPool.algo.ts:699
	// sendOnlineKeyRegistration({
	//             votePK: votePK,
	//             selectionPK: selectionPK,
	//             stateProofPK: stateProofPK,
	//             voteFirst: voteFirst,
	//             voteLast: voteLast,
	//             voteKeyDilution: voteKeyDilution,
	//         })
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:700
	// votePK: votePK
	frame_dig -1 // votePK: bytes
	itxn_field VotePK

	// contracts/stakingPool.algo.ts:701
	// selectionPK: selectionPK
	frame_dig -2 // selectionPK: bytes
	itxn_field SelectionPK

	// contracts/stakingPool.algo.ts:702
	// stateProofPK: stateProofPK
	frame_dig -3 // stateProofPK: bytes
	itxn_field StateProofPK

	// contracts/stakingPool.algo.ts:703
	// voteFirst: voteFirst
	frame_dig -4 // voteFirst: uint64
	itxn_field VoteFirst

	// contracts/stakingPool.algo.ts:704
	// voteLast: voteLast
	frame_dig -5 // voteLast: uint64
	itxn_field VoteLast

	// contracts/stakingPool.algo.ts:705
	// voteKeyDilution: voteKeyDilution
	frame_dig -6 // voteKeyDilution: uint64
	itxn_field VoteKeyDilution

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// goOffline()void
*abi_route_goOffline:
	// execute goOffline()void
	callsub goOffline
	int 1
	return

// goOffline(): void
goOffline:
	proto 0 0

	// *if35_condition
	// contracts/stakingPool.algo.ts:712
	// this.txn.sender !== AppID.fromUint64(this.CreatingValidatorContractAppID.value).address
	txn Sender
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	app_params_get AppAddress
	pop
	!=
	bz *if35_end

	// *if35_consequent
	// contracts/stakingPool.algo.ts:713
	// assert(this.isOwnerOrManagerCaller())
	callsub isOwnerOrManagerCaller
	assert

*if35_end:
	// contracts/stakingPool.algo.ts:716
	// sendOfflineKeyRegistration({})
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// linkToNFD(uint64,string)void
*abi_route_linkToNFD:
	// nfdName: string
	txna ApplicationArgs 2
	extract 2 0

	// nfdAppID: uint64
	txna ApplicationArgs 1
	btoi

	// execute linkToNFD(uint64,string)void
	callsub linkToNFD
	int 1
	return

// linkToNFD(nfdAppID: uint64, nfdName: string): void
linkToNFD:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/stakingPool.algo.ts:723
	// assert(this.isOwnerOrManagerCaller())
	callsub isOwnerOrManagerCaller
	assert

	// contracts/stakingPool.algo.ts:725
	// registryID = sendMethodCall<typeof ValidatorRegistry.prototype.getNFDRegistryID>({
	//             applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value),
	//             methodArgs: [],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "getNFDRegistryID()uint64"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:726
	// applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value)
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:727
	// methodArgs: []
	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	btoi
	frame_bury 0 // registryID: uint64

	// contracts/stakingPool.algo.ts:730
	// sendAppCall({
	//             applicationID: AppID.fromUint64(registryID),
	//             applicationArgs: ['verify_nfd_addr', nfdName, itob(nfdAppID), rawBytes(this.app.address)],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:731
	// applicationID: AppID.fromUint64(registryID)
	frame_dig 0 // registryID: uint64
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:732
	// applicationArgs: ['verify_nfd_addr', nfdName, itob(nfdAppID), rawBytes(this.app.address)]
	byte 0x7665726966795f6e66645f61646472 // "verify_nfd_addr"
	itxn_field ApplicationArgs
	frame_dig -2 // nfdName: string
	itxn_field ApplicationArgs
	frame_dig -1 // nfdAppID: uint64
	itob
	itxn_field ApplicationArgs
	global CurrentApplicationAddress
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// isOwnerOrManagerCaller(): boolean
isOwnerOrManagerCaller:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/stakingPool.algo.ts:737
	// OwnerAndManager = sendMethodCall<typeof ValidatorRegistry.prototype.getValidatorOwnerAndManager>({
	//             applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value),
	//             methodArgs: [this.ValidatorID.value],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "getValidatorOwnerAndManager(uint64)(address,address)"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:738
	// applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value)
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:739
	// methodArgs: [this.ValidatorID.value]
	byte 0x76616c696461746f724944 // "validatorID"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 0 // OwnerAndManager: (address,address)

	// contracts/stakingPool.algo.ts:741
	// return this.txn.sender === OwnerAndManager[0] || this.txn.sender === OwnerAndManager[1];
	txn Sender
	frame_dig 0 // OwnerAndManager: (address,address)
	extract 0 32
	==
	dup
	bnz *skip_or1
	txn Sender
	frame_dig 0 // OwnerAndManager: (address,address)
	extract 32 32
	==
	||

*skip_or1:
	// set the subroutine return value
	frame_bury 0
	retsub

// getEntryTime(): uint64
//
// Calculate the entry time for counting a stake as entering the pool.
// Algorand won't see the balance increase for ALGORAND_STAKING_BLOCK_DELAY rounds, so we approximate it.
// The entry time is calculated by adding an approximate number of seconds based on current AVG block times
// to the original entry time.  This means users don't get payouts based on time their balance wouldn't have
// been seen by the network.
//
// @returns {uint64} - The updated entry time.
getEntryTime:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/stakingPool.algo.ts:756
	// entryTime = globals.latestTimestamp
	global LatestTimestamp
	frame_bury 0 // entryTime: uint64

	// contracts/stakingPool.algo.ts:759
	// return entryTime + (ALGORAND_STAKING_BLOCK_DELAY * AVG_BLOCK_TIME_SECS) / 10;
	frame_dig 0 // entryTime: uint64
	int 896
	+

	// set the subroutine return value
	frame_bury 0
	retsub

*create_NoOp:
	method "createApplication(uint64,uint64,uint64,uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication
	err

*call_NoOp:
	method "gas()void"
	method "initStorage(pay)void"
	method "addStake(pay,address)uint64"
	method "removeStake(uint64)void"
	method "getStakerInfo(address)(address,uint64,uint64,uint64,uint64)"
	method "payTokenReward(address,uint64,uint64)void"
	method "updateAlgodVer(string)void"
	method "epochBalanceUpdate()void"
	method "goOnline(byte[],byte[],byte[],uint64,uint64,uint64)void"
	method "goOffline()void"
	method "linkToNFD(uint64,string)void"
	txna ApplicationArgs 0
	match *abi_route_gas *abi_route_initStorage *abi_route_addStake *abi_route_removeStake *abi_route_getStakerInfo *abi_route_payTokenReward *abi_route_updateAlgodVer *abi_route_epochBalanceUpdate *abi_route_goOnline *abi_route_goOffline *abi_route_linkToNFD
	err

*intToAscii:
	proto 1 1
	byte 0x30313233343536373839 // "0123456789"
	frame_dig -1 // i: uint64
	int 1
	extract3
	retsub
	

*itoa:
	proto 1 1
	frame_dig -1 // i: uint64
	int 0
	==
	bz *itoa_if_end
	byte 0x30
	retsub

*itoa_if_end:
	frame_dig -1 // i: uint64
	int 10
	/
	int 0
	>
	bz *itoa_ternary_false
	frame_dig -1 // i: uint64
	int 10
	/
	callsub *itoa
	b *itoa_ternary_end

*itoa_ternary_false:
	byte 0x // ""

*itoa_ternary_end:
	frame_dig -1 // i: uint64
	int 10
	%
	callsub *intToAscii
	concat
	retsub