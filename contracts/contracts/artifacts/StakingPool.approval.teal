#pragma version 9

// This TEAL was generated by TEALScript v0.82.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

// createApplication(uint64,uint64,uint64,address,address,uint64,uint64)void
abi_route_createApplication:
	// maxStakeAllowed: uint64
	txna ApplicationArgs 7
	btoi

	// minAllowedStake: uint64
	txna ApplicationArgs 6
	btoi

	// manager: address
	txna ApplicationArgs 5
	dup
	len
	int 32
	==
	assert

	// owner: address
	txna ApplicationArgs 4
	dup
	len
	int 32
	==
	assert

	// poolID: uint64
	txna ApplicationArgs 3
	btoi

	// validatorID: uint64
	txna ApplicationArgs 2
	btoi

	// creatingContractID: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,uint64,uint64,address,address,uint64,uint64)void
	callsub createApplication
	int 1
	return

// createApplication(creatingContractID: uint64, validatorID: uint64, poolID: uint64, owner: Address, manager: Address, minAllowedStake: uint64, maxStakeAllowed: uint64): void
//
// Initialize the staking pool w/ owner and manager, but can only be created by the validator contract.
// @param creatingContractID - id of contract that constructed us - the validator application (single global instance)
// @param validatorID - id of validator we're a staking pool of
// @param poolID - which pool id are we
// @param owner - owner of pool
// @param manager - manager of pool (can issue payouts and online txns)
// @param minAllowedStake - minimum amount to be in pool, but also minimum amount balance can't go below (without removing all!)
// @param maxStakeAllowed - maximum algo allowed in this staking pool
createApplication:
	proto 7 0

	// if0_condition
	// contracts/stakingPool.algo.ts:67
	// owner === globals.zeroAddress || manager === globals.zeroAddress
	frame_dig -4 // owner: Address
	global ZeroAddress
	==
	dup
	bnz skip_or0
	frame_dig -5 // manager: Address
	global ZeroAddress
	==
	||

skip_or0:
	bz if0_else

	// if0_consequent
	// contracts/stakingPool.algo.ts:69
	// assert(owner === globals.zeroAddress)
	frame_dig -4 // owner: Address
	global ZeroAddress
	==
	assert

	// contracts/stakingPool.algo.ts:70
	// assert(manager === globals.zeroAddress)
	frame_dig -5 // manager: Address
	global ZeroAddress
	==
	assert

	// contracts/stakingPool.algo.ts:71
	// assert(creatingContractID === 0)
	frame_dig -1 // creatingContractID: uint64
	int 0
	==
	assert

	// contracts/stakingPool.algo.ts:72
	// assert(validatorID === 0)
	frame_dig -2 // validatorID: uint64
	int 0
	==
	assert

	// contracts/stakingPool.algo.ts:73
	// assert(poolID === 0)
	frame_dig -3 // poolID: uint64
	int 0
	==
	assert
	b if0_end

if0_else:
	// contracts/stakingPool.algo.ts:75
	// assert(creatingContractID !== 0)
	frame_dig -1 // creatingContractID: uint64
	int 0
	!=
	assert

	// contracts/stakingPool.algo.ts:76
	// assert(validatorID !== 0)
	frame_dig -2 // validatorID: uint64
	int 0
	!=
	assert

	// contracts/stakingPool.algo.ts:77
	// assert(poolID !== 0)
	frame_dig -3 // poolID: uint64
	int 0
	!=
	assert

if0_end:
	// contracts/stakingPool.algo.ts:79
	// assert(minAllowedStake >= MIN_ALGO_STAKE_PER_POOL)
	frame_dig -6 // minAllowedStake: uint64
	int 1000000
	>=
	assert

	// contracts/stakingPool.algo.ts:80
	// assert(maxStakeAllowed < MAX_ALGO_PER_POOL)
	frame_dig -7 // maxStakeAllowed: uint64
	int 20000000000000
	<
	assert

	// contracts/stakingPool.algo.ts:81
	// this.CreatingValidatorContractAppID.value = creatingContractID
	byte 0x63726561746f72417070 // "creatorApp"
	frame_dig -1 // creatingContractID: uint64
	app_global_put

	// contracts/stakingPool.algo.ts:82
	// this.ValidatorID.value = validatorID
	byte 0x76616c696461746f724944 // "validatorID"
	frame_dig -2 // validatorID: uint64
	app_global_put

	// contracts/stakingPool.algo.ts:83
	// this.PoolID.value = poolID
	byte 0x706f6f6c4944 // "poolID"
	frame_dig -3 // poolID: uint64
	app_global_put

	// contracts/stakingPool.algo.ts:84
	// this.Owner.value = owner
	byte 0x6f776e6572 // "owner"
	frame_dig -4 // owner: Address
	app_global_put

	// contracts/stakingPool.algo.ts:85
	// this.Manager.value = manager
	byte 0x6d616e61676572 // "manager"
	frame_dig -5 // manager: Address
	app_global_put

	// contracts/stakingPool.algo.ts:86
	// this.NumStakers.value = 0
	byte 0x6e756d5374616b657273 // "numStakers"
	int 0
	app_global_put

	// contracts/stakingPool.algo.ts:87
	// this.TotalAlgoStaked.value = 0
	byte 0x7374616b6564 // "staked"
	int 0
	app_global_put

	// contracts/stakingPool.algo.ts:88
	// this.MinAllowedStake.value = minAllowedStake
	byte 0x6d696e416c6c6f7765645374616b65 // "minAllowedStake"
	frame_dig -6 // minAllowedStake: uint64
	app_global_put

	// contracts/stakingPool.algo.ts:89
	// this.MaxStakeAllowed.value = maxStakeAllowed
	byte 0x6d61785374616b65 // "maxStake"
	frame_dig -7 // maxStakeAllowed: uint64
	app_global_put
	retsub

// gas()void
abi_route_gas:
	// execute gas()void
	callsub gas
	int 1
	return

// gas(): void
//
// gas is a dummy no-op call that can be used to pool-up resource references and opcode cost
gas:
	proto 0 0
	retsub

// addStake(pay,address)uint64
abi_route_addStake:
	// The ABI return prefix
	byte 0x151f7c75

	// staker: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// stakedAmountPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute addStake(pay,address)uint64
	callsub addStake
	itob
	concat
	log
	int 1
	return

// addStake(stakedAmountPayment: PayTxn, staker: Address): uint64
//
// Adds stake to the given account.
// Can ONLY be called by the validator contract that created us
// Must receive payment from the validator contract for amount being staked.
//
// @param {PayTxn} stakedAmountPayment prior payment coming from validator contract to us on behalf of staker.
// @param {Address} staker - The account adding new stake
// @throws {Error} - Throws an error if the staking pool is full.
// @returns {uint64} new 'entry time' in seconds of stake add.
addStake:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// if1_condition
	// contracts/stakingPool.algo.ts:108
	// !this.Stakers.exists
	byte 0x7374616b657273 // "stakers"
	box_len
	swap
	pop
	!
	bz if1_end

	// if1_consequent
	// contracts/stakingPool.algo.ts:109
	// this.Stakers.create()
	byte 0x7374616b657273 // "stakers"
	int 4088
	box_create
	pop

if1_end:
	// contracts/stakingPool.algo.ts:112
	// assert(this.txn.sender === Application.fromID(this.CreatingValidatorContractAppID.value).address)
	txn Sender
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	app_params_get AppAddress
	pop
	==
	assert

	// contracts/stakingPool.algo.ts:113
	// assert(staker !== Account.zeroAddress)
	frame_dig -2 // staker: Address
	global ZeroAddress
	!=
	assert

	// contracts/stakingPool.algo.ts:117
	// verifyPayTxn(stakedAmountPayment, {
	//             sender: Application.fromID(this.CreatingValidatorContractAppID.value).address,
	//             receiver: this.app.address,
	//             amount: stakedAmountPayment.amount,
	//         })
	// verify sender
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Sender
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	app_params_get AppAddress
	pop
	==
	assert

	// verify receiver
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	==
	assert

	// contracts/stakingPool.algo.ts:122
	// assert(
	//             stakedAmountPayment.amount + this.TotalAlgoStaked.value <= this.MaxStakeAllowed.value,
	//             'adding this stake amount will exceed the max allowed in this pool'
	//         )
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	byte 0x7374616b6564 // "staked"
	app_global_get
	+
	byte 0x6d61785374616b65 // "maxStake"
	app_global_get
	<=

	// adding this stake amount will exceed the max allowed in this pool
	assert

	// contracts/stakingPool.algo.ts:128
	// entryTime = this.getEntryTime()
	callsub getEntryTime
	frame_bury 0 // entryTime: uint64

	// contracts/stakingPool.algo.ts:129
	// firstEmpty = 0
	int 0
	frame_bury 1 // firstEmpty: uint64

	// contracts/stakingPool.algo.ts:132
	// stakers = clone(this.Stakers.value)
	byte 0x7374616b657273 // "stakers"
	box_get
	assert
	frame_bury 2 // stakers: (address,uint64,uint64,uint64)[73]

	// contracts/stakingPool.algo.ts:133
	// for (let i = 0; i < stakers.length; i += 1)
	int 0
	frame_bury 3 // i: uint64

for_0:
	// contracts/stakingPool.algo.ts:133
	// i < stakers.length
	frame_dig 3 // i: uint64
	int 73
	<
	bz for_0_end

	// if2_condition
	// contracts/stakingPool.algo.ts:134
	// stakers[i].Account === staker
	frame_dig 2 // stakers: (address,uint64,uint64,uint64)[73]
	frame_dig 3 // i: uint64
	int 56
	* // acc * typeLength
	int 0
	+
	int 32
	extract3
	frame_dig -2 // staker: Address
	==
	bz if2_end

	// if2_consequent
	// contracts/stakingPool.algo.ts:135
	// stakers[i].Balance += stakedAmountPayment.amount
	frame_dig 2 // stakers: (address,uint64,uint64,uint64)[73]
	frame_dig 3 // i: uint64
	int 56
	* // acc * typeLength
	int 32 // headOffset
	+
	frame_dig 2 // stakers: (address,uint64,uint64,uint64)[73]
	frame_dig 3 // i: uint64
	int 56
	* // acc * typeLength
	int 32 // headOffset
	+
	int 8
	extract3
	btoi
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	+
	itob
	replace3
	frame_bury 2 // stakers: (address,uint64,uint64,uint64)[73]

	// contracts/stakingPool.algo.ts:136
	// stakers[i].EntryTime = entryTime
	frame_dig 2 // stakers: (address,uint64,uint64,uint64)[73]
	frame_dig 3 // i: uint64
	int 56
	* // acc * typeLength
	int 48 // headOffset
	+
	frame_dig 0 // entryTime: uint64
	itob
	replace3
	frame_bury 2 // stakers: (address,uint64,uint64,uint64)[73]

	// contracts/stakingPool.algo.ts:138
	// this.Stakers.value[i] = stakers[i]
	frame_dig 3 // i: uint64
	int 56
	* // acc * typeLength
	frame_dig 2 // stakers: (address,uint64,uint64,uint64)[73]
	frame_dig 3 // i: uint64
	int 56
	* // acc * typeLength
	int 56
	extract3
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/stakingPool.algo.ts:139
	// this.TotalAlgoStaked.value += stakedAmountPayment.amount
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	+
	byte 0x7374616b6564 // "staked"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:140
	// return entryTime;
	frame_dig 0 // entryTime: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

if2_end:
	// if3_condition
	// contracts/stakingPool.algo.ts:142
	// stakers[i].Account === Address.zeroAddress
	frame_dig 2 // stakers: (address,uint64,uint64,uint64)[73]
	frame_dig 3 // i: uint64
	int 56
	* // acc * typeLength
	int 0
	+
	int 32
	extract3
	global ZeroAddress
	==
	bz if3_end

	// if3_consequent
	// contracts/stakingPool.algo.ts:143
	// firstEmpty = i + 1
	frame_dig 3 // i: uint64
	int 1
	+
	frame_bury 1 // firstEmpty: uint64
	b for_0_end

if3_end:
	// contracts/stakingPool.algo.ts:146
	// i += 1
	frame_dig 3 // i: uint64
	int 1
	+
	frame_bury 3 // i: uint64

	// contracts/stakingPool.algo.ts:133
	// i += 1
	frame_dig 3 // i: uint64
	int 1
	+
	frame_bury 3 // i: uint64
	b for_0

for_0_end:
	// if4_condition
	// contracts/stakingPool.algo.ts:149
	// firstEmpty === 0
	frame_dig 1 // firstEmpty: uint64
	int 0
	==
	bz if4_end

	// if4_consequent
	err // 'Staking pool full'

if4_end:
	// contracts/stakingPool.algo.ts:156
	// assert(
	//             stakedAmountPayment.amount >= this.MinAllowedStake.value,
	//             'must stake at least the minimum for this pool'
	//         )
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	byte 0x6d696e416c6c6f7765645374616b65 // "minAllowedStake"
	app_global_get
	>=

	// must stake at least the minimum for this pool
	assert

	// contracts/stakingPool.algo.ts:161
	// assert(this.Stakers.value[firstEmpty - 1].Account === Address.zeroAddress)
	frame_dig 1 // firstEmpty: uint64
	int 1
	-
	int 56
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	global ZeroAddress
	==
	assert

	// contracts/stakingPool.algo.ts:162
	// this.Stakers.value[firstEmpty - 1] = {
	//             Account: staker,
	//             Balance: stakedAmountPayment.amount,
	//             TotalRewarded: 0,
	//             EntryTime: entryTime,
	//         }
	frame_dig 1 // firstEmpty: uint64
	int 1
	-
	int 56
	* // acc * typeLength
	frame_dig -2 // staker: Address
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	itob
	concat
	byte 0x0000000000000000
	concat
	frame_dig 0 // entryTime: uint64
	itob
	concat
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/stakingPool.algo.ts:168
	// this.NumStakers.value += 1
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	int 1
	+
	byte 0x6e756d5374616b657273 // "numStakers"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:169
	// this.TotalAlgoStaked.value += stakedAmountPayment.amount
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	+
	byte 0x7374616b6564 // "staked"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:170
	// return entryTime;
	frame_dig 0 // entryTime: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

// removeStake(address,uint64)void
abi_route_removeStake:
	// amountToUnstake: uint64
	txna ApplicationArgs 2
	btoi

	// staker: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute removeStake(address,uint64)void
	callsub removeStake
	int 1
	return

// removeStake(staker: Address, amountToUnstake: uint64): void
//
// Removes stake on behalf of a particular staker.  Also notifies the validator contract for this pools
// validator of the staker / balance changes.
//
// @param {Address} staker - The address of the account removing stake.
// @param {uint64} amountToUnstake - The amount of stake to be removed.
// @throws {Error} If the account has insufficient balance or if the account is not found.
removeStake:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts/stakingPool.algo.ts:185
	// assert(staker !== Account.zeroAddress)
	frame_dig -1 // staker: Address
	global ZeroAddress
	!=
	assert

	// contracts/stakingPool.algo.ts:186
	// assert(this.txn.sender === staker)
	txn Sender
	frame_dig -1 // staker: Address
	==
	assert

	// contracts/stakingPool.algo.ts:187
	// assert(amountToUnstake !== 0)
	frame_dig -2 // amountToUnstake: uint64
	int 0
	!=
	assert

	// contracts/stakingPool.algo.ts:189
	// stakers = clone(this.Stakers.value)
	byte 0x7374616b657273 // "stakers"
	box_get
	assert
	frame_bury 0 // stakers: (address,uint64,uint64,uint64)[73]

	// contracts/stakingPool.algo.ts:190
	// for (let i = 0; i < stakers.length; i += 1)
	int 0
	frame_bury 1 // i: uint64

for_1:
	// contracts/stakingPool.algo.ts:190
	// i < stakers.length
	frame_dig 1 // i: uint64
	int 73
	<
	bz for_1_end

	// if5_condition
	// contracts/stakingPool.algo.ts:191
	// stakers[i].Account === staker
	frame_dig 0 // stakers: (address,uint64,uint64,uint64)[73]
	frame_dig 1 // i: uint64
	int 56
	* // acc * typeLength
	int 0
	+
	int 32
	extract3
	frame_dig -1 // staker: Address
	==
	bz if5_end

	// if5_consequent
	// if6_condition
	// contracts/stakingPool.algo.ts:192
	// stakers[i].Balance < amountToUnstake
	frame_dig 0 // stakers: (address,uint64,uint64,uint64)[73]
	frame_dig 1 // i: uint64
	int 56
	* // acc * typeLength
	int 32 // headOffset
	+
	int 8
	extract3
	btoi
	frame_dig -2 // amountToUnstake: uint64
	<
	bz if6_end

	// if6_consequent
	err // 'Insufficient balance'

if6_end:
	// contracts/stakingPool.algo.ts:195
	// stakers[i].Balance -= amountToUnstake
	frame_dig 0 // stakers: (address,uint64,uint64,uint64)[73]
	frame_dig 1 // i: uint64
	int 56
	* // acc * typeLength
	int 32 // headOffset
	+
	frame_dig 0 // stakers: (address,uint64,uint64,uint64)[73]
	frame_dig 1 // i: uint64
	int 56
	* // acc * typeLength
	int 32 // headOffset
	+
	int 8
	extract3
	btoi
	frame_dig -2 // amountToUnstake: uint64
	-
	itob
	replace3
	frame_bury 0 // stakers: (address,uint64,uint64,uint64)[73]

	// contracts/stakingPool.algo.ts:196
	// this.TotalAlgoStaked.value -= amountToUnstake
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig -2 // amountToUnstake: uint64
	-
	byte 0x7374616b6564 // "staked"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:199
	// assert(
	//                     stakers[i].Balance === 0 || stakers[i].Balance >= this.MinAllowedStake.value,
	//                     'cannot reduce balance below minimum allowed stake unless all is removed'
	//                 )
	frame_dig 0 // stakers: (address,uint64,uint64,uint64)[73]
	frame_dig 1 // i: uint64
	int 56
	* // acc * typeLength
	int 32 // headOffset
	+
	int 8
	extract3
	btoi
	int 0
	==
	dup
	bnz skip_or1
	frame_dig 0 // stakers: (address,uint64,uint64,uint64)[73]
	frame_dig 1 // i: uint64
	int 56
	* // acc * typeLength
	int 32 // headOffset
	+
	int 8
	extract3
	btoi
	byte 0x6d696e416c6c6f7765645374616b65 // "minAllowedStake"
	app_global_get
	>=
	||

skip_or1:
	// cannot reduce balance below minimum allowed stake unless all is removed
	assert

	// contracts/stakingPool.algo.ts:205
	// sendPayment({
	//                     amount: amountToUnstake,
	//                     receiver: staker,
	//                     note: 'unstaked',
	//                 })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:206
	// amount: amountToUnstake
	frame_dig -2 // amountToUnstake: uint64
	itxn_field Amount

	// contracts/stakingPool.algo.ts:207
	// receiver: staker
	frame_dig -1 // staker: Address
	itxn_field Receiver

	// contracts/stakingPool.algo.ts:208
	// note: 'unstaked'
	byte 0x756e7374616b6564 // "unstaked"
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stakingPool.algo.ts:210
	// stakerRemoved = false
	int 0
	frame_bury 2 // stakerRemoved: bool

	// if7_condition
	// contracts/stakingPool.algo.ts:211
	// stakers[i].Balance === 0
	frame_dig 0 // stakers: (address,uint64,uint64,uint64)[73]
	frame_dig 1 // i: uint64
	int 56
	* // acc * typeLength
	int 32 // headOffset
	+
	int 8
	extract3
	btoi
	int 0
	==
	bz if7_end

	// if7_consequent
	// contracts/stakingPool.algo.ts:213
	// this.NumStakers.value -= 1
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	int 1
	-
	byte 0x6e756d5374616b657273 // "numStakers"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:214
	// stakers[i].Account = Address.zeroAddress
	frame_dig 0 // stakers: (address,uint64,uint64,uint64)[73]
	frame_dig 1 // i: uint64
	int 56
	* // acc * typeLength
	int 0
	+
	global ZeroAddress
	replace3
	frame_bury 0 // stakers: (address,uint64,uint64,uint64)[73]

	// contracts/stakingPool.algo.ts:215
	// stakers[i].TotalRewarded = 0
	frame_dig 0 // stakers: (address,uint64,uint64,uint64)[73]
	frame_dig 1 // i: uint64
	int 56
	* // acc * typeLength
	int 40 // headOffset
	+
	byte 0x0000000000000000
	replace3
	frame_bury 0 // stakers: (address,uint64,uint64,uint64)[73]

	// contracts/stakingPool.algo.ts:216
	// stakerRemoved = true
	int 1
	frame_bury 2 // stakerRemoved: bool

if7_end:
	// contracts/stakingPool.algo.ts:219
	// this.Stakers.value[i] = stakers[i]
	frame_dig 1 // i: uint64
	int 56
	* // acc * typeLength
	frame_dig 0 // stakers: (address,uint64,uint64,uint64)[73]
	frame_dig 1 // i: uint64
	int 56
	* // acc * typeLength
	int 56
	extract3
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/stakingPool.algo.ts:225
	// sendMethodCall<[[uint64, uint64, uint64], Address, uint64, boolean], void>({
	//                     applicationID: Application.fromID(this.CreatingValidatorContractAppID.value),
	//                     name: 'stakeRemoved',
	//                     methodArgs: [
	//                         [this.ValidatorID.value, this.PoolID.value, this.app.id],
	//                         staker,
	//                         amountToUnstake,
	//                         stakerRemoved,
	//                     ],
	//                 })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "stakeRemoved((uint64,uint64,uint64),address,uint64,bool)void"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:226
	// applicationID: Application.fromID(this.CreatingValidatorContractAppID.value)
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:228
	// methodArgs: [
	//                         [this.ValidatorID.value, this.PoolID.value, this.app.id],
	//                         staker,
	//                         amountToUnstake,
	//                         stakerRemoved,
	//                     ]
	byte 0x76616c696461746f724944 // "validatorID"
	app_global_get
	itob
	byte 0x706f6f6c4944 // "poolID"
	app_global_get
	itob
	concat
	txna Applications 0
	itob
	concat
	itxn_field ApplicationArgs
	frame_dig -1 // staker: Address
	itxn_field ApplicationArgs
	frame_dig -2 // amountToUnstake: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig 2 // stakerRemoved: bool
	byte 0x00
	int 0
	uncover 2
	setbit
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stakingPool.algo.ts:235
	// return;
	retsub

if5_end:
	// contracts/stakingPool.algo.ts:190
	// i += 1
	frame_dig 1 // i: uint64
	int 1
	+
	frame_bury 1 // i: uint64
	b for_1

for_1_end:
	err // 'Account not found'

// getStakerInfo(address)(address,uint64,uint64,uint64)
abi_route_getStakerInfo:
	// The ABI return prefix
	byte 0x151f7c75

	// staker: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute getStakerInfo(address)(address,uint64,uint64,uint64)
	callsub getStakerInfo
	concat
	log
	int 1
	return

// getStakerInfo(staker: Address): StakedInfo
//
// Retrieves the staked information for a given staker.
//
// @param {Address} staker - The address of the staker.
// @returns {StakedInfo} - The staked information for the given staker.
// @throws {Error} - If the staker's account is not found.
getStakerInfo:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/stakingPool.algo.ts:249
	// stakers = clone(this.Stakers.value)
	byte 0x7374616b657273 // "stakers"
	box_get
	assert
	frame_bury 0 // stakers: (address,uint64,uint64,uint64)[73]

	// contracts/stakingPool.algo.ts:250
	// for (let i = 0; i < stakers.length; i += 1)
	int 0
	frame_bury 1 // i: uint64

for_2:
	// contracts/stakingPool.algo.ts:250
	// i < stakers.length
	frame_dig 1 // i: uint64
	int 73
	<
	bz for_2_end

	// if8_condition
	// contracts/stakingPool.algo.ts:251
	// stakers[i].Account === staker
	frame_dig 0 // stakers: (address,uint64,uint64,uint64)[73]
	frame_dig 1 // i: uint64
	int 56
	* // acc * typeLength
	int 0
	+
	int 32
	extract3
	frame_dig -1 // staker: Address
	==
	bz if8_end

	// if8_consequent
	// contracts/stakingPool.algo.ts:252
	// return stakers[i];
	frame_dig 0 // stakers: (address,uint64,uint64,uint64)[73]
	frame_dig 1 // i: uint64
	int 56
	* // acc * typeLength
	int 56
	extract3

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

if8_end:
	// contracts/stakingPool.algo.ts:250
	// i += 1
	frame_dig 1 // i: uint64
	int 1
	+
	frame_bury 1 // i: uint64
	b for_2

for_2_end:
	err // 'Account not found'

// payStakers()void
abi_route_payStakers:
	// execute payStakers()void
	callsub payStakers
	int 1
	return

// payStakers(): void
payStakers:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 23

	// contracts/stakingPool.algo.ts:260
	// assert(this.txn.sender === this.Owner.value || this.txn.sender === this.Manager.value)
	txn Sender
	byte 0x6f776e6572 // "owner"
	app_global_get
	==
	dup
	bnz skip_or2
	txn Sender
	byte 0x6d616e61676572 // "manager"
	app_global_get
	==
	||

skip_or2:
	assert

	// contracts/stakingPool.algo.ts:263
	// payoutConfig = sendMethodCall<[uint64], [uint16, uint32, Address, uint8, uint16]>({
	//             applicationID: Application.fromID(this.CreatingValidatorContractAppID.value),
	//             name: 'getValidatorConfig',
	//             methodArgs: [this.ValidatorID.value],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "getValidatorConfig(uint64)(uint16,uint32,address,uint8,uint16)"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:264
	// applicationID: Application.fromID(this.CreatingValidatorContractAppID.value)
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:266
	// methodArgs: [this.ValidatorID.value]
	byte 0x76616c696461746f724944 // "validatorID"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 0 // payoutConfig: (uint16,uint32,address,uint8,uint16)

	// contracts/stakingPool.algo.ts:271
	// payoutDays = payoutConfig[0] as uint64
	frame_dig 0 // payoutConfig: (uint16,uint32,address,uint8,uint16)
	extract 0 2
	btoi
	frame_bury 1 // payoutDays: uint64

	// contracts/stakingPool.algo.ts:272
	// pctToValidator = payoutConfig[1] as uint64
	frame_dig 0 // payoutConfig: (uint16,uint32,address,uint8,uint16)
	extract 2 4
	btoi
	frame_bury 2 // pctToValidator: uint64

	// contracts/stakingPool.algo.ts:273
	// validatorCommissionAddress = payoutConfig[2]
	frame_dig 0 // payoutConfig: (uint16,uint32,address,uint8,uint16)
	extract 6 32
	frame_bury 3 // validatorCommissionAddress: address

	// contracts/stakingPool.algo.ts:277
	// origBalance = this.app.address.balance
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	frame_bury 4 // origBalance: uint64

	// contracts/stakingPool.algo.ts:278
	// rewardAvailable = origBalance - this.TotalAlgoStaked.value - this.app.address.minBalance
	frame_dig 4 // origBalance: uint64
	byte 0x7374616b6564 // "staked"
	app_global_get
	-
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	frame_bury 5 // rewardAvailable: uint64

	// contracts/stakingPool.algo.ts:281
	// assert(
	//             rewardAvailable > globals.minTxnFee * 2,
	//             'Reward to payout not high enough to cover txn costs of paying it out'
	//         )
	frame_dig 5 // rewardAvailable: uint64
	global MinTxnFee
	int 2
	*
	>

	// Reward to payout not high enough to cover txn costs of paying it out
	assert

	// contracts/stakingPool.algo.ts:287
	// validatorPay = wideRatio([rewardAvailable, pctToValidator], [1000000])
	frame_dig 5 // rewardAvailable: uint64
	frame_dig 2 // pctToValidator: uint64
	mulw
	int 0
	int 1000000
	divmodw
	pop
	pop
	swap
	!
	assert
	frame_bury 6 // validatorPay: uint64

	// contracts/stakingPool.algo.ts:289
	// rewardAvailable -= validatorPay
	frame_dig 5 // rewardAvailable: uint64
	frame_dig 6 // validatorPay: uint64
	-
	frame_bury 5 // rewardAvailable: uint64

	// contracts/stakingPool.algo.ts:293
	// sendPayment({
	//             amount: validatorPay,
	//             receiver: validatorCommissionAddress,
	//             note: 'validator reward',
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:294
	// amount: validatorPay
	frame_dig 6 // validatorPay: uint64
	itxn_field Amount

	// contracts/stakingPool.algo.ts:295
	// receiver: validatorCommissionAddress
	frame_dig 3 // validatorCommissionAddress: address
	itxn_field Receiver

	// contracts/stakingPool.algo.ts:296
	// note: 'validator reward'
	byte 0x76616c696461746f7220726577617264 // "validator reward"
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stakingPool.algo.ts:306
	// curTime = globals.latestTimestamp
	global LatestTimestamp
	frame_bury 7 // curTime: uint64

	// contracts/stakingPool.algo.ts:308
	// payoutDaysInSecs = payoutDays * 24 * 60 * 60
	frame_dig 1 // payoutDays: uint64
	int 24
	*
	int 60
	*
	int 60
	*
	frame_bury 8 // payoutDaysInSecs: uint64

	// contracts/stakingPool.algo.ts:332
	// partialStakersTotalStake = 0
	int 0
	frame_bury 9 // partialStakersTotalStake: uint64

	// contracts/stakingPool.algo.ts:333
	// i = 0
	int 0
	frame_bury 10 // i: uint64

	// contracts/stakingPool.algo.ts:334
	// this.Stakers.value.forEach
	byte 0x7374616b657273 // "stakers"
	box_get
	assert
	dup
	frame_bury 11 // copy of the array we are iterating over
	extract 0 56
	frame_bury 12 // staker: (address,uint64,uint64,uint64)
	int 0
	frame_bury 13 // the offset we are extracting the next element from

forEach_0:
	// if9_condition
	// contracts/stakingPool.algo.ts:335
	// staker.Account !== Address.zeroAddress
	frame_dig 12 // staker: (address,uint64,uint64,uint64)
	extract 0 32
	global ZeroAddress
	!=
	bz if9_end

	// if9_consequent
	// if10_condition
	// contracts/stakingPool.algo.ts:336
	// staker.EntryTime > curTime
	frame_dig 12 // staker: (address,uint64,uint64,uint64)
	extract 48 8
	btoi
	frame_dig 7 // curTime: uint64
	>
	bz if10_else

	// if10_consequent
	// contracts/stakingPool.algo.ts:339
	// partialStakersTotalStake += staker.Balance
	frame_dig 9 // partialStakersTotalStake: uint64
	frame_dig 12 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	+
	frame_bury 9 // partialStakersTotalStake: uint64
	b if10_end

if10_else:
	// contracts/stakingPool.algo.ts:343
	// timeInPool = curTime - staker.EntryTime
	frame_dig 7 // curTime: uint64
	frame_dig 12 // staker: (address,uint64,uint64,uint64)
	extract 48 8
	btoi
	-
	frame_bury 14 // timeInPool: uint64

	// if11_condition
	// contracts/stakingPool.algo.ts:346
	// timeInPool < payoutDaysInSecs
	frame_dig 14 // timeInPool: uint64
	frame_dig 8 // payoutDaysInSecs: uint64
	<
	bz if11_end

	// if11_consequent
	// contracts/stakingPool.algo.ts:347
	// partialStakersTotalStake += staker.Balance
	frame_dig 9 // partialStakersTotalStake: uint64
	frame_dig 12 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	+
	frame_bury 9 // partialStakersTotalStake: uint64

	// contracts/stakingPool.algo.ts:348
	// timePercentage = (timeInPool * 1000) / payoutDaysInSecs
	frame_dig 14 // timeInPool: uint64
	int 1000
	*
	frame_dig 8 // payoutDaysInSecs: uint64
	/
	frame_bury 15 // timePercentage: uint64

	// contracts/stakingPool.algo.ts:350
	// stakerReward = wideRatio(
	//                             [staker.Balance, rewardAvailable, timePercentage],
	//                             [this.TotalAlgoStaked.value / 1000]
	//                         )
	frame_dig 12 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 5 // rewardAvailable: uint64
	mulw
	frame_dig 15 // timePercentage: uint64
	uncover 2
	dig 1
	*
	cover 2
	mulw
	cover 2
	+
	swap
	int 0
	byte 0x7374616b6564 // "staked"
	app_global_get
	int 1000
	/
	divmodw
	pop
	pop
	swap
	!
	assert
	frame_bury 16 // stakerReward: uint64

	// contracts/stakingPool.algo.ts:356
	// rewardAvailable -= stakerReward
	frame_dig 5 // rewardAvailable: uint64
	frame_dig 16 // stakerReward: uint64
	-
	frame_bury 5 // rewardAvailable: uint64

	// contracts/stakingPool.algo.ts:359
	// staker.Balance += stakerReward
	frame_dig 12 // staker: (address,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 12 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 16 // stakerReward: uint64
	+
	itob
	replace3
	frame_bury 12 // staker: (address,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:360
	// staker.TotalRewarded += stakerReward
	frame_dig 12 // staker: (address,uint64,uint64,uint64)
	int 40 // headOffset
	frame_dig 12 // staker: (address,uint64,uint64,uint64)
	extract 40 8
	btoi
	frame_dig 16 // stakerReward: uint64
	+
	itob
	replace3
	frame_bury 12 // staker: (address,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:363
	// this.Stakers.value[i] = staker
	frame_dig 10 // i: uint64
	int 56
	* // acc * typeLength
	frame_dig 12 // staker: (address,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

if11_end:

if10_end:

if9_end:
	// contracts/stakingPool.algo.ts:367
	// i += 1
	frame_dig 10 // i: uint64
	int 1
	+
	frame_bury 10 // i: uint64

	// increment offset and loop if not out of bounds
	frame_dig 13 // the offset we are extracting the next element from
	int 56
	+
	dup
	int 4088 // offset of last element
	<
	bz forEach_0_end
	frame_bury 13 // the offset we are extracting the next element from
	frame_dig 11 // copy of the array we are iterating over
	frame_dig 13 // the offset we are extracting the next element from
	int 56
	extract
	frame_bury 12 // staker: (address,uint64,uint64,uint64)
	b forEach_0

forEach_0_end:
	// contracts/stakingPool.algo.ts:372
	// newPoolTotalStake = this.TotalAlgoStaked.value - partialStakersTotalStake
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig 9 // partialStakersTotalStake: uint64
	-
	frame_bury 17 // newPoolTotalStake: uint64

	// contracts/stakingPool.algo.ts:374
	// i = 0
	int 0
	frame_bury 10 // i: uint64

	// contracts/stakingPool.algo.ts:375
	// this.Stakers.value.forEach
	byte 0x7374616b657273 // "stakers"
	box_get
	assert
	dup
	frame_bury 18 // copy of the array we are iterating over
	extract 0 56
	frame_bury 19 // staker: (address,uint64,uint64,uint64)
	int 0
	frame_bury 20 // the offset we are extracting the next element from

forEach_1:
	// if12_condition
	// contracts/stakingPool.algo.ts:376
	// staker.Account !== Address.zeroAddress && staker.EntryTime < curTime
	frame_dig 19 // staker: (address,uint64,uint64,uint64)
	extract 0 32
	global ZeroAddress
	!=
	dup
	bz skip_and0
	frame_dig 19 // staker: (address,uint64,uint64,uint64)
	extract 48 8
	btoi
	frame_dig 7 // curTime: uint64
	<
	&&

skip_and0:
	bz if12_end

	// if12_consequent
	// contracts/stakingPool.algo.ts:377
	// timeInPool = curTime - staker.EntryTime
	frame_dig 7 // curTime: uint64
	frame_dig 19 // staker: (address,uint64,uint64,uint64)
	extract 48 8
	btoi
	-
	frame_bury 21 // timeInPool: uint64

	// if13_condition
	// contracts/stakingPool.algo.ts:379
	// timeInPool < payoutDaysInSecs
	frame_dig 21 // timeInPool: uint64
	frame_dig 8 // payoutDaysInSecs: uint64
	<
	bz if13_end

	// if13_consequent
	// contracts/stakingPool.algo.ts:380
	// return;
	b forEach_1_end

if13_end:
	// contracts/stakingPool.algo.ts:384
	// stakerReward = wideRatio([staker.Balance, rewardAvailable], [newPoolTotalStake])
	frame_dig 19 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 5 // rewardAvailable: uint64
	mulw
	int 0
	frame_dig 17 // newPoolTotalStake: uint64
	divmodw
	pop
	pop
	swap
	!
	assert
	frame_bury 22 // stakerReward: uint64

	// contracts/stakingPool.algo.ts:387
	// staker.Balance += stakerReward
	frame_dig 19 // staker: (address,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 19 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 22 // stakerReward: uint64
	+
	itob
	replace3
	frame_bury 19 // staker: (address,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:388
	// staker.TotalRewarded += stakerReward
	frame_dig 19 // staker: (address,uint64,uint64,uint64)
	int 40 // headOffset
	frame_dig 19 // staker: (address,uint64,uint64,uint64)
	extract 40 8
	btoi
	frame_dig 22 // stakerReward: uint64
	+
	itob
	replace3
	frame_bury 19 // staker: (address,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:391
	// this.Stakers.value[i] = staker
	frame_dig 10 // i: uint64
	int 56
	* // acc * typeLength
	frame_dig 19 // staker: (address,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

if12_end:
	// contracts/stakingPool.algo.ts:393
	// i += 1
	frame_dig 10 // i: uint64
	int 1
	+
	frame_bury 10 // i: uint64

	// increment offset and loop if not out of bounds
	frame_dig 20 // the offset we are extracting the next element from
	int 56
	+
	dup
	int 4088 // offset of last element
	<
	bz forEach_1_end
	frame_bury 20 // the offset we are extracting the next element from
	frame_dig 18 // copy of the array we are iterating over
	frame_dig 20 // the offset we are extracting the next element from
	int 56
	extract
	frame_bury 19 // staker: (address,uint64,uint64,uint64)
	b forEach_1

forEach_1_end:
	// contracts/stakingPool.algo.ts:398
	// increasedStake = this.app.address.balance - this.TotalAlgoStaked.value - this.app.address.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	byte 0x7374616b6564 // "staked"
	app_global_get
	-
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	frame_bury 23 // increasedStake: uint64

	// contracts/stakingPool.algo.ts:399
	// this.TotalAlgoStaked.value += increasedStake
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig 23 // increasedStake: uint64
	+
	byte 0x7374616b6564 // "staked"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:404
	// sendMethodCall<[[uint64, uint64, uint64], uint64], void>({
	//             applicationID: Application.fromID(this.CreatingValidatorContractAppID.value),
	//             name: 'stakeUpdatedViaRewards',
	//             methodArgs: [[this.ValidatorID.value, this.PoolID.value, this.app.id], increasedStake],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "stakeUpdatedViaRewards((uint64,uint64,uint64),uint64)void"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:405
	// applicationID: Application.fromID(this.CreatingValidatorContractAppID.value)
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:407
	// methodArgs: [[this.ValidatorID.value, this.PoolID.value, this.app.id], increasedStake]
	byte 0x76616c696461746f724944 // "validatorID"
	app_global_get
	itob
	byte 0x706f6f6c4944 // "poolID"
	app_global_get
	itob
	concat
	txna Applications 0
	itob
	concat
	itxn_field ApplicationArgs
	frame_dig 23 // increasedStake: uint64
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// goOnline(byte[],byte[],byte[],uint64,uint64,uint64)void
abi_route_goOnline:
	// voteKeyDilution: uint64
	txna ApplicationArgs 6
	btoi

	// voteLast: uint64
	txna ApplicationArgs 5
	btoi

	// voteFirst: uint64
	txna ApplicationArgs 4
	btoi

	// stateProofPK: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// selectionPK: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// votePK: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute goOnline(byte[],byte[],byte[],uint64,uint64,uint64)void
	callsub goOnline
	int 1
	return

// goOnline(votePK: bytes, selectionPK: bytes, stateProofPK: bytes, voteFirst: uint64, voteLast: uint64, voteKeyDilution: uint64): void
goOnline:
	proto 6 0

	// contracts/stakingPool.algo.ts:419
	// assert(this.txn.sender === this.Owner.value || this.txn.sender === this.Manager.value)
	txn Sender
	byte 0x6f776e6572 // "owner"
	app_global_get
	==
	dup
	bnz skip_or3
	txn Sender
	byte 0x6d616e61676572 // "manager"
	app_global_get
	==
	||

skip_or3:
	assert

	// contracts/stakingPool.algo.ts:420
	// sendOnlineKeyRegistration({
	//             votePK: votePK,
	//             selectionPK: selectionPK,
	//             stateProofPK: stateProofPK,
	//             voteFirst: voteFirst,
	//             voteLast: voteLast,
	//             voteKeyDilution: voteKeyDilution,
	//         })
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:421
	// votePK: votePK
	frame_dig -1 // votePK: bytes
	itxn_field VotePK

	// contracts/stakingPool.algo.ts:422
	// selectionPK: selectionPK
	frame_dig -2 // selectionPK: bytes
	itxn_field SelectionPK

	// contracts/stakingPool.algo.ts:423
	// stateProofPK: stateProofPK
	frame_dig -3 // stateProofPK: bytes
	itxn_field StateProofPK

	// contracts/stakingPool.algo.ts:424
	// voteFirst: voteFirst
	frame_dig -4 // voteFirst: uint64
	itxn_field VoteFirst

	// contracts/stakingPool.algo.ts:425
	// voteLast: voteLast
	frame_dig -5 // voteLast: uint64
	itxn_field VoteLast

	// contracts/stakingPool.algo.ts:426
	// voteKeyDilution: voteKeyDilution
	frame_dig -6 // voteKeyDilution: uint64
	itxn_field VoteKeyDilution

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// goOffline()void
abi_route_goOffline:
	// execute goOffline()void
	callsub goOffline
	int 1
	return

// goOffline(): void
goOffline:
	proto 0 0

	// contracts/stakingPool.algo.ts:431
	// assert(this.txn.sender === this.Owner.value || this.txn.sender === this.Manager.value)
	txn Sender
	byte 0x6f776e6572 // "owner"
	app_global_get
	==
	dup
	bnz skip_or4
	txn Sender
	byte 0x6d616e61676572 // "manager"
	app_global_get
	==
	||

skip_or4:
	assert

	// contracts/stakingPool.algo.ts:432
	// sendOfflineKeyRegistration({})
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// getEntryTime(): uint64
//
// Calculate the entry time for counting a stake as entering the pool.
// Algorand won't see the balance increase for ALGORAND_STAKING_BLOCK_DELAY rounds, so we approximate it.
// The entry time is calculated by adding an approximate number of seconds based on current AVG block times
// to the original entry time.  This means users don't get payouts based on time their balance wouldn't have
// been seen by the network.
//
// @returns {uint64} - The updated entry time.
getEntryTime:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/stakingPool.algo.ts:447
	// entryTime = globals.latestTimestamp
	global LatestTimestamp
	frame_bury 0 // entryTime: uint64

	// contracts/stakingPool.algo.ts:450
	// return entryTime + (ALGORAND_STAKING_BLOCK_DELAY * AVG_BLOCK_TIME_SECS) / 10;
	frame_dig 0 // entryTime: uint64
	int 960
	+

	// set the subroutine return value
	frame_bury 0
	retsub

create_NoOp:
	method "createApplication(uint64,uint64,uint64,address,address,uint64,uint64)void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "gas()void"
	method "addStake(pay,address)uint64"
	method "removeStake(address,uint64)void"
	method "getStakerInfo(address)(address,uint64,uint64,uint64)"
	method "payStakers()void"
	method "goOnline(byte[],byte[],byte[],uint64,uint64,uint64)void"
	method "goOffline()void"
	txna ApplicationArgs 0
	match abi_route_gas abi_route_addStake abi_route_removeStake abi_route_getStakerInfo abi_route_payStakers abi_route_goOnline abi_route_goOffline
	err