#pragma version 9

// This TEAL was generated by TEALScript v0.77.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

// createApplication(uint64,uint64,address,address)void
abi_route_createApplication:
	// manager: address
	txna ApplicationArgs 4
	dup
	len
	int 32
	==
	assert

	// owner: address
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// poolID: uint64
	txna ApplicationArgs 2
	btoi

	// validatorID: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,uint64,address,address)void
	callsub createApplication
	int 1
	return

// createApplication(validatorID: uint64, poolID: uint64, owner: Address, manager: Address): void
//
// Initialize the staking pool w/ owner and manager, but can only be created by the validator contract.
// @param validatorID - id of validator we're a staking pool of
// @param poolID - which pool id are we
// @param owner
// @param manager
createApplication:
	proto 4 0

	// contracts/stakingPool.algo.ts:45
	// assert(this.txn.sender == Application.fromID(this.VALIDATOR_REGISTRY_APP_ID).address)
	txn Sender
	pushint TMPL_VALIDATOR_REGISTRY_APP_ID
	app_params_get AppAddress
	pop
	==
	assert

	// contracts/stakingPool.algo.ts:47
	// this.ValidatorID.value = validatorID
	byte 0x76616c696461746f724944 // "validatorID"
	frame_dig -1 // validatorID: uint64
	app_global_put

	// contracts/stakingPool.algo.ts:48
	// this.PoolID.value = poolID
	byte 0x6e6f64654944 // "nodeID"
	frame_dig -2 // poolID: uint64
	app_global_put

	// contracts/stakingPool.algo.ts:49
	// this.Owner.value = owner
	byte 0x6f776e6572 // "owner"
	frame_dig -3 // owner: Address
	app_global_put

	// contracts/stakingPool.algo.ts:50
	// this.Manager.value = manager
	byte 0x6d616e61676572 // "manager"
	frame_dig -4 // manager: Address
	app_global_put

	// contracts/stakingPool.algo.ts:51
	// this.NumStakers.value = 0
	byte 0x6e756d5374616b657273 // "numStakers"
	int 0
	app_global_put

	// contracts/stakingPool.algo.ts:52
	// this.TotalAlgoStaked.value = 0
	byte 0x7374616b6564 // "staked"
	int 0
	app_global_put

	// contracts/stakingPool.algo.ts:53
	// this.MaxAlgo.value = MAX_ALGO_PER_POOL
	byte 0x6d61785374616b65 // "maxStake"
	int 20000000000000
	app_global_put

	// contracts/stakingPool.algo.ts:54
	// this.Stakers.create()
	byte 0x7374616b657273 // "stakers"
	int 3840
	box_create
	pop
	retsub

// addStake(address,uint64)uint64
abi_route_addStake:
	// The ABI return prefix
	byte 0x151f7c75

	// amountToStake: uint64
	txna ApplicationArgs 2
	btoi

	// account: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute addStake(address,uint64)uint64
	callsub addStake
	itob
	concat
	log
	int 1
	return

// addStake(account: Address, amountToStake: uint64): uint64
//
// Adds stake to the given account.
//
// @param {Address} account - The account to add stake to.
// @param {uint64} amountToStake - The amount to stake.
// @throws {Error} - Throws an error if the staking pool is full.
// @returns {uint64} timestamp in seconds of stake add.
addStake:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// contracts/stakingPool.algo.ts:67
	// assert(account !== Account.zeroAddress)
	frame_dig -1 // account: Address
	global ZeroAddress
	!=
	assert

	// contracts/stakingPool.algo.ts:68
	// assert(this.txn.sender === account)
	txn Sender
	frame_dig -1 // account: Address
	==
	assert

	// contracts/stakingPool.algo.ts:72
	// verifyPayTxn(this.txnGroup[this.txn.groupIndex - 1], {
	//             sender: Application.fromID(this.VALIDATOR_REGISTRY_APP_ID).address,
	//             receiver: this.app.address,
	//             amount: amountToStake,
	//         })
	txn GroupIndex
	int 1
	-
	store 248 // verifyTxn index

	// verify pay
	load 248 // verifyTxn index
	gtxns TypeEnum
	int pay
	==
	assert

	// verify sender
	load 248 // verifyTxn index
	gtxns Sender
	pushint TMPL_VALIDATOR_REGISTRY_APP_ID
	app_params_get AppAddress
	pop
	==
	assert

	// verify receiver
	load 248 // verifyTxn index
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	load 248 // verifyTxn index
	gtxns Amount
	frame_dig -2 // amountToStake: uint64
	==
	assert

	// contracts/stakingPool.algo.ts:79
	// entryTime = globals.latestTimestamp
	global LatestTimestamp
	frame_bury 0 // entryTime: uint64

	// contracts/stakingPool.algo.ts:80
	// firstEmpty = 0
	int 0
	frame_bury 1 // firstEmpty: uint64

	// contracts/stakingPool.algo.ts:84
	// i = 0
	int 0
	frame_bury 2 // i: uint64

for_0:
	// contracts/stakingPool.algo.ts:84
	// i < MAX_STAKERS_PER_POOL
	frame_dig 2 // i: uint64
	int 80
	<
	bz for_0_end

	// if0_condition
	// contracts/stakingPool.algo.ts:85
	// this.Stakers.value[i].Account === account
	frame_dig 2 // i: uint64
	int 48
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_dig -1 // account: Address
	==
	bz if0_end

	// if0_consequent
	// contracts/stakingPool.algo.ts:86
	// this.Stakers.value[i].Balance += amountToStake
	frame_dig 2 // i: uint64
	int 48
	* // acc * typeLength
	int 32 // headOffset
	+
	frame_dig 2 // i: uint64
	int 48
	* // acc * typeLength
	int 32 // headOffset
	+
	int 8
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	btoi
	frame_dig -2 // amountToStake: uint64
	+
	itob
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/stakingPool.algo.ts:87
	// this.Stakers.value[i].EntryTime = entryTime
	frame_dig 2 // i: uint64
	int 48
	* // acc * typeLength
	int 40 // headOffset
	+
	frame_dig 0 // entryTime: uint64
	itob
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/stakingPool.algo.ts:88
	// this.TotalAlgoStaked.value += amountToStake
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig -2 // amountToStake: uint64
	+
	byte 0x7374616b6564 // "staked"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:89
	// return entryTime;
	frame_dig 0 // entryTime: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

if0_end:
	// if1_condition
	// contracts/stakingPool.algo.ts:91
	// firstEmpty != 0 && this.Stakers.value[i].Account === Address.zeroAddress
	frame_dig 1 // firstEmpty: uint64
	int 0
	!=
	dup
	bz skip_and0
	frame_dig 2 // i: uint64
	int 48
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	global ZeroAddress
	==
	&&

skip_and0:
	bz if1_end

	// if1_consequent
	// contracts/stakingPool.algo.ts:92
	// firstEmpty = i + 1
	frame_dig 2 // i: uint64
	int 1
	+
	frame_bury 1 // firstEmpty: uint64

if1_end:
	// contracts/stakingPool.algo.ts:84
	// i += 1
	frame_dig 2 // i: uint64
	int 1
	+
	frame_bury 2 // i: uint64
	b for_0

for_0_end:
	// if2_condition
	// contracts/stakingPool.algo.ts:95
	// firstEmpty == 0
	frame_dig 1 // firstEmpty: uint64
	int 0
	==
	bz if2_end

	// if2_consequent
	err // 'Staking pool full'

if2_end:
	// contracts/stakingPool.algo.ts:99
	// assert(this.Stakers.value[firstEmpty - 1].Account == Address.zeroAddress)
	frame_dig 1 // firstEmpty: uint64
	int 1
	-
	int 48
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	global ZeroAddress
	==
	assert

	// contracts/stakingPool.algo.ts:100
	// this.Stakers.value[firstEmpty - 1] = {
	//             Account: account,
	//             Balance: amountToStake,
	//             EntryTime: entryTime,
	//         }
	frame_dig 1 // firstEmpty: uint64
	int 1
	-
	int 48
	* // acc * typeLength
	frame_dig -1 // account: Address
	frame_dig -2 // amountToStake: uint64
	itob
	concat
	frame_dig 0 // entryTime: uint64
	itob
	concat
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/stakingPool.algo.ts:105
	// this.NumStakers.value += 1
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	int 1
	+
	byte 0x6e756d5374616b657273 // "numStakers"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:106
	// this.TotalAlgoStaked.value += amountToStake
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig -2 // amountToStake: uint64
	+
	byte 0x7374616b6564 // "staked"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:107
	// return entryTime;
	frame_dig 0 // entryTime: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// removeStake(address,uint64)void
abi_route_removeStake:
	// amountToUnstake: uint64
	txna ApplicationArgs 2
	btoi

	// account: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute removeStake(address,uint64)void
	callsub removeStake
	int 1
	return

// removeStake(account: Address, amountToUnstake: uint64): void
removeStake:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/stakingPool.algo.ts:118
	// assert(account !== Account.zeroAddress)
	frame_dig -1 // account: Address
	global ZeroAddress
	!=
	assert

	// contracts/stakingPool.algo.ts:119
	// assert(this.txn.sender === account)
	txn Sender
	frame_dig -1 // account: Address
	==
	assert

	// contracts/stakingPool.algo.ts:121
	// i = 0
	int 0
	frame_bury 0 // i: uint64

for_1:
	// contracts/stakingPool.algo.ts:121
	// i < MAX_STAKERS_PER_POOL
	frame_dig 0 // i: uint64
	int 80
	<
	bz for_1_end

	// if3_condition
	// contracts/stakingPool.algo.ts:122
	// this.Stakers.value[i].Account === account
	frame_dig 0 // i: uint64
	int 48
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_dig -1 // account: Address
	==
	bz if3_end

	// if3_consequent
	// if4_condition
	// contracts/stakingPool.algo.ts:123
	// this.Stakers.value[i].Balance < amountToUnstake
	frame_dig 0 // i: uint64
	int 48
	* // acc * typeLength
	int 32 // headOffset
	+
	int 8
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	btoi
	frame_dig -2 // amountToUnstake: uint64
	<
	bz if4_end

	// if4_consequent
	err // 'Insufficient balance'

if4_end:
	// contracts/stakingPool.algo.ts:126
	// this.Stakers.value[i].Balance -= amountToUnstake
	frame_dig 0 // i: uint64
	int 48
	* // acc * typeLength
	int 32 // headOffset
	+
	frame_dig 0 // i: uint64
	int 48
	* // acc * typeLength
	int 32 // headOffset
	+
	int 8
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	btoi
	frame_dig -2 // amountToUnstake: uint64
	-
	itob
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/stakingPool.algo.ts:127
	// this.TotalAlgoStaked.value -= amountToUnstake
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig -2 // amountToUnstake: uint64
	-
	byte 0x7374616b6564 // "staked"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:130
	// sendPayment({
	//                     amount: amountToUnstake,
	//                     receiver: account,
	//                     note: 'unstaked',
	//                 })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:131
	// amount: amountToUnstake
	frame_dig -2 // amountToUnstake: uint64
	itxn_field Amount

	// contracts/stakingPool.algo.ts:132
	// receiver: account
	frame_dig -1 // account: Address
	itxn_field Receiver

	// contracts/stakingPool.algo.ts:133
	// note: 'unstaked'
	byte 0x756e7374616b6564 // "unstaked"
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stakingPool.algo.ts:135
	// stakerRemoved = false
	int 0
	frame_bury 1 // stakerRemoved: bool

	// if5_condition
	// contracts/stakingPool.algo.ts:136
	// this.Stakers.value[i].Balance === 0
	frame_dig 0 // i: uint64
	int 48
	* // acc * typeLength
	int 32 // headOffset
	+
	int 8
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	btoi
	int 0
	==
	bz if5_end

	// if5_consequent
	// contracts/stakingPool.algo.ts:138
	// this.NumStakers.value -= 1
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	int 1
	-
	byte 0x6e756d5374616b657273 // "numStakers"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:139
	// this.Stakers.value[i].Account = Address.zeroAddress
	frame_dig 0 // i: uint64
	int 48
	* // acc * typeLength
	int 0
	+
	global ZeroAddress
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/stakingPool.algo.ts:140
	// stakerRemoved = true
	int 1
	frame_bury 1 // stakerRemoved: bool

if5_end:
	// contracts/stakingPool.algo.ts:144
	// sendMethodCall<[uint64, uint64, Address, uint64, boolean], void>({
	//                     applicationID: Application.fromID(this.VALIDATOR_REGISTRY_APP_ID),
	//                     name: 'stakeRemoved',
	//                     methodArgs: [this.ValidatorID.value, this.PoolID.value, account, amountToUnstake, stakerRemoved],
	//                 })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "stakeRemoved(uint64,uint64,address,uint64,bool)void"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:145
	// applicationID: Application.fromID(this.VALIDATOR_REGISTRY_APP_ID)
	pushint TMPL_VALIDATOR_REGISTRY_APP_ID
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:147
	// methodArgs: [this.ValidatorID.value, this.PoolID.value, account, amountToUnstake, stakerRemoved]
	byte 0x76616c696461746f724944 // "validatorID"
	app_global_get
	itob
	itxn_field ApplicationArgs
	byte 0x6e6f64654944 // "nodeID"
	app_global_get
	itob
	itxn_field ApplicationArgs
	frame_dig -1 // account: Address
	itxn_field ApplicationArgs
	frame_dig -2 // amountToUnstake: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig 1 // stakerRemoved: bool
	byte 0x00
	int 0
	uncover 2
	setbit
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stakingPool.algo.ts:150
	// return;
	retsub

if3_end:
	// contracts/stakingPool.algo.ts:121
	// i += 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64
	b for_1

for_1_end:
	err // 'Account not found'

// payStakers()void
abi_route_payStakers:
	// execute payStakers()void
	callsub payStakers
	int 1
	return

// payStakers(): void
payStakers:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 14

	// contracts/stakingPool.algo.ts:158
	// assert(this.txn.sender == this.Owner.value || this.txn.sender === this.Manager.value)
	txn Sender
	byte 0x6f776e6572 // "owner"
	app_global_get
	==
	dup
	bnz skip_or0
	txn Sender
	byte 0x6d616e61676572 // "manager"
	app_global_get
	==
	||

skip_or0:
	assert

	// contracts/stakingPool.algo.ts:161
	// payoutConfig = sendMethodCall<[uint64], [uint16, uint32, Address, uint8, uint16]>({
	//             applicationID: Application.fromID(this.VALIDATOR_REGISTRY_APP_ID),
	//             name: 'getValidatorConfig',
	//             methodArgs: [this.ValidatorID.value],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "getValidatorConfig(uint64)(uint16,uint32,address,uint8,uint16)"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:162
	// applicationID: Application.fromID(this.VALIDATOR_REGISTRY_APP_ID)
	pushint TMPL_VALIDATOR_REGISTRY_APP_ID
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:164
	// methodArgs: [this.ValidatorID.value]
	byte 0x76616c696461746f724944 // "validatorID"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 0 // payoutConfig: (uint16,uint32,address,uint8,uint16)

	// contracts/stakingPool.algo.ts:169
	// payoutDays = payoutConfig[0] as uint64
	frame_dig 0 // payoutConfig: (uint16,uint32,address,uint8,uint16)
	extract 0 2
	btoi
	frame_bury 1 // payoutDays: uint64

	// contracts/stakingPool.algo.ts:170
	// pctToValidator = payoutConfig[1] as uint64
	frame_dig 0 // payoutConfig: (uint16,uint32,address,uint8,uint16)
	extract 2 4
	btoi
	frame_bury 2 // pctToValidator: uint64

	// contracts/stakingPool.algo.ts:171
	// validatorCommissionAddress = payoutConfig[2]
	frame_dig 0 // payoutConfig: (uint16,uint32,address,uint8,uint16)
	extract 6 32
	frame_bury 3 // validatorCommissionAddress: address

	// contracts/stakingPool.algo.ts:175
	// rewardAvailable = this.app.address.balance - this.TotalAlgoStaked.value - this.app.address.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	byte 0x7374616b6564 // "staked"
	app_global_get
	-
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	frame_bury 4 // rewardAvailable: uint64

	// contracts/stakingPool.algo.ts:177
	// validatorPay = wideRatio([rewardAvailable, pctToValidator], [1000000])
	frame_dig 4 // rewardAvailable: uint64
	frame_dig 2 // pctToValidator: uint64
	mulw
	int 0
	int 1000000
	divmodw
	pop
	pop
	swap
	!
	assert
	frame_bury 5 // validatorPay: uint64

	// contracts/stakingPool.algo.ts:179
	// rewardAvailable -= validatorPay
	frame_dig 4 // rewardAvailable: uint64
	frame_dig 5 // validatorPay: uint64
	-
	frame_bury 4 // rewardAvailable: uint64

	// contracts/stakingPool.algo.ts:183
	// sendPayment({
	//             amount: validatorPay,
	//             receiver: validatorCommissionAddress,
	//             note: 'validator reward',
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:184
	// amount: validatorPay
	frame_dig 5 // validatorPay: uint64
	itxn_field Amount

	// contracts/stakingPool.algo.ts:185
	// receiver: validatorCommissionAddress
	frame_dig 3 // validatorCommissionAddress: address
	itxn_field Receiver

	// contracts/stakingPool.algo.ts:186
	// note: 'validator reward'
	byte 0x76616c696461746f7220726577617264 // "validator reward"
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stakingPool.algo.ts:195
	// curTime = globals.latestTimestamp
	global LatestTimestamp
	frame_bury 6 // curTime: uint64

	// contracts/stakingPool.algo.ts:197
	// payoutDaysInSecs = payoutDays * 24 * 60 * 60
	frame_dig 1 // payoutDays: uint64
	int 24
	*
	int 60
	*
	int 60
	*
	frame_bury 7 // payoutDaysInSecs: uint64

	// contracts/stakingPool.algo.ts:199
	// this.Stakers.value
	byte 0x7374616b657273 // "stakers"
	box_get
	assert
	dup
	frame_bury 8 // copy of the array we are iterating over
	extract 0 48
	frame_bury 9 // staker: (address,uint64,uint64)
	int 0
	frame_bury 10 // the offset we are extracting the next element from

forEach_0:
	// if6_condition
	// contracts/stakingPool.algo.ts:200
	// staker.Account !== Address.zeroAddress
	frame_dig 9 // staker: (address,uint64,uint64)
	extract 0 32
	global ZeroAddress
	!=
	bz if6_end

	// if6_consequent
	// contracts/stakingPool.algo.ts:203
	// timeInPool = curTime - staker.EntryTime
	frame_dig 6 // curTime: uint64
	frame_dig 9 // staker: (address,uint64,uint64)
	extract 40 8
	btoi
	-
	frame_bury 11 // timeInPool: uint64

	// if7_condition
	// contracts/stakingPool.algo.ts:206
	// timeInPool >= payoutDaysInSecs
	frame_dig 11 // timeInPool: uint64
	frame_dig 7 // payoutDaysInSecs: uint64
	>=
	bz if7_else

	// if7_consequent
	// contracts/stakingPool.algo.ts:207
	// timePercentage = 1000
	int 1000
	frame_bury 12 // timePercentage: uint64
	b if7_end

if7_else:
	// contracts/stakingPool.algo.ts:209
	// timePercentage = (timeInPool * 1000) / payoutDaysInSecs
	frame_dig 11 // timeInPool: uint64
	int 1000
	*
	frame_dig 7 // payoutDaysInSecs: uint64
	/
	frame_bury 12 // timePercentage: uint64

if7_end:
	// contracts/stakingPool.algo.ts:215
	// stakerReward = wideRatio(
	//                     [staker.Balance, rewardAvailable, timePercentage],
	//                     [this.TotalAlgoStaked.value, 1000]
	//                 )
	frame_dig 9 // staker: (address,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 4 // rewardAvailable: uint64
	mulw
	frame_dig 12 // timePercentage: uint64
	uncover 2
	dig 1
	*
	cover 2
	mulw
	cover 2
	+
	swap
	byte 0x7374616b6564 // "staked"
	app_global_get
	int 1000
	mulw
	divmodw
	pop
	pop
	swap
	!
	assert
	frame_bury 13 // stakerReward: uint64

	// contracts/stakingPool.algo.ts:219
	// sendPayment({
	//                     amount: stakerReward,
	//                     receiver: staker.Account,
	//                     note: 'staker reward',
	//                 })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:220
	// amount: stakerReward
	frame_dig 13 // stakerReward: uint64
	itxn_field Amount

	// contracts/stakingPool.algo.ts:221
	// receiver: staker.Account
	frame_dig 9 // staker: (address,uint64,uint64)
	extract 0 32
	itxn_field Receiver

	// contracts/stakingPool.algo.ts:222
	// note: 'staker reward'
	byte 0x7374616b657220726577617264 // "staker reward"
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

if6_end:
	// increment offset and loop if not out of bounds
	frame_dig 10 // the offset we are extracting the next element from
	int 48
	+
	dup
	int 3840 // offset of last element
	<
	bz forEach_0_end
	frame_bury 10 // the offset we are extracting the next element from
	frame_dig 8 // copy of the array we are iterating over
	frame_dig 10 // the offset we are extracting the next element from
	int 48
	extract
	frame_bury 9 // staker: (address,uint64,uint64)
	b forEach_0

forEach_0_end:
	retsub

// GoOnline(byte[],byte[],byte[],uint64,uint64,uint64)void
abi_route_GoOnline:
	// voteKeyDilution: uint64
	txna ApplicationArgs 6
	btoi

	// voteLast: uint64
	txna ApplicationArgs 5
	btoi

	// voteFirst: uint64
	txna ApplicationArgs 4
	btoi

	// stateProofPK: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// selectionPK: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// votePK: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute GoOnline(byte[],byte[],byte[],uint64,uint64,uint64)void
	callsub GoOnline
	int 1
	return

// GoOnline(votePK: bytes, selectionPK: bytes, stateProofPK: bytes, voteFirst: uint64, voteLast: uint64, voteKeyDilution: uint64): void
GoOnline:
	proto 6 0

	// contracts/stakingPool.algo.ts:236
	// assert(this.txn.sender == this.Owner.value || this.txn.sender === this.Manager.value)
	txn Sender
	byte 0x6f776e6572 // "owner"
	app_global_get
	==
	dup
	bnz skip_or1
	txn Sender
	byte 0x6d616e61676572 // "manager"
	app_global_get
	==
	||

skip_or1:
	assert

	// contracts/stakingPool.algo.ts:237
	// sendOnlineKeyRegistration({
	//             votePK: votePK,
	//             selectionPK: selectionPK,
	//             stateProofPK: stateProofPK,
	//             voteFirst: voteFirst,
	//             voteLast: voteLast,
	//             voteKeyDilution: voteKeyDilution,
	//         })
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:238
	// votePK: votePK
	frame_dig -1 // votePK: bytes
	itxn_field VotePK

	// contracts/stakingPool.algo.ts:239
	// selectionPK: selectionPK
	frame_dig -2 // selectionPK: bytes
	itxn_field SelectionPK

	// contracts/stakingPool.algo.ts:240
	// stateProofPK: stateProofPK
	frame_dig -3 // stateProofPK: bytes
	itxn_field StateProofPK

	// contracts/stakingPool.algo.ts:241
	// voteFirst: voteFirst
	frame_dig -4 // voteFirst: uint64
	itxn_field VoteFirst

	// contracts/stakingPool.algo.ts:242
	// voteLast: voteLast
	frame_dig -5 // voteLast: uint64
	itxn_field VoteLast

	// contracts/stakingPool.algo.ts:243
	// voteKeyDilution: voteKeyDilution
	frame_dig -6 // voteKeyDilution: uint64
	itxn_field VoteKeyDilution

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// GoOffline()void
abi_route_GoOffline:
	// execute GoOffline()void
	callsub GoOffline
	int 1
	return

// GoOffline(): void
GoOffline:
	proto 0 0

	// contracts/stakingPool.algo.ts:248
	// assert(this.txn.sender == this.Owner.value || this.txn.sender === this.Manager.value)
	txn Sender
	byte 0x6f776e6572 // "owner"
	app_global_get
	==
	dup
	bnz skip_or2
	txn Sender
	byte 0x6d616e61676572 // "manager"
	app_global_get
	==
	||

skip_or2:
	assert

	// contracts/stakingPool.algo.ts:249
	// sendOfflineKeyRegistration({})
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

create_NoOp:
	method "createApplication(uint64,uint64,address,address)void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "addStake(address,uint64)uint64"
	method "removeStake(address,uint64)void"
	method "payStakers()void"
	method "GoOnline(byte[],byte[],byte[],uint64,uint64,uint64)void"
	method "GoOffline()void"
	txna ApplicationArgs 0
	match abi_route_addStake abi_route_removeStake abi_route_payStakers abi_route_GoOnline abi_route_GoOffline
	err