#pragma version 10

// This TEAL was generated by TEALScript v0.86.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// createApplication(uint64,uint64,uint64,uint64,uint64)void
*abi_route_createApplication:
	// maxStakeAllowed: uint64
	txna ApplicationArgs 5
	btoi

	// minEntryStake: uint64
	txna ApplicationArgs 4
	btoi

	// poolID: uint64
	txna ApplicationArgs 3
	btoi

	// validatorID: uint64
	txna ApplicationArgs 2
	btoi

	// creatingContractID: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,uint64,uint64,uint64,uint64)void
	callsub createApplication
	int 1
	return

// createApplication(creatingContractID: uint64, validatorID: uint64, poolID: uint64, minEntryStake: uint64, maxStakeAllowed: uint64): void
//
// Initialize the staking pool w/ owner and manager, but can only be created by the validator contract.
// @param creatingContractID - id of contract that constructed us - the validator application (single global instance)
// @param validatorID - id of validator we're a staking pool of
// @param poolID - which pool id are we
// @param minEntryStake - minimum amount to be in pool, but also minimum amount balance can't go below (without removing all!)
// @param maxStakeAllowed - maximum algo allowed in this staking pool
createApplication:
	proto 5 0

	// *if0_condition
	// contracts/stakingPool.algo.ts:74
	// creatingContractID === 0
	frame_dig -1 // creatingContractID: uint64
	int 0
	==
	bz *if0_else

	// *if0_consequent
	// contracts/stakingPool.algo.ts:76
	// assert(creatingContractID === 0)
	frame_dig -1 // creatingContractID: uint64
	int 0
	==
	assert

	// contracts/stakingPool.algo.ts:77
	// assert(validatorID === 0)
	frame_dig -2 // validatorID: uint64
	int 0
	==
	assert

	// contracts/stakingPool.algo.ts:78
	// assert(poolID === 0)
	frame_dig -3 // poolID: uint64
	int 0
	==
	assert
	b *if0_end

*if0_else:
	// contracts/stakingPool.algo.ts:80
	// assert(creatingContractID !== 0)
	frame_dig -1 // creatingContractID: uint64
	int 0
	!=
	assert

	// contracts/stakingPool.algo.ts:81
	// assert(validatorID !== 0)
	frame_dig -2 // validatorID: uint64
	int 0
	!=
	assert

	// contracts/stakingPool.algo.ts:82
	// assert(poolID !== 0)
	frame_dig -3 // poolID: uint64
	int 0
	!=
	assert

*if0_end:
	// contracts/stakingPool.algo.ts:84
	// assert(minEntryStake >= MIN_ALGO_STAKE_PER_POOL)
	frame_dig -4 // minEntryStake: uint64
	int 1000000
	>=
	assert

	// contracts/stakingPool.algo.ts:85
	// assert(maxStakeAllowed <= MAX_ALGO_PER_POOL)
	frame_dig -5 // maxStakeAllowed: uint64
	int 20000000000000
	<=
	assert

	// contracts/stakingPool.algo.ts:86
	// this.CreatingValidatorContractAppID.value = creatingContractID
	byte 0x63726561746f72417070 // "creatorApp"
	frame_dig -1 // creatingContractID: uint64
	app_global_put

	// contracts/stakingPool.algo.ts:87
	// this.ValidatorID.value = validatorID
	byte 0x76616c696461746f724944 // "validatorID"
	frame_dig -2 // validatorID: uint64
	app_global_put

	// contracts/stakingPool.algo.ts:88
	// this.PoolID.value = poolID
	byte 0x706f6f6c4944 // "poolID"
	frame_dig -3 // poolID: uint64
	app_global_put

	// contracts/stakingPool.algo.ts:89
	// this.NumStakers.value = 0
	byte 0x6e756d5374616b657273 // "numStakers"
	int 0
	app_global_put

	// contracts/stakingPool.algo.ts:90
	// this.TotalAlgoStaked.value = 0
	byte 0x7374616b6564 // "staked"
	int 0
	app_global_put

	// contracts/stakingPool.algo.ts:91
	// this.MinEntryStake.value = minEntryStake
	byte 0x6d696e456e7472795374616b65 // "minEntryStake"
	frame_dig -4 // minEntryStake: uint64
	app_global_put

	// contracts/stakingPool.algo.ts:92
	// this.MaxStakeAllowed.value = maxStakeAllowed
	byte 0x6d61785374616b65 // "maxStake"
	frame_dig -5 // maxStakeAllowed: uint64
	app_global_put

	// contracts/stakingPool.algo.ts:93
	// this.LastPayout.value = globals.latestTimestamp
	byte 0x6c6173745061796f7574 // "lastPayout"
	global LatestTimestamp
	app_global_put
	retsub

// gas()void
*abi_route_gas:
	// execute gas()void
	callsub gas
	int 1
	return

// gas(): void
//
// gas is a dummy no-op call that can be used to pool-up resource references and opcode cost
gas:
	proto 0 0
	retsub

// minBalanceForAccount(contracts: number, extraPages: number, assets: number, localInts: number, localBytes: number, globalInts: number, globalBytes: number): uint64
minBalanceForAccount:
	proto 7 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/stakingPool.algo.ts:110
	// minBal = ALGORAND_ACCOUNT_MIN_BALANCE
	int 100000
	frame_bury 0 // minBal: uint64

	// contracts/stakingPool.algo.ts:111
	// minBal += contracts * APPLICATION_BASE_FEE
	frame_dig 0 // minBal: uint64
	frame_dig -1 // contracts: number
	int 100000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/stakingPool.algo.ts:112
	// minBal += extraPages * APPLICATION_BASE_FEE
	frame_dig 0 // minBal: uint64
	frame_dig -2 // extraPages: number
	int 100000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/stakingPool.algo.ts:113
	// minBal += assets * ASSET_HOLDING_FEE
	frame_dig 0 // minBal: uint64
	frame_dig -3 // assets: number
	int 100000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/stakingPool.algo.ts:114
	// minBal += localInts * SSC_VALUE_UINT
	frame_dig 0 // minBal: uint64
	frame_dig -4 // localInts: number
	int 28500
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/stakingPool.algo.ts:115
	// minBal += globalInts * SSC_VALUE_UINT
	frame_dig 0 // minBal: uint64
	frame_dig -6 // globalInts: number
	int 28500
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/stakingPool.algo.ts:116
	// minBal += localBytes * SSC_VALUE_BYTES
	frame_dig 0 // minBal: uint64
	frame_dig -5 // localBytes: number
	int 50000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/stakingPool.algo.ts:117
	// minBal += globalBytes * SSC_VALUE_BYTES
	frame_dig 0 // minBal: uint64
	frame_dig -7 // globalBytes: number
	int 50000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts/stakingPool.algo.ts:118
	// return minBal;
	frame_dig 0 // minBal: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// costForBoxStorage(totalNumBytes: number): uint64
costForBoxStorage:
	proto 1 1

	// contracts/stakingPool.algo.ts:125
	// return SCBOX_PERBOX + totalNumBytes * SCBOX_PERBYTE;
	int 2500
	frame_dig -1 // totalNumBytes: number
	int 400
	*
	+
	retsub

// initStorage(pay)void
*abi_route_initStorage:
	// mbrPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute initStorage(pay)void
	callsub initStorage
	int 1
	return

// initStorage(mbrPayment: PayTxn): void
//
// Called after we're created and then funded so we can create our large stakers ledger storage
// Caller has to get MBR amounts from ValidatorRegistry to know how much to fund us to cover the box storage cost
// @param mbrPayment payment from caller which covers mbr increase of new staking pools' storage
initStorage:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/stakingPool.algo.ts:134
	// PoolInitMbr =
	//             ALGORAND_ACCOUNT_MIN_BALANCE +
	//             this.costForBoxStorage(7 /* 'stakers' name */ + len<StakedInfo>() * MAX_STAKERS_PER_POOL)
	int 100000
	int 6407
	callsub costForBoxStorage
	+
	frame_bury 0 // PoolInitMbr: uint64

	// contracts/stakingPool.algo.ts:138
	// verifyPayTxn(mbrPayment, { amount: PoolInitMbr })
	// verify amount
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Amount
	frame_dig 0 // PoolInitMbr: uint64
	==
	assert

	// *if1_condition
	// contracts/stakingPool.algo.ts:140
	// !this.Stakers.exists
	byte 0x7374616b657273 // "stakers"
	box_len
	swap
	pop
	!
	bz *if1_end

	// *if1_consequent
	// contracts/stakingPool.algo.ts:141
	// this.Stakers.create()
	byte 0x7374616b657273 // "stakers"
	int 6400
	box_create
	pop

*if1_end:
	retsub

// addStake(pay,address)uint64
*abi_route_addStake:
	// The ABI return prefix
	byte 0x151f7c75

	// staker: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// stakedAmountPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute addStake(pay,address)uint64
	callsub addStake
	itob
	concat
	log
	int 1
	return

// addStake(stakedAmountPayment: PayTxn, staker: Address): uint64
//
// Adds stake to the given account.
// Can ONLY be called by the validator contract that created us
// Must receive payment from the validator contract for amount being staked.
//
// @param {PayTxn} stakedAmountPayment prior payment coming from validator contract to us on behalf of staker.
// @param {Address} staker - The account adding new stake
// @throws {Error} - Throws an error if the staking pool is full.
// @returns {uint64} new 'entry time' in seconds of stake add.
addStake:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// contracts/stakingPool.algo.ts:156
	// assert(this.Stakers.exists)
	byte 0x7374616b657273 // "stakers"
	box_len
	swap
	pop
	assert

	// contracts/stakingPool.algo.ts:159
	// assert(this.txn.sender === AppID.fromUint64(this.CreatingValidatorContractAppID.value).address)
	txn Sender
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	app_params_get AppAddress
	pop
	==
	assert

	// contracts/stakingPool.algo.ts:160
	// assert(staker !== globals.zeroAddress)
	frame_dig -2 // staker: Address
	global ZeroAddress
	!=
	assert

	// contracts/stakingPool.algo.ts:164
	// verifyPayTxn(stakedAmountPayment, {
	//             sender: AppID.fromUint64(this.CreatingValidatorContractAppID.value).address,
	//             receiver: this.app.address,
	//             amount: stakedAmountPayment.amount,
	//         })
	// verify sender
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Sender
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	app_params_get AppAddress
	pop
	==
	assert

	// verify receiver
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	==
	assert

	// contracts/stakingPool.algo.ts:169
	// assert(
	//             stakedAmountPayment.amount + this.TotalAlgoStaked.value <= this.MaxStakeAllowed.value,
	//             'adding this stake amount will exceed the max allowed in this pool'
	//         )
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	byte 0x7374616b6564 // "staked"
	app_global_get
	+
	byte 0x6d61785374616b65 // "maxStake"
	app_global_get
	<=

	// adding this stake amount will exceed the max allowed in this pool
	assert

	// contracts/stakingPool.algo.ts:175
	// entryTime = this.getEntryTime()
	callsub getEntryTime
	frame_bury 0 // entryTime: uint64

	// contracts/stakingPool.algo.ts:176
	// firstEmpty = 0
	int 0
	frame_bury 1 // firstEmpty: uint64

	// contracts/stakingPool.algo.ts:179
	// for (let i = 0; i < this.Stakers.value.length; i += 1)
	int 0
	frame_bury 2 // i: uint64

*for_0:
	// contracts/stakingPool.algo.ts:179
	// i < this.Stakers.value.length
	frame_dig 2 // i: uint64
	int 100
	<
	bz *for_0_end

	// *if2_condition
	// contracts/stakingPool.algo.ts:180
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if2_end

	// *if2_consequent
	// contracts/stakingPool.algo.ts:181
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if2_end:
	// contracts/stakingPool.algo.ts:183
	// cmpStaker = clone(this.Stakers.value[i])
	frame_dig 2 // i: uint64
	int 64
	* // acc * typeLength
	int 64
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 3 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// *if3_condition
	// contracts/stakingPool.algo.ts:184
	// cmpStaker.Account === staker
	frame_dig 3 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	frame_dig -2 // staker: Address
	==
	bz *if3_end

	// *if3_consequent
	// contracts/stakingPool.algo.ts:185
	// cmpStaker.Balance += stakedAmountPayment.amount
	frame_dig 3 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 3 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	+
	itob
	replace3
	frame_bury 3 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:186
	// cmpStaker.EntryTime = entryTime
	frame_dig 3 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 56 // headOffset
	frame_dig 0 // entryTime: uint64
	itob
	replace3
	frame_bury 3 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:189
	// this.Stakers.value[i] = cmpStaker
	frame_dig 2 // i: uint64
	int 64
	* // acc * typeLength
	frame_dig 3 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/stakingPool.algo.ts:191
	// this.TotalAlgoStaked.value += stakedAmountPayment.amount
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	+
	byte 0x7374616b6564 // "staked"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:192
	// return entryTime;
	frame_dig 0 // entryTime: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

*if3_end:
	// *if4_condition
	// contracts/stakingPool.algo.ts:194
	// cmpStaker.Account === globals.zeroAddress
	frame_dig 3 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	global ZeroAddress
	==
	bz *if4_end

	// *if4_consequent
	// contracts/stakingPool.algo.ts:195
	// firstEmpty = i + 1
	frame_dig 2 // i: uint64
	int 1
	+
	frame_bury 1 // firstEmpty: uint64
	b *for_0_end

*if4_end:

*for_0_continue:
	// contracts/stakingPool.algo.ts:179
	// i += 1
	frame_dig 2 // i: uint64
	int 1
	+
	frame_bury 2 // i: uint64
	b *for_0

*for_0_end:
	// *if5_condition
	// contracts/stakingPool.algo.ts:200
	// firstEmpty === 0
	frame_dig 1 // firstEmpty: uint64
	int 0
	==
	bz *if5_end

	// *if5_consequent
	err // 'Staking pool full'

*if5_end:
	// contracts/stakingPool.algo.ts:207
	// assert(stakedAmountPayment.amount >= this.MinEntryStake.value, 'must stake at least the minimum for this pool')
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	byte 0x6d696e456e7472795374616b65 // "minEntryStake"
	app_global_get
	>=

	// must stake at least the minimum for this pool
	assert

	// contracts/stakingPool.algo.ts:209
	// assert(this.Stakers.value[firstEmpty - 1].Account === globals.zeroAddress)
	frame_dig 1 // firstEmpty: uint64
	int 1
	-
	int 64
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	global ZeroAddress
	==
	assert

	// contracts/stakingPool.algo.ts:210
	// this.Stakers.value[firstEmpty - 1] = {
	//             Account: staker,
	//             Balance: stakedAmountPayment.amount,
	//             TotalRewarded: 0,
	//             RewardTokenBalance: 0,
	//             EntryTime: entryTime,
	//         }
	frame_dig 1 // firstEmpty: uint64
	int 1
	-
	int 64
	* // acc * typeLength
	frame_dig -2 // staker: Address
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	itob
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	frame_dig 0 // entryTime: uint64
	itob
	concat
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/stakingPool.algo.ts:217
	// this.NumStakers.value += 1
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	int 1
	+
	byte 0x6e756d5374616b657273 // "numStakers"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:218
	// this.TotalAlgoStaked.value += stakedAmountPayment.amount
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	+
	byte 0x7374616b6564 // "staked"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:219
	// return entryTime;
	frame_dig 0 // entryTime: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

// removeStake(uint64)void
*abi_route_removeStake:
	// amountToUnstake: uint64
	txna ApplicationArgs 1
	btoi

	// execute removeStake(uint64)void
	callsub removeStake
	int 1
	return

// removeStake(amountToUnstake: uint64): void
//
// Removes stake on behalf of caller (removing own stake).  Also notifies the validator contract for this pools
// validator of the staker / balance changes.
//
// @param {uint64} amountToUnstake - The amount of stake to be removed.  Specify 0 to remove all stake.
// @throws {Error} If the account has insufficient balance or if the account is not found.
removeStake:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// contracts/stakingPool.algo.ts:233
	// staker = this.txn.sender
	txn Sender
	frame_bury 0 // staker: address

	// contracts/stakingPool.algo.ts:235
	// for (let i = 0; i < this.Stakers.value.length; i += 1)
	int 0
	frame_bury 1 // i: uint64

*for_1:
	// contracts/stakingPool.algo.ts:235
	// i < this.Stakers.value.length
	frame_dig 1 // i: uint64
	int 100
	<
	bz *for_1_end

	// *if6_condition
	// contracts/stakingPool.algo.ts:236
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if6_end

	// *if6_consequent
	// contracts/stakingPool.algo.ts:237
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if6_end:
	// contracts/stakingPool.algo.ts:239
	// cmpStaker = clone(this.Stakers.value[i])
	frame_dig 1 // i: uint64
	int 64
	* // acc * typeLength
	int 64
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// *if7_condition
	// contracts/stakingPool.algo.ts:240
	// cmpStaker.Account === staker
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	frame_dig 0 // staker: address
	==
	bz *if7_end

	// *if7_consequent
	// *if8_condition
	// contracts/stakingPool.algo.ts:241
	// amountToUnstake === 0
	frame_dig -1 // amountToUnstake: uint64
	int 0
	==
	bz *if8_end

	// *if8_consequent
	// contracts/stakingPool.algo.ts:243
	// amountToUnstake = cmpStaker.Balance
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_bury -1 // amountToUnstake: uint64

*if8_end:
	// *if9_condition
	// contracts/stakingPool.algo.ts:245
	// cmpStaker.Balance < amountToUnstake
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig -1 // amountToUnstake: uint64
	<
	bz *if9_end

	// *if9_consequent
	err // 'Insufficient balance'

*if9_end:
	// contracts/stakingPool.algo.ts:248
	// cmpStaker.Balance -= amountToUnstake
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig -1 // amountToUnstake: uint64
	-
	itob
	replace3
	frame_bury 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:249
	// this.TotalAlgoStaked.value -= amountToUnstake
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig -1 // amountToUnstake: uint64
	-
	byte 0x7374616b6564 // "staked"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:252
	// assert(
	//                     cmpStaker.Balance === 0 || cmpStaker.Balance >= this.MinEntryStake.value,
	//                     'cannot reduce balance below minimum allowed stake unless all is removed'
	//                 )
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	int 0
	==
	dup
	bnz *skip_or0
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	byte 0x6d696e456e7472795374616b65 // "minEntryStake"
	app_global_get
	>=
	||

*skip_or0:
	// cannot reduce balance below minimum allowed stake unless all is removed
	assert

	// contracts/stakingPool.algo.ts:258
	// sendPayment({
	//                     amount: amountToUnstake,
	//                     receiver: staker,
	//                     note: 'unstaked',
	//                 })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:259
	// amount: amountToUnstake
	frame_dig -1 // amountToUnstake: uint64
	itxn_field Amount

	// contracts/stakingPool.algo.ts:260
	// receiver: staker
	frame_dig 0 // staker: address
	itxn_field Receiver

	// contracts/stakingPool.algo.ts:261
	// note: 'unstaked'
	byte 0x756e7374616b6564 // "unstaked"
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stakingPool.algo.ts:263
	// stakerRemoved = false
	int 0
	frame_bury 3 // stakerRemoved: bool

	// *if10_condition
	// contracts/stakingPool.algo.ts:264
	// cmpStaker.Balance === 0
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	int 0
	==
	bz *if10_end

	// *if10_consequent
	// contracts/stakingPool.algo.ts:266
	// this.NumStakers.value -= 1
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	int 1
	-
	byte 0x6e756d5374616b657273 // "numStakers"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:267
	// cmpStaker.Account = globals.zeroAddress
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 0
	global ZeroAddress
	replace3
	frame_bury 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:268
	// cmpStaker.TotalRewarded = 0
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 40
	frame_bury 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:269
	// cmpStaker.RewardTokenBalance = 0
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 48
	frame_bury 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:270
	// stakerRemoved = true
	int 1
	frame_bury 3 // stakerRemoved: bool

*if10_end:
	// contracts/stakingPool.algo.ts:273
	// this.Stakers.value[i] = cmpStaker
	frame_dig 1 // i: uint64
	int 64
	* // acc * typeLength
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/stakingPool.algo.ts:279
	// sendMethodCall<typeof ValidatorRegistry.prototype.stakeRemoved>({
	//                     applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value),
	//                     methodArgs: [
	//                         { ID: this.ValidatorID.value, PoolID: this.PoolID.value, PoolAppID: this.app.id },
	//                         staker,
	//                         amountToUnstake,
	//                         stakerRemoved,
	//                     ],
	//                 })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "stakeRemoved((uint64,uint64,uint64),address,uint64,bool)void"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:280
	// applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value)
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:281
	// methodArgs: [
	//                         { ID: this.ValidatorID.value, PoolID: this.PoolID.value, PoolAppID: this.app.id },
	//                         staker,
	//                         amountToUnstake,
	//                         stakerRemoved,
	//                     ]
	byte 0x76616c696461746f724944 // "validatorID"
	app_global_get
	itob
	byte 0x706f6f6c4944 // "poolID"
	app_global_get
	itob
	concat
	txna Applications 0
	itob
	concat
	itxn_field ApplicationArgs
	frame_dig 0 // staker: address
	itxn_field ApplicationArgs
	frame_dig -1 // amountToUnstake: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig 3 // stakerRemoved: bool
	byte 0x00
	int 0
	uncover 2
	setbit
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stakingPool.algo.ts:288
	// return;
	retsub

*if7_end:

*for_1_continue:
	// contracts/stakingPool.algo.ts:235
	// i += 1
	frame_dig 1 // i: uint64
	int 1
	+
	frame_bury 1 // i: uint64
	b *for_1

*for_1_end:
	err // 'Account not found'

// removeTokenReward(address,uint64)void
*abi_route_removeTokenReward:
	// amountToRemove: uint64
	txna ApplicationArgs 2
	btoi

	// staker: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute removeTokenReward(address,uint64)void
	callsub removeTokenReward
	int 1
	return

// removeTokenReward(staker: Address, amountToRemove: uint64): void
//
// Remove a specified amount of 'community token' rewards for a staker.
// Anyone can call on behalf of the staker, but the tokens are only sent to the staker.
// This is so projects can call this on behalf of the staker and cause the staker to be airdropped their
// rewarded amount.
// @param {Address} staker - the staker account to send rewards to
// @param {uint64} amountToRemove - The amount of community tokens to be removed.  Specify 0 to remove all rewarded.
removeTokenReward:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/stakingPool.algo.ts:305
	// for (let i = 0; i < this.Stakers.value.length; i += 1)
	int 0
	frame_bury 0 // i: uint64

*for_2:
	// contracts/stakingPool.algo.ts:305
	// i < this.Stakers.value.length
	frame_dig 0 // i: uint64
	int 100
	<
	bz *for_2_end

	// *if11_condition
	// contracts/stakingPool.algo.ts:306
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if11_end

	// *if11_consequent
	// contracts/stakingPool.algo.ts:307
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if11_end:
	// contracts/stakingPool.algo.ts:309
	// cmpStaker = clone(this.Stakers.value[i])
	frame_dig 0 // i: uint64
	int 64
	* // acc * typeLength
	int 64
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// *if12_condition
	// contracts/stakingPool.algo.ts:310
	// cmpStaker.Account === staker
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	frame_dig -1 // staker: Address
	==
	bz *if12_end

	// *if12_consequent
	// *if13_condition
	// contracts/stakingPool.algo.ts:311
	// amountToRemove === 0
	frame_dig -2 // amountToRemove: uint64
	int 0
	==
	bz *if13_end

	// *if13_consequent
	// contracts/stakingPool.algo.ts:313
	// amountToRemove = cmpStaker.RewardTokenBalance
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	frame_bury -2 // amountToRemove: uint64

*if13_end:
	// *if14_condition
	// contracts/stakingPool.algo.ts:315
	// cmpStaker.RewardTokenBalance < amountToRemove
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	frame_dig -2 // amountToRemove: uint64
	<
	bz *if14_end

	// *if14_consequent
	err // 'Insufficient reward token balance'

*if14_end:
	// contracts/stakingPool.algo.ts:318
	// cmpStaker.RewardTokenBalance -= amountToRemove
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 48 // headOffset
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	frame_dig -2 // amountToRemove: uint64
	-
	itob
	replace3
	frame_bury 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:321
	// sendAssetTransfer({
	//                     xferAsset: AssetID.fromUint64(rewardToken),
	//                     assetReceiver: staker,
	//                     assetAmount: amountToRemove,
	//                 })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:322
	// xferAsset: AssetID.fromUint64(rewardToken)
	int 1
	itxn_field XferAsset

	// contracts/stakingPool.algo.ts:323
	// assetReceiver: staker
	frame_dig -1 // staker: Address
	itxn_field AssetReceiver

	// contracts/stakingPool.algo.ts:324
	// assetAmount: amountToRemove
	frame_dig -2 // amountToRemove: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stakingPool.algo.ts:328
	// this.Stakers.value[i] = cmpStaker
	frame_dig 0 // i: uint64
	int 64
	* // acc * typeLength
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/stakingPool.algo.ts:329
	// return;
	retsub

*if12_end:

*for_2_continue:
	// contracts/stakingPool.algo.ts:305
	// i += 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64
	b *for_2

*for_2_end:
	retsub

// getStakerInfo(address)(address,uint64,uint64,uint64,uint64)
*abi_route_getStakerInfo:
	// The ABI return prefix
	byte 0x151f7c75

	// staker: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute getStakerInfo(address)(address,uint64,uint64,uint64,uint64)
	callsub getStakerInfo
	concat
	log
	int 1
	return

// getStakerInfo(staker: Address): StakedInfo
//
// Retrieves the staked information for a given staker.
//
// @param {Address} staker - The address of the staker.
// @returns {StakedInfo} - The staked information for the given staker.
// @throws {Error} - If the staker's account is not found.
getStakerInfo:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/stakingPool.algo.ts:343
	// for (let i = 0; i < this.Stakers.value.length; i += 1)
	int 0
	frame_bury 0 // i: uint64

*for_3:
	// contracts/stakingPool.algo.ts:343
	// i < this.Stakers.value.length
	frame_dig 0 // i: uint64
	int 100
	<
	bz *for_3_end

	// *if15_condition
	// contracts/stakingPool.algo.ts:344
	// globals.opcodeBudget < 200
	global OpcodeBudget
	int 200
	<
	bz *if15_end

	// *if15_consequent
	// contracts/stakingPool.algo.ts:345
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if15_end:
	// *if16_condition
	// contracts/stakingPool.algo.ts:347
	// this.Stakers.value[i].Account === staker
	frame_dig 0 // i: uint64
	int 64
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_dig -1 // staker: Address
	==
	bz *if16_end

	// *if16_consequent
	// contracts/stakingPool.algo.ts:348
	// return this.Stakers.value[i];
	frame_dig 0 // i: uint64
	int 64
	* // acc * typeLength
	int 64
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract

	// set the subroutine return value
	frame_bury 0
	retsub

*if16_end:

*for_3_continue:
	// contracts/stakingPool.algo.ts:343
	// i += 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64
	b *for_3

*for_3_end:
	err // 'Account not found'

// isOwnerOrManagerCaller(): boolean
isOwnerOrManagerCaller:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/stakingPool.algo.ts:355
	// OwnerAndManager = sendMethodCall<typeof ValidatorRegistry.prototype.getValidatorOwnerAndManager>({
	//             applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value),
	//             methodArgs: [this.ValidatorID.value],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "getValidatorOwnerAndManager(uint64)(address,address)"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:356
	// applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value)
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:357
	// methodArgs: [this.ValidatorID.value]
	byte 0x76616c696461746f724944 // "validatorID"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 0 // OwnerAndManager: (address,address)

	// contracts/stakingPool.algo.ts:359
	// return this.txn.sender === OwnerAndManager[0] || this.txn.sender === OwnerAndManager[1];
	txn Sender
	frame_dig 0 // OwnerAndManager: (address,address)
	extract 0 32
	==
	dup
	bnz *skip_or1
	txn Sender
	frame_dig 0 // OwnerAndManager: (address,address)
	extract 32 32
	==
	||

*skip_or1:
	// set the subroutine return value
	frame_bury 0
	retsub

// updateAlgodVer(string)void
*abi_route_updateAlgodVer:
	// algodVer: string
	txna ApplicationArgs 1
	extract 2 0

	// execute updateAlgodVer(string)void
	callsub updateAlgodVer
	int 1
	return

// updateAlgodVer(algodVer: string): void
//
// Update the (honor system) algod version for the node associated to this pool.  The node management daemon
// should compare its current nodes version to the version stored in global state, updating when different.
// The reti node daemon composes its own version string using format:
// {major}.{minor}.{build} {branch} [{commit hash}],
// ie: 3.22.0 rel/stable [6b508975]
// @param {string} algodVer - string representing the algorand node daemon version (reti node daemon composes its own meta version)
updateAlgodVer:
	proto 1 0

	// contracts/stakingPool.algo.ts:371
	// assert(this.isOwnerOrManagerCaller())
	callsub isOwnerOrManagerCaller
	assert

	// contracts/stakingPool.algo.ts:372
	// this.AlgodVer.value = algodVer
	byte 0x616c676f64566572 // "algodVer"
	frame_dig -1 // algodVer: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put
	retsub

// epochBalanceUpdate()void
*abi_route_epochBalanceUpdate:
	// execute epochBalanceUpdate()void
	callsub epochBalanceUpdate
	int 1
	return

// epochBalanceUpdate(): void
//
// Updates the balance of stakers in the pool based on the received 'rewards' (current balance vs known staked balance)
// Stakers outstanding balance is adjusted based on their % of stake and time in the current epoch - so that balance
// compounds over time and staker can remove that amount at will.
// The validator is paid their percentage each epoch payout.
epochBalanceUpdate:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 19

	// contracts/stakingPool.algo.ts:382
	// assert(this.isOwnerOrManagerCaller())
	callsub isOwnerOrManagerCaller
	assert

	// contracts/stakingPool.algo.ts:385
	// payoutConfig = sendMethodCall<typeof ValidatorRegistry.prototype.getValidatorConfig>({
	//             applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value),
	//             methodArgs: [this.ValidatorID.value],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "getValidatorConfig(uint64)(uint64,address,address,uint64,uint16,uint32,address,uint64,uint64,uint8)"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:386
	// applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value)
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:387
	// methodArgs: [this.ValidatorID.value]
	byte 0x76616c696461746f724944 // "validatorID"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 0 // payoutConfig: (uint64,address,address,uint64,uint16,uint32,address,uint64,uint64,uint8)

	// contracts/stakingPool.algo.ts:389
	// payoutMins = payoutConfig.PayoutEveryXMins as uint64
	frame_dig 0 // payoutConfig: (uint64,address,address,uint64,uint16,uint32,address,uint64,uint64,uint8)
	extract 80 2
	btoi
	frame_bury 1 // payoutMins: uint64

	// contracts/stakingPool.algo.ts:393
	// rewardAvailable = this.app.address.balance - this.TotalAlgoStaked.value - this.app.address.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	byte 0x7374616b6564 // "staked"
	app_global_get
	-
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	frame_bury 2 // rewardAvailable: uint64

	// contracts/stakingPool.algo.ts:396
	// assert(rewardAvailable > 1_000_000, 'Reward to payout not high enough')
	frame_dig 2 // rewardAvailable: uint64
	int 1_000_000
	>

	// Reward to payout not high enough
	assert

	// contracts/stakingPool.algo.ts:398
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts/stakingPool.algo.ts:399
	// log(concat('reward avail is: ', rewardAvailable.toString()))
	byte 0x72657761726420617661696c2069733a20 // "reward avail is: "
	frame_dig 2 // rewardAvailable: uint64
	callsub *itoa
	concat
	log

	// *if17_condition
	// contracts/stakingPool.algo.ts:401
	// payoutConfig.PercentToValidator !== 0
	frame_dig 0 // payoutConfig: (uint64,address,address,uint64,uint16,uint32,address,uint64,uint64,uint8)
	extract 82 4
	btoi
	int 0
	!=
	bz *if17_end

	// *if17_consequent
	// contracts/stakingPool.algo.ts:404
	// validatorPay = wideRatio([rewardAvailable, payoutConfig.PercentToValidator as uint64], [1_000_000])
	frame_dig 2 // rewardAvailable: uint64
	frame_dig 0 // payoutConfig: (uint64,address,address,uint64,uint16,uint32,address,uint64,uint64,uint8)
	extract 82 4
	btoi
	mulw
	int 0
	int 1_000_000
	divmodw
	pop
	pop
	swap
	!
	assert
	frame_bury 3 // validatorPay: uint64

	// contracts/stakingPool.algo.ts:407
	// rewardAvailable -= validatorPay
	frame_dig 2 // rewardAvailable: uint64
	frame_dig 3 // validatorPay: uint64
	-
	frame_bury 2 // rewardAvailable: uint64

	// *if18_condition
	// contracts/stakingPool.algo.ts:411
	// validatorPay > 0
	frame_dig 3 // validatorPay: uint64
	int 0
	>
	bz *if18_end

	// *if18_consequent
	// contracts/stakingPool.algo.ts:412
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts/stakingPool.algo.ts:413
	// log(concat('paying validator: ', validatorPay.toString()))
	byte 0x706179696e672076616c696461746f723a20 // "paying validator: "
	frame_dig 3 // validatorPay: uint64
	callsub *itoa
	concat
	log

	// contracts/stakingPool.algo.ts:414
	// sendPayment({
	//                     amount: validatorPay,
	//                     receiver: payoutConfig.ValidatorCommissionAddress,
	//                     note: 'validator reward',
	//                 })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:415
	// amount: validatorPay
	frame_dig 3 // validatorPay: uint64
	itxn_field Amount

	// contracts/stakingPool.algo.ts:416
	// receiver: payoutConfig.ValidatorCommissionAddress
	frame_dig 0 // payoutConfig: (uint64,address,address,uint64,uint16,uint32,address,uint64,uint64,uint8)
	extract 86 32
	itxn_field Receiver

	// contracts/stakingPool.algo.ts:417
	// note: 'validator reward'
	byte 0x76616c696461746f7220726577617264 // "validator reward"
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stakingPool.algo.ts:419
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts/stakingPool.algo.ts:420
	// log(concat('remaining reward avail: ', rewardAvailable.toString()))
	byte 0x72656d61696e696e672072657761726420617661696c3a20 // "remaining reward avail: "
	frame_dig 2 // rewardAvailable: uint64
	callsub *itoa
	concat
	log

*if18_end:

*if17_end:
	// *if19_condition
	// contracts/stakingPool.algo.ts:424
	// rewardAvailable === 0
	frame_dig 2 // rewardAvailable: uint64
	int 0
	==
	bz *if19_end

	// *if19_consequent
	// contracts/stakingPool.algo.ts:427
	// return;
	retsub

*if19_end:
	// contracts/stakingPool.algo.ts:435
	// curTime = globals.latestTimestamp
	global LatestTimestamp
	frame_bury 4 // curTime: uint64

	// contracts/stakingPool.algo.ts:438
	// epochInSecs = payoutMins * 60
	frame_dig 1 // payoutMins: uint64
	int 60
	*
	frame_bury 5 // epochInSecs: uint64

	// *if20_condition
	// contracts/stakingPool.algo.ts:439
	// this.LastPayout.exists
	txna Applications 0
	byte 0x6c6173745061796f7574 // "lastPayout"
	app_global_get_ex
	swap
	pop
	bz *if20_end

	// *if20_consequent
	// contracts/stakingPool.algo.ts:440
	// secsSinceLastPayout = curTime - this.LastPayout.value
	frame_dig 4 // curTime: uint64
	byte 0x6c6173745061796f7574 // "lastPayout"
	app_global_get
	-
	frame_bury 6 // secsSinceLastPayout: uint64

	// contracts/stakingPool.algo.ts:441
	// log(concat('secs since last payout: ', secsSinceLastPayout.toString()))
	byte 0x736563732073696e6365206c617374207061796f75743a20 // "secs since last payout: "
	frame_dig 6 // secsSinceLastPayout: uint64
	callsub *itoa
	concat
	log

	// contracts/stakingPool.algo.ts:445
	// fudgeInSecs = 4
	int 4
	frame_bury 7 // fudgeInSecs: uint64

	// *if21_condition
	// contracts/stakingPool.algo.ts:446
	// epochInSecs > 60 * 60
	frame_dig 5 // epochInSecs: uint64
	int 3600
	>
	bz *if21_elseif1_condition

	// *if21_consequent
	// contracts/stakingPool.algo.ts:448
	// fudgeInSecs = 60
	int 60
	frame_bury 7 // fudgeInSecs: uint64
	b *if21_end

*if21_elseif1_condition:
	// contracts/stakingPool.algo.ts:449
	// epochInSecs > 60 * 60 * 24
	frame_dig 5 // epochInSecs: uint64
	int 86400
	>
	bz *if21_end

	// *if21_elseif1_consequent
	// contracts/stakingPool.algo.ts:451
	// fudgeInSecs = 5 * 60
	int 300
	frame_bury 7 // fudgeInSecs: uint64

*if21_end:
	// contracts/stakingPool.algo.ts:453
	// assert(
	//                 secsSinceLastPayout >= epochInSecs - fudgeInSecs,
	//                 "Can't payout earlier than last payout + epoch time"
	//             )
	frame_dig 6 // secsSinceLastPayout: uint64
	frame_dig 5 // epochInSecs: uint64
	frame_dig 7 // fudgeInSecs: uint64
	-
	>=

	// Can't payout earlier than last payout + epoch time
	assert

*if20_end:
	// contracts/stakingPool.algo.ts:461
	// increasedStake = 0
	int 0
	frame_bury 8 // increasedStake: uint64

	// contracts/stakingPool.algo.ts:484
	// partialStakersTotalStake: uint64 = 0
	int 0
	frame_bury 9 // partialStakersTotalStake: uint64

	// contracts/stakingPool.algo.ts:486
	// for (let i = 0; i < this.Stakers.value.length; i += 1)
	int 0
	frame_bury 10 // i: uint64

*for_4:
	// contracts/stakingPool.algo.ts:486
	// i < this.Stakers.value.length
	frame_dig 10 // i: uint64
	int 100
	<
	bz *for_4_end

	// *if22_condition
	// contracts/stakingPool.algo.ts:487
	// globals.opcodeBudget < 400
	global OpcodeBudget
	int 400
	<
	bz *if22_end

	// *if22_consequent
	// contracts/stakingPool.algo.ts:488
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if22_end:
	// contracts/stakingPool.algo.ts:490
	// cmpStaker = clone(this.Stakers.value[i])
	frame_dig 10 // i: uint64
	int 64
	* // acc * typeLength
	int 64
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 11 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// *if23_condition
	// contracts/stakingPool.algo.ts:491
	// cmpStaker.Account !== globals.zeroAddress
	frame_dig 11 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	global ZeroAddress
	!=
	bz *if23_end

	// *if23_consequent
	// *if24_condition
	// contracts/stakingPool.algo.ts:495
	// cmpStaker.EntryTime > curTime
	frame_dig 11 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	frame_dig 4 // curTime: uint64
	>
	bz *if24_else

	// *if24_consequent
	// contracts/stakingPool.algo.ts:498
	// log("staker past 'now' - skipping")
	byte 0x7374616b6572207061737420276e6f7727202d20736b697070696e67 // "staker past 'now' - skipping"
	log

	// contracts/stakingPool.algo.ts:499
	// partialStakersTotalStake += cmpStaker.Balance
	frame_dig 9 // partialStakersTotalStake: uint64
	frame_dig 11 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	+
	frame_bury 9 // partialStakersTotalStake: uint64
	b *if24_end

*if24_else:
	// contracts/stakingPool.algo.ts:503
	// timeInPool = curTime - cmpStaker.EntryTime
	frame_dig 4 // curTime: uint64
	frame_dig 11 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	-
	frame_bury 12 // timeInPool: uint64

	// *if25_condition
	// contracts/stakingPool.algo.ts:507
	// timeInPool < epochInSecs
	frame_dig 12 // timeInPool: uint64
	frame_dig 5 // epochInSecs: uint64
	<
	bz *if25_end

	// *if25_consequent
	// contracts/stakingPool.algo.ts:508
	// partialStakersTotalStake += cmpStaker.Balance
	frame_dig 9 // partialStakersTotalStake: uint64
	frame_dig 11 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	+
	frame_bury 9 // partialStakersTotalStake: uint64

	// contracts/stakingPool.algo.ts:509
	// timePercentage = (timeInPool * 1000) / epochInSecs
	frame_dig 12 // timeInPool: uint64
	int 1000
	*
	frame_dig 5 // epochInSecs: uint64
	/
	frame_bury 13 // timePercentage: uint64

	// contracts/stakingPool.algo.ts:511
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts/stakingPool.algo.ts:512
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts/stakingPool.algo.ts:513
	// log(concat('time pct:', timePercentage.toString()))
	byte 0x74696d65207063743a // "time pct:"
	frame_dig 13 // timePercentage: uint64
	callsub *itoa
	concat
	log

	// contracts/stakingPool.algo.ts:514
	// log(concat('staker balance:', cmpStaker.Balance.toString()))
	byte 0x7374616b65722062616c616e63653a // "staker balance:"
	frame_dig 11 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	callsub *itoa
	concat
	log

	// contracts/stakingPool.algo.ts:516
	// stakerReward = wideRatio(
	//                             [cmpStaker.Balance, rewardAvailable, timePercentage],
	//                             [this.TotalAlgoStaked.value, 1000]
	//                         )
	frame_dig 11 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 2 // rewardAvailable: uint64
	mulw
	frame_dig 13 // timePercentage: uint64
	uncover 2
	dig 1
	*
	cover 2
	mulw
	cover 2
	+
	swap
	byte 0x7374616b6564 // "staked"
	app_global_get
	int 1000
	mulw
	divmodw
	pop
	pop
	swap
	!
	assert
	frame_bury 14 // stakerReward: uint64

	// contracts/stakingPool.algo.ts:520
	// log(concat('staker partial rewarded: ', stakerReward.toString()))
	byte 0x7374616b6572207061727469616c2072657761726465643a20 // "staker partial rewarded: "
	frame_dig 14 // stakerReward: uint64
	callsub *itoa
	concat
	log

	// contracts/stakingPool.algo.ts:524
	// rewardAvailable -= stakerReward
	frame_dig 2 // rewardAvailable: uint64
	frame_dig 14 // stakerReward: uint64
	-
	frame_bury 2 // rewardAvailable: uint64

	// contracts/stakingPool.algo.ts:527
	// cmpStaker.Balance += stakerReward
	frame_dig 11 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 11 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 14 // stakerReward: uint64
	+
	itob
	replace3
	frame_bury 11 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:528
	// cmpStaker.TotalRewarded += stakerReward
	frame_dig 11 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 40 // headOffset
	frame_dig 11 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 40 8
	btoi
	frame_dig 14 // stakerReward: uint64
	+
	itob
	replace3
	frame_bury 11 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:529
	// increasedStake += stakerReward
	frame_dig 8 // increasedStake: uint64
	frame_dig 14 // stakerReward: uint64
	+
	frame_bury 8 // increasedStake: uint64

	// contracts/stakingPool.algo.ts:532
	// this.Stakers.value[i] = cmpStaker
	frame_dig 10 // i: uint64
	int 64
	* // acc * typeLength
	frame_dig 11 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

*if25_end:

*if24_end:

*if23_end:

*for_4_continue:
	// contracts/stakingPool.algo.ts:486
	// i += 1
	frame_dig 10 // i: uint64
	int 1
	+
	frame_bury 10 // i: uint64
	b *for_4

*for_4_end:
	// contracts/stakingPool.algo.ts:537
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts/stakingPool.algo.ts:538
	// log(concat('partial staker total stake: ', partialStakersTotalStake.toString()))
	byte 0x7061727469616c207374616b657220746f74616c207374616b653a20 // "partial staker total stake: "
	frame_dig 9 // partialStakersTotalStake: uint64
	callsub *itoa
	concat
	log

	// contracts/stakingPool.algo.ts:542
	// newPoolTotalStake = this.TotalAlgoStaked.value - partialStakersTotalStake
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig 9 // partialStakersTotalStake: uint64
	-
	frame_bury 15 // newPoolTotalStake: uint64

	// *if26_condition
	// contracts/stakingPool.algo.ts:546
	// newPoolTotalStake > 0
	frame_dig 15 // newPoolTotalStake: uint64
	int 0
	>
	bz *if26_end

	// *if26_consequent
	// contracts/stakingPool.algo.ts:548
	// for (let i = 0; i < this.Stakers.value.length; i += 1)
	int 0
	frame_bury 16 // i: uint64

*for_5:
	// contracts/stakingPool.algo.ts:548
	// i < this.Stakers.value.length
	frame_dig 16 // i: uint64
	int 100
	<
	bz *for_5_end

	// *if27_condition
	// contracts/stakingPool.algo.ts:549
	// globals.opcodeBudget < 200
	global OpcodeBudget
	int 200
	<
	bz *if27_end

	// *if27_consequent
	// contracts/stakingPool.algo.ts:550
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if27_end:
	// contracts/stakingPool.algo.ts:552
	// cmpStaker = clone(this.Stakers.value[i])
	frame_dig 16 // i: uint64
	int 64
	* // acc * typeLength
	int 64
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 17 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// *if28_condition
	// contracts/stakingPool.algo.ts:553
	// cmpStaker.Account !== globals.zeroAddress && cmpStaker.EntryTime < curTime
	frame_dig 17 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	global ZeroAddress
	!=
	dup
	bz *skip_and0
	frame_dig 17 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	frame_dig 4 // curTime: uint64
	<
	&&

*skip_and0:
	bz *if28_end

	// *if28_consequent
	// contracts/stakingPool.algo.ts:554
	// timeInPool = curTime - cmpStaker.EntryTime
	frame_dig 4 // curTime: uint64
	frame_dig 17 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	-
	frame_bury 18 // timeInPool: uint64

	// *if29_condition
	// contracts/stakingPool.algo.ts:556
	// timeInPool >= epochInSecs
	frame_dig 18 // timeInPool: uint64
	frame_dig 5 // epochInSecs: uint64
	>=
	bz *if29_end

	// *if29_consequent
	// contracts/stakingPool.algo.ts:559
	// stakerReward = wideRatio([cmpStaker.Balance, rewardAvailable], [newPoolTotalStake])
	frame_dig 17 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 2 // rewardAvailable: uint64
	mulw
	int 0
	frame_dig 15 // newPoolTotalStake: uint64
	divmodw
	pop
	pop
	swap
	!
	assert
	frame_bury 19 // stakerReward: uint64

	// contracts/stakingPool.algo.ts:562
	// cmpStaker.Balance += stakerReward
	frame_dig 17 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 17 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 19 // stakerReward: uint64
	+
	itob
	replace3
	frame_bury 17 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:563
	// cmpStaker.TotalRewarded += stakerReward
	frame_dig 17 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	int 40 // headOffset
	frame_dig 17 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 40 8
	btoi
	frame_dig 19 // stakerReward: uint64
	+
	itob
	replace3
	frame_bury 17 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// contracts/stakingPool.algo.ts:564
	// increasedStake += stakerReward
	frame_dig 8 // increasedStake: uint64
	frame_dig 19 // stakerReward: uint64
	+
	frame_bury 8 // increasedStake: uint64

*if29_end:
	// contracts/stakingPool.algo.ts:569
	// this.Stakers.value[i] = cmpStaker
	frame_dig 16 // i: uint64
	int 64
	* // acc * typeLength
	frame_dig 17 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

*if28_end:

*for_5_continue:
	// contracts/stakingPool.algo.ts:548
	// i += 1
	frame_dig 16 // i: uint64
	int 1
	+
	frame_bury 16 // i: uint64
	b *for_5

*for_5_end:

*if26_end:
	// contracts/stakingPool.algo.ts:576
	// this.TotalAlgoStaked.value += increasedStake
	byte 0x7374616b6564 // "staked"
	app_global_get
	frame_dig 8 // increasedStake: uint64
	+
	byte 0x7374616b6564 // "staked"
	swap
	app_global_put

	// contracts/stakingPool.algo.ts:578
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts/stakingPool.algo.ts:579
	// log(concat('increased stake: ', increasedStake.toString()))
	byte 0x696e63726561736564207374616b653a20 // "increased stake: "
	frame_dig 8 // increasedStake: uint64
	callsub *itoa
	concat
	log

	// contracts/stakingPool.algo.ts:584
	// sendMethodCall<typeof ValidatorRegistry.prototype.stakeUpdatedViaRewards>({
	//             applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value),
	//             methodArgs: [
	//                 { ID: this.ValidatorID.value, PoolID: this.PoolID.value, PoolAppID: this.app.id },
	//                 increasedStake,
	//             ],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "stakeUpdatedViaRewards((uint64,uint64,uint64),uint64)void"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:585
	// applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value)
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:586
	// methodArgs: [
	//                 { ID: this.ValidatorID.value, PoolID: this.PoolID.value, PoolAppID: this.app.id },
	//                 increasedStake,
	//             ]
	byte 0x76616c696461746f724944 // "validatorID"
	app_global_get
	itob
	byte 0x706f6f6c4944 // "poolID"
	app_global_get
	itob
	concat
	txna Applications 0
	itob
	concat
	itxn_field ApplicationArgs
	frame_dig 8 // increasedStake: uint64
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stakingPool.algo.ts:591
	// this.LastPayout.value = curTime
	byte 0x6c6173745061796f7574 // "lastPayout"
	frame_dig 4 // curTime: uint64
	app_global_put
	retsub

// goOnline(byte[],byte[],byte[],uint64,uint64,uint64)void
*abi_route_goOnline:
	// voteKeyDilution: uint64
	txna ApplicationArgs 6
	btoi

	// voteLast: uint64
	txna ApplicationArgs 5
	btoi

	// voteFirst: uint64
	txna ApplicationArgs 4
	btoi

	// stateProofPK: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// selectionPK: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// votePK: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute goOnline(byte[],byte[],byte[],uint64,uint64,uint64)void
	callsub goOnline
	int 1
	return

// goOnline(votePK: bytes, selectionPK: bytes, stateProofPK: bytes, voteFirst: uint64, voteLast: uint64, voteKeyDilution: uint64): void
goOnline:
	proto 6 0

	// contracts/stakingPool.algo.ts:602
	// assert(this.isOwnerOrManagerCaller())
	callsub isOwnerOrManagerCaller
	assert

	// contracts/stakingPool.algo.ts:603
	// sendOnlineKeyRegistration({
	//             votePK: votePK,
	//             selectionPK: selectionPK,
	//             stateProofPK: stateProofPK,
	//             voteFirst: voteFirst,
	//             voteLast: voteLast,
	//             voteKeyDilution: voteKeyDilution,
	//         })
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:604
	// votePK: votePK
	frame_dig -1 // votePK: bytes
	itxn_field VotePK

	// contracts/stakingPool.algo.ts:605
	// selectionPK: selectionPK
	frame_dig -2 // selectionPK: bytes
	itxn_field SelectionPK

	// contracts/stakingPool.algo.ts:606
	// stateProofPK: stateProofPK
	frame_dig -3 // stateProofPK: bytes
	itxn_field StateProofPK

	// contracts/stakingPool.algo.ts:607
	// voteFirst: voteFirst
	frame_dig -4 // voteFirst: uint64
	itxn_field VoteFirst

	// contracts/stakingPool.algo.ts:608
	// voteLast: voteLast
	frame_dig -5 // voteLast: uint64
	itxn_field VoteLast

	// contracts/stakingPool.algo.ts:609
	// voteKeyDilution: voteKeyDilution
	frame_dig -6 // voteKeyDilution: uint64
	itxn_field VoteKeyDilution

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// goOffline()void
*abi_route_goOffline:
	// execute goOffline()void
	callsub goOffline
	int 1
	return

// goOffline(): void
goOffline:
	proto 0 0

	// contracts/stakingPool.algo.ts:614
	// assert(this.isOwnerOrManagerCaller())
	callsub isOwnerOrManagerCaller
	assert

	// contracts/stakingPool.algo.ts:615
	// sendOfflineKeyRegistration({})
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// linkToNFD(uint64,string)void
*abi_route_linkToNFD:
	// nfdName: string
	txna ApplicationArgs 2
	extract 2 0

	// nfdAppID: uint64
	txna ApplicationArgs 1
	btoi

	// execute linkToNFD(uint64,string)void
	callsub linkToNFD
	int 1
	return

// linkToNFD(nfdAppID: uint64, nfdName: string): void
linkToNFD:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/stakingPool.algo.ts:622
	// assert(this.isOwnerOrManagerCaller())
	callsub isOwnerOrManagerCaller
	assert

	// contracts/stakingPool.algo.ts:624
	// registryID = sendMethodCall<typeof ValidatorRegistry.prototype.getNFDRegistryID>({
	//             applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value),
	//             methodArgs: [],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "getNFDRegistryID()uint64"
	itxn_field ApplicationArgs

	// contracts/stakingPool.algo.ts:625
	// applicationID: AppID.fromUint64(this.CreatingValidatorContractAppID.value)
	byte 0x63726561746f72417070 // "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:626
	// methodArgs: []
	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	btoi
	frame_bury 0 // registryID: uint64

	// contracts/stakingPool.algo.ts:629
	// sendAppCall({
	//             applicationID: AppID.fromUint64(registryID),
	//             applicationArgs: ['verify_nfd_addr', nfdName, itob(nfdAppID), rawBytes(this.app.address)],
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum

	// contracts/stakingPool.algo.ts:630
	// applicationID: AppID.fromUint64(registryID)
	frame_dig 0 // registryID: uint64
	itxn_field ApplicationID

	// contracts/stakingPool.algo.ts:631
	// applicationArgs: ['verify_nfd_addr', nfdName, itob(nfdAppID), rawBytes(this.app.address)]
	byte 0x7665726966795f6e66645f61646472 // "verify_nfd_addr"
	itxn_field ApplicationArgs
	frame_dig -2 // nfdName: string
	itxn_field ApplicationArgs
	frame_dig -1 // nfdAppID: uint64
	itob
	itxn_field ApplicationArgs
	global CurrentApplicationAddress
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// getEntryTime(): uint64
//
// Calculate the entry time for counting a stake as entering the pool.
// Algorand won't see the balance increase for ALGORAND_STAKING_BLOCK_DELAY rounds, so we approximate it.
// The entry time is calculated by adding an approximate number of seconds based on current AVG block times
// to the original entry time.  This means users don't get payouts based on time their balance wouldn't have
// been seen by the network.
//
// @returns {uint64} - The updated entry time.
getEntryTime:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/stakingPool.algo.ts:647
	// entryTime = globals.latestTimestamp
	global LatestTimestamp
	frame_bury 0 // entryTime: uint64

	// contracts/stakingPool.algo.ts:650
	// return entryTime + (ALGORAND_STAKING_BLOCK_DELAY * AVG_BLOCK_TIME_SECS) / 10;
	frame_dig 0 // entryTime: uint64
	int 896
	+

	// set the subroutine return value
	frame_bury 0
	retsub

*create_NoOp:
	method "createApplication(uint64,uint64,uint64,uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication
	err

*call_NoOp:
	method "gas()void"
	method "initStorage(pay)void"
	method "addStake(pay,address)uint64"
	method "removeStake(uint64)void"
	method "removeTokenReward(address,uint64)void"
	method "getStakerInfo(address)(address,uint64,uint64,uint64,uint64)"
	method "updateAlgodVer(string)void"
	method "epochBalanceUpdate()void"
	method "goOnline(byte[],byte[],byte[],uint64,uint64,uint64)void"
	method "goOffline()void"
	method "linkToNFD(uint64,string)void"
	txna ApplicationArgs 0
	match *abi_route_gas *abi_route_initStorage *abi_route_addStake *abi_route_removeStake *abi_route_removeTokenReward *abi_route_getStakerInfo *abi_route_updateAlgodVer *abi_route_epochBalanceUpdate *abi_route_goOnline *abi_route_goOffline *abi_route_linkToNFD
	err

*intToAscii:
	proto 1 1
	byte 0x30313233343536373839 // "0123456789"
	frame_dig -1 // i: uint64
	int 1
	extract3
	retsub
	

*itoa:
	proto 1 1
	frame_dig -1 // i: uint64
	int 0
	==
	bz *itoa_if_end
	byte 0x30
	retsub

*itoa_if_end:
	frame_dig -1 // i: uint64
	int 10
	/
	int 0
	>
	bz *itoa_ternary_false
	frame_dig -1 // i: uint64
	int 10
	/
	callsub *itoa
	b *itoa_ternary_end

*itoa_ternary_false:
	byte 0x // ""

*itoa_ternary_end:
	frame_dig -1 // i: uint64
	int 10
	%
	callsub *intToAscii
	concat
	retsub