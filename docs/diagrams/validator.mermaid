sequenceDiagram
    participant staker as Staker
    participant validator as Validator
    participant master as Master Contract
    participant pool as Staking pool

    Note over validator,master: get mbr data
    validator->>master: [SIMULATE] getMbrAmounts()(uint64,uint64,uint64)
    master->>validator: returns MBRs to add Validator, new Pool, new first-time Staker

    Note over validator,master: Add self as new validator
    validator->>+master: [payment of Validator MBR for new validator]
    validator->>master: addValidator(mbrPayment: PayTxn, nfdName: string, config: ValidatorConfig): uint64
    master->>-validator: initializes new validator record, returns validator ID

    Note over validator,master: Add pool for validator
    validator->>+master: [payment of mbr for new pool]
    validator->>master: addPool(mbrPayment: PayTxn, validatorID: ValidatorID): ValidatorPoolKey
    master->>pool: [itxn] creates new staking pool contract instance
    master->>-validator: returns {Validator ID, Pool ID, Pool App ID}

    Note over staker,master: Add stake to validator
    staker->>+master: [payment of stake (portion stays as MBR if first-time in protocol)
    staker->>master: addStake(stakedAmountPayment: PayTxn, validatorID: ValidatorID): ValidatorPoolKey
    master->>master: checks stakers existing staked pools w/ validator\nthen checks avail pools
    master->>pool: [itxn] [payment of user stake minus MBR portion had\nto be left behind in vaidator]
    master->>pool: [itxn] addStake(stakedAmountPayment: PayTxn, staker: Address): uint64
    pool->>pool: updates 'ledger' for staker updating balance

    Note over staker,pool: Remove stake from pool
    staker->>+pool: removeStake(amountToUnstake: uint64)
    pool->>staker: [itxn] [payment of amountToUnstake from pool, updating ledger balance as welll]
    pool->>master: [itxn] stakeRemoved(poolKey: ValidatorPoolKey, staker: Address,\namountRemoved: uint64, stakerRemoved: boolean)
    Note left of master: updates totals for validator for removed stake/staker
