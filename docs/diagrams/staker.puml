@startuml
actor "Staker" as staker
actor "Validator" as validator
actor "Master Contract" as master
database "Staking pool(*)" as pool
group Add stake to validator
autonumber 0
staker -> master: [payment of stake (portion stays as MBR if first-time in protocol)
staker -> master:  addStake(stakedAmountPayment: PayTxn, validatorID: ValidatorID, tokenToVerify: uint64): ValidatorPoolKey
note right: updating totals for validator and protocol
autonumber stop
master -> master: checks stakers existing staked pools w/ validator\nthen checks avail pools
autonumber 0
master -> pool: [itxn] [payment of user stake minus MBR portion had\nto be left behind in vaidator]
master -> pool: [itxn] addStake(stakedAmountPayment: PayTxn, staker: Address): uint64
note left: can only be called by validator
autonumber stop
pool -> pool: updates 'ledger' for staker updating balance
end
group Remove stake from pool (no reward token))
autonumber 0
staker -> pool: removeStake(amountToUnstake: uint64)
autonumber 0
pool -> staker: [itxn] [payment of amountToUnstake from pool, updating ledger balance as welll]
pool -> master: [itxn] stakeRemoved(poolKey: ValidatorPoolKey, staker: Address,\namountRemoved: uint64, rewardRemoved: uint64, stakerRemoved: boolean)
note left: updates totals for validator for removed stake/staker
end
group Remove stake from pool (W/ reward token))
autonumber 0
staker -> pool: removeStake(amountToUnstake: uint64)
autonumber 0
pool -> staker: [itxn] [Only if unstaking from Pool 1!] Sends all of accumulated rewarded token to staker
pool -> staker: [itxn] [payment of amountToUnstake from pool, updating ledger balance as welll]
pool -> master: [itxn] stakeRemoved(poolKey: ValidatorPoolKey, staker: Address,\namountRemoved: uint64, rewardRemoved: uint64, stakerRemoved: boolean)
note left: updates totals for validator for removed stake/staker
master -> pool: [itxn] [only if called by pool other than 1!]\ncall Pool 1\npayTokenReward(staker; Address, rewardToken: uint64, amountToSend: uint64)
pool -> staker: [itxn] [IF Pool 1!] Sends reward token to staker
end
@enduml
